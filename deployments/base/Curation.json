{
  "address": "0x2F9594F9E540DC723C3b5e5Ac0fF1fb5F3439835",
  "abi": [
    {
      "inputs": [],
      "name": "CannotInviteYourself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CodeAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CodeIsEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CodeIsUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CodeNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShouldCreateCodeFirstly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserIsInvited",
      "type": "error"
    }
  ],
  "transactionHash": "0xb129591be1188a3f7ce6649834adea2f2208b9499e977ea8df9dc2f8baee812f",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x2F9594F9E540DC723C3b5e5Ac0fF1fb5F3439835",
    "transactionIndex": 83,
    "gasUsed": "626668",
    "logsBloom": "0x
    "blockHash": "0xd66efe96f3dbbba31d4e39d4b5c5aebcae173b03405fb4df21dd3fc14e2ca76b",
    "transactionHash": "0xb129591be1188a3f7ce6649834adea2f2208b9499e977ea8df9dc2f8baee812f",
    "logs": [],
    "blockNumber": 21756114,
    "cumulativeGasUsed": "18367942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8c9b5eee8d6ae7e0cb71d11e1c67a101",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotInviteYourself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CodeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CodeIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CodeIsUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CodeNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldCreateCodeFirstly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserIsInvited\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"CodeIsEmpty()\":[{\"notice\":\"curation \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Curation.sol\":\"Curation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":880},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n  string uri;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external;\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x087706e9abd6808c4e132d31787bce70fc89906be55bf31591cd70f715582b7a\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1072f6a022eddf152c5625bec140b16de6fadaef3c8d663376ad48874d384a64\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error ExceedMaxAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xfa08fa5ae4cf41760a816c982b6d0f227412e7a5c16e74365291f47438f2644e\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount,\\n    address referral\\n  );\\n  event PriceUpdated(uint256 price);\\n  event ReferralRewardRateUpdated(uint256 rate);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration,\\n    string uri\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfbd5ca9b184ebba95bde0127a85ec940841001f36f90666719c4ca1af90ebcac\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x9b3d57bea5bba1424035a8591e21adc6cc4f50457c743f4e0a1a599581951285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57610a6890816100228239308160090152f35b600080fdfe60806040818152307f000000000000000000000000000000000000000000000000000000000000000014906004918236101561003a57600080fd5b600093843560e01c9081630819334914610880575080630b7fb74114610749578063223bb6421461071f578063447c53ec1461069757806354ff42e4146106595780635d82a6c21461055357806360d580b2146105375780637e0c44c51461049b578063998a591a14610438578063a0be575c14610405578063aaa964aa146103de578063ac362d7314610332578063e64e5c2a146101d75763e72267b6146100e257600080fd5b6101d3576100ef366108d3565b929083156101c4576003810193338652602091858352848720541561019c57600201928187528383526001600160a01b038588205416610175575033865284825283862054908087528383528487209573ffffffffffffffffffffffffffffffffffffffff19963388825416179055338852835284872055855252822090815416905580f35b84517f6ae82d0c000000000000000000000000000000000000000000000000000000008152fd5b8385517f6b2899aa000000000000000000000000000000000000000000000000000000008152fd5b5090516367ac2dff60e11b8152fd5b8280fd5b506101d3576101e5366108d3565b9283156103245760028201848652806020526001600160a01b0394858588205416156102fc573387526003840160205280858820541480156102e7575b6102bf57865260205283838620541692338652600183016020528086209485541661029957505060038301805460ff81161561027b575b50505073ffffffffffffffffffffffffffffffffffffffff1982541617905580f35b60ff19166001179055805461028f90610962565b9055388080610259565b517fdce6bf09000000000000000000000000000000000000000000000000000000008152fd5b8285517f69c58179000000000000000000000000000000000000000000000000000000008152fd5b50808752816020523386868920541614610222565b8285517f8f189b26000000000000000000000000000000000000000000000000000000008152fd5b82516367ac2dff60e11b8152fd5b6103da858460ff600382610345366108d3565b610350969196610987565b5081526002860160205260016001600160a01b03968784842054168352016020522083519461037e86610946565b81541685526001810154602086015260028101548486015201541615156060830152519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b0390f35b6020836001600160a01b03818860026103f6366108d3565b83520185522054169051908152f35b509190916101d35760803660031901126101d3576005906024358452350160205281206044358155600160643591015580f35b509190916101d35760203660031901126101d35767058d15e176280000916005600192858052350160205267016345785d8a000082828620600a815501558184526702c68af0bb1400008282862060148155015560028452832060288155015580f35b506101d3576001906104ac366108ee565b92016001600160a01b0380931685528060205281852092606060ff60038551936104d585610946565b8754169687855260018101546020860152600281015487860152015416151591015282610500578480f35b60029285526020528320018054916000198301928311610524575055388080808480f35b836011602492634e487b7160e01b835252fd5b60208361054c610546366108d3565b906109ac565b9051908152f35b5092919261063057602092836003193601126101d3578233815260018235018552600183822001918254908161058e575b5050505051908152f35b90919294508351917fa9059cbb00000000000000000000000000000000000000000000000000000000835233828401526024830152858260448186305af1801561064f576105e6575b50508254925538808080610584565b85903d8711610647575b601f8201601f191683019067ffffffffffffffff82118483101761063457508691839186528101031261063057518015150361062d5738806105d7565b80fd5b5080fd5b846041602492634e487b7160e01b835252fd5b3d91506105f0565b84513d85823e3d90fd5b6103da60018460ff6003828a61066e366108ee565b9690610678610987565b506001600160a01b038098168352016020522083519461037e86610946565b506101d3576001906106a8366108ee565b92016001600160a01b0380931685528060205281852092606060ff60038551936106d185610946565b87541696878552600181015460208601526002810154878601520154161515910152826106fc578480f35b600292855260205283200180549160018301809311610524575055388080808480f35b602083808760036001600160a01b03610737366108ee565b91909116835201845220549051908152f35b509190916101d35761075a366108d3565b801561087157600382013386526020938185528587205461084a575090829160016002940133885280865260ff6003888a20015416156107c7575b5033875284528085872055855201905281203373ffffffffffffffffffffffffffffffffffffffff1982541617905580f35b600387516107d481610946565b8981528781018a8152898201908b8252606083019460018652338d528a526001600160a01b038b8d2093511673ffffffffffffffffffffffffffffffffffffffff198454161783555160018301555187820155019051151560ff801983541691161790556108428354610962565b835538610795565b85517fd67a0aba000000000000000000000000000000000000000000000000000000008152fd5b8284516367ac2dff60e11b8152fd5b838660058293602083610892366108d3565b92909361089e81610914565b82815201528352016020522081516108b581610914565b60206001835493848452015491019081528251918252516020820152f35b60409060031901126108e9576004359060243590565b600080fd5b60409060031901126108e957600435906024356001600160a01b03811681036108e95790565b6040810190811067ffffffffffffffff82111761093057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761093057604052565b60001981146109715760010190565b634e487b7160e01b600052601160045260246000fd5b6040519061099482610946565b60006060838281528260208201528260408201520152565b600501600091828052816020526020604084206040516109cb81610914565b600182549283835201549283910152821115610a2b57506020906001845282825260408420906040516109fd81610914565b6001835493848352015493849101521115610a25575060028252602052604090206001015490565b91505090565b925050509056fea2646970667358221220d1ca2c5b74ed6f79b641745271ce2d3ac60cb7770f9161e3ceed334af1f08dd364736f6c63430008160033",
  "deployedBytecode": "0x60806040818152307f000000000000000000000000000000000000000000000000000000000000000014906004918236101561003a57600080fd5b600093843560e01c9081630819334914610880575080630b7fb74114610749578063223bb6421461071f578063447c53ec1461069757806354ff42e4146106595780635d82a6c21461055357806360d580b2146105375780637e0c44c51461049b578063998a591a14610438578063a0be575c14610405578063aaa964aa146103de578063ac362d7314610332578063e64e5c2a146101d75763e72267b6146100e257600080fd5b6101d3576100ef366108d3565b929083156101c4576003810193338652602091858352848720541561019c57600201928187528383526001600160a01b038588205416610175575033865284825283862054908087528383528487209573ffffffffffffffffffffffffffffffffffffffff19963388825416179055338852835284872055855252822090815416905580f35b84517f6ae82d0c000000000000000000000000000000000000000000000000000000008152fd5b8385517f6b2899aa000000000000000000000000000000000000000000000000000000008152fd5b5090516367ac2dff60e11b8152fd5b8280fd5b506101d3576101e5366108d3565b9283156103245760028201848652806020526001600160a01b0394858588205416156102fc573387526003840160205280858820541480156102e7575b6102bf57865260205283838620541692338652600183016020528086209485541661029957505060038301805460ff81161561027b575b50505073ffffffffffffffffffffffffffffffffffffffff1982541617905580f35b60ff19166001179055805461028f90610962565b9055388080610259565b517fdce6bf09000000000000000000000000000000000000000000000000000000008152fd5b8285517f69c58179000000000000000000000000000000000000000000000000000000008152fd5b50808752816020523386868920541614610222565b8285517f8f189b26000000000000000000000000000000000000000000000000000000008152fd5b82516367ac2dff60e11b8152fd5b6103da858460ff600382610345366108d3565b610350969196610987565b5081526002860160205260016001600160a01b03968784842054168352016020522083519461037e86610946565b81541685526001810154602086015260028101548486015201541615156060830152519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b0390f35b6020836001600160a01b03818860026103f6366108d3565b83520185522054169051908152f35b509190916101d35760803660031901126101d3576005906024358452350160205281206044358155600160643591015580f35b509190916101d35760203660031901126101d35767058d15e176280000916005600192858052350160205267016345785d8a000082828620600a815501558184526702c68af0bb1400008282862060148155015560028452832060288155015580f35b506101d3576001906104ac366108ee565b92016001600160a01b0380931685528060205281852092606060ff60038551936104d585610946565b8754169687855260018101546020860152600281015487860152015416151591015282610500578480f35b60029285526020528320018054916000198301928311610524575055388080808480f35b836011602492634e487b7160e01b835252fd5b60208361054c610546366108d3565b906109ac565b9051908152f35b5092919261063057602092836003193601126101d3578233815260018235018552600183822001918254908161058e575b5050505051908152f35b90919294508351917fa9059cbb00000000000000000000000000000000000000000000000000000000835233828401526024830152858260448186305af1801561064f576105e6575b50508254925538808080610584565b85903d8711610647575b601f8201601f191683019067ffffffffffffffff82118483101761063457508691839186528101031261063057518015150361062d5738806105d7565b80fd5b5080fd5b846041602492634e487b7160e01b835252fd5b3d91506105f0565b84513d85823e3d90fd5b6103da60018460ff6003828a61066e366108ee565b9690610678610987565b506001600160a01b038098168352016020522083519461037e86610946565b506101d3576001906106a8366108ee565b92016001600160a01b0380931685528060205281852092606060ff60038551936106d185610946565b87541696878552600181015460208601526002810154878601520154161515910152826106fc578480f35b600292855260205283200180549160018301809311610524575055388080808480f35b602083808760036001600160a01b03610737366108ee565b91909116835201845220549051908152f35b509190916101d35761075a366108d3565b801561087157600382013386526020938185528587205461084a575090829160016002940133885280865260ff6003888a20015416156107c7575b5033875284528085872055855201905281203373ffffffffffffffffffffffffffffffffffffffff1982541617905580f35b600387516107d481610946565b8981528781018a8152898201908b8252606083019460018652338d528a526001600160a01b038b8d2093511673ffffffffffffffffffffffffffffffffffffffff198454161783555160018301555187820155019051151560ff801983541691161790556108428354610962565b835538610795565b85517fd67a0aba000000000000000000000000000000000000000000000000000000008152fd5b8284516367ac2dff60e11b8152fd5b838660058293602083610892366108d3565b92909361089e81610914565b82815201528352016020522081516108b581610914565b60206001835493848452015491019081528251918252516020820152f35b60409060031901126108e9576004359060243590565b600080fd5b60409060031901126108e957600435906024356001600160a01b03811681036108e95790565b6040810190811067ffffffffffffffff82111761093057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761093057604052565b60001981146109715760010190565b634e487b7160e01b600052601160045260246000fd5b6040519061099482610946565b60006060838281528260208201528260408201520152565b600501600091828052816020526020604084206040516109cb81610914565b600182549283835201549283910152821115610a2b57506020906001845282825260408420906040516109fd81610914565b6001835493848352015493849101521115610a25575060028252602052604090206001015490565b91505090565b925050509056fea2646970667358221220d1ca2c5b74ed6f79b641745271ce2d3ac60cb7770f9161e3ceed334af1f08dd364736f6c63430008160033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CodeIsEmpty()": [
        {
          "notice": "curation "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}