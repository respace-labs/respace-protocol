{
  "address": "0x53874A0999C749c3136c0F43e708bF1D46ff91Fe",
  "abi": [
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlanNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlanNotExisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscribeAmountTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscriptionNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "planId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "generateSubscriptionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf7c9af29c8dd01e35c9930b6717063fac9ce847f6cfe15550301edb3eec3f8e",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x53874A0999C749c3136c0F43e708bF1D46ff91Fe",
    "transactionIndex": 57,
    "gasUsed": "1395306",
    "logsBloom": "0x
    "blockHash": "0x2cb9e965297d75a34d61ca8c6991074cd3fd031f7f170a171ed34b0cc0bb6273",
    "transactionHash": "0xaf7c9af29c8dd01e35c9930b6717063fac9ce847f6cfe15550301edb3eec3f8e",
    "logs": [],
    "blockNumber": 21756119,
    "cumulativeGasUsed": "12179064",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8c9b5eee8d6ae7e0cb71d11e1c67a101",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlanNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlanNotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscribeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"generateSubscriptionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"common \"}],\"PlanNotExisted()\":[{\"notice\":\"Member \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Member.sol\":\"Member\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":880},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n  string uri;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external;\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x087706e9abd6808c4e132d31787bce70fc89906be55bf31591cd70f715582b7a\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0x0a4250017b84d277718650c405f4ba06b70be2a5e84ee1d4091c4ece64370491\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1072f6a022eddf152c5625bec140b16de6fadaef3c8d663376ad48874d384a64\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error ExceedMaxAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xfa08fa5ae4cf41760a816c982b6d0f227412e7a5c16e74365291f47438f2644e\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount,\\n    address referral\\n  );\\n  event PriceUpdated(uint256 price);\\n  event ReferralRewardRateUpdated(uint256 rate);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration,\\n    string uri\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfbd5ca9b184ebba95bde0127a85ec940841001f36f90666719c4ca1af90ebcac\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8 planId) {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    planId = self.planIndex;\\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\\n    ++self.planIndex;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    Token.State memory token,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    string calldata uri,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\\n\\n    Plan memory plan = self.plans[planId];\\n    if (!plan.isActive) revert Errors.PlanNotActive();\\n\\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n\\n      Curation.increaseMemberCount(curation, msg.sender);\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.uri = uri;\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    bytes32 id\\n  ) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    /** expired */\\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\\n      Curation.decreaseMemberCount(curation, subscription.account);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n    } else {\\n      subscription.startTime = block.timestamp;\\n      subscription.amount -= consumedAmount;\\n      subscription.duration = remainingDuration;\\n    }\\n\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscription(\\n    State storage self,\\n    uint8 planId,\\n    address account\\n  ) external view returns (Subscription memory) {\\n    bytes32 id = generateSubscriptionId(planId, account);\\n    return self.subscriptions[id];\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function calculateIncreasingDuration(\\n    Token.State memory token,\\n    Plan memory plan,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint256 duration) {\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    duration = tokenAmount / info.tokenAmountAfterFee;\\n  }\\n\\n  function calculateMinimumSubscriptionTokens(\\n    Token.State memory token,\\n    Plan memory plan\\n  ) internal pure returns (uint256) {\\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0xabe67c8ad7caa15ce2f42276daa1f9578918b2754da1c92b4f8631264813789b\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\\n\\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\\n    info = getTokenAmount(self, ethAmount);\\n\\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(\\n    State storage self,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\\n    info = getEthAmount(self, tokenAmount);\\n\\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xa70bee01471d54dfe5c22ba461f1bdcb4ef6834c0f4a2e4e05e14d3de03fc2a3\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x9b3d57bea5bba1424035a8591e21adc6cc4f50457c743f4e0a1a599581951285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761185390816100228239308160070152f35b600080fdfe6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c9081633474241b14610b0657816362195e9f14610ade5781636555463a14610ab25781637060440414610a00578163844899f1146109be5781638c48d3321461083f578163a5ac5cd71461067d578163da4382fa14610487578163f1a91b1314610256575063fb1af52e146100b157600080fd5b604036600319011261025357602435906040519182908054808552602080950191845284842090845b81811061023f57505050816100f091038261106c565b80516100fb816115e8565b91610109604051938461106c565b818352610115826115e8565b601f1901845b81811061021e575050600480350190845b838110610193575050505060405191838301848452825180915260408401948060408360051b870101940192955b8287106101675785850386f35b909192938280610183600193603f198a8203018652885161110c565b960192019601959291909261015a565b806101a360019284999899611611565b518852838752604088206101fa6004604051926101bf84611050565b6001600160a01b03815460ff8116865260081c168b85015285810154604085015260028101546060850152600381015460808501520161119a565b60a08201526102098288611611565b526102148187611611565b500195949561012c565b9580959661022d949394611572565b8282880101520195949592919261011b565b8254845292860192600192830192016100da565b80fd5b90506102535760803660031901126102535767ffffffffffffffff6004356024358281116104835761028c90369060040161109e565b9290936044359384156104595760ff84541694604051936102ac8561100a565b80831161044557604051602098601f1994906102cf601f830187168c018461106c565b8183523682820111610441578187928c92838601378301015285528785019182526040850192606435845260608601946001906001875289600052600389018b526040600020975191825194851161042d576103358561032f8b54611160565b8b611256565b8b93601f86116001146103c05750509280610395989795936103709360039896926103b5575b50508160011b916000199060031b1c19161790565b85555b51600185015551600284015551151591019060ff801983541691151516179055565b805460ff6103a4818316611600565b169060ff1916179055604051908152f35b01519050388061035b565b8983528c8320949392908616915b8d83831061041557505050926001928592600398966103959b9a9896106103fd575b505050811b018555610373565b015160001983891b60f8161c191690553880806103f0565b848601518755958101959485019491909101906103ce565b602482634e487b7160e01b81526041600452fd5b8680fd5b602484634e487b7160e01b81526041600452fd5b60046040517f907adecd000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b90506102535760a0366003190112610253576064359060443560043560ff841684036106785760843593841561064e576104c29033906115a7565b90600481019082855260209180835260408620916001830154156106245784866104ef9260243590611340565b95909660038401928354808b101560001461061d575b604051907fa9059cbb0000000000000000000000000000000000000000000000000000000082523360048301526024820152868160448186305af18015610612576105d7575b50835460809a908082106105975750509161057660408361057b958a6002999a9b96528a52206112de565b61172d565b5054910154915b60405194855284015260408301526060820152f35b92509650506105cf91506002869401928354906105c86105c0846105bb89866112cb565b611483565b9889946112be565b90556112be565b905590610582565b8681813d831161060b575b6105ec818361106c565b81010312610607575180151503610603573861054b565b5080fd5b8280fd5b503d6105e2565b6040513d85823e3d90fd5b5089610505565b60046040517f1a00354f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b90506102535760c03660031901126102535760043561069a61108e565b67ffffffffffffffff60443581811161083b576106bb90369060040161109e565b9290916064359360a4359586151587036108375785156104595760ff8082541694169384101561080d5760030193836000526020908560205260406000209383116107f9576107148361070e8654611160565b86611256565b8891601f841160011461078a57508261077c98979593600397959361074e938c9261077f5750508160011b916000199060031b1c19161790565b90555b60005260205260406000209060018201556084356002820155019060ff801983541691151516179055565b80f35b01359050388061035b565b91601f198416858b5260208b20938b905b8282106107e157505092600192859261077c9b9a989660039a9896106107c9575b505050811b019055610751565b0135600019838a1b60f8161c191690553880806107bc565b8060018597829496880135815501960193019061079b565b602489634e487b7160e01b81526041600452fd5b60046040517fc9c5baf2000000000000000000000000000000000000000000000000000000008152fd5b8780fd5b8480fd5b602083366003190182136102535760043560ff9260ff82541693610862856115e8565b92610870604051948561106c565b85845261087c866115e8565b601f190183865b82811061099057505050846003809201905b8381168881101561090757906108fc826109029360005284885260406000208787604051926108c38461100a565b6108cc8161119a565b845260018101548c85015260028101546040850152015416151560608201526108f5828b611611565b5288611611565b50611600565b610895565b85888860405191838301848452825180915260408401948060408360051b870101940192955b82871061093a5785850386f35b909192938280600192603f1989820301855287519061096260808351908084528301906110cc565b918381015184830152604081015160408301526060809101511515910152960192019601959291909261092d565b60405161099c8161100a565b8860608083528185840152816040840152820152828289010152018490610883565b8260403660031901126102535760043560ff8116810361067857602435906001600160a01b0382168203610678576020916109f8916115a7565b604051908152f35b82606036600319011261025357610a1561108e565b604435916001600160a01b03918284168403610678576040610a9592610a49610aae96600494610a43611572565b506115a7565b8152828035016020522060405193610a6085611050565b815460ff8116865260081c1660208501526001810154604085015260028101546060850152600381015460808501520161119a565b60a082015260405191829160208352602083019061110c565b0390f35b826060366003190112610253576040610ad26044356024356004356114a3565b82519182526020820152f35b9050610253576080366003190112610253576040610ad2606435604435602435600435611340565b9050610253576101203660031901126102535760603660231901126102535760e060405260243560805260443560a05260643560c05260c43560ff811690036102535760e43567ffffffffffffffff811161060357610b6990369060040161109e565b90918060ff600435541660ff60c43516101561080d576101043515610fe05760ff60c4351682526003600435016020526040822060405190610baa8261100a565b610bb38161119a565b82526001810154602083015260ff6003600283015492604085019384520154161580156060840152610fb657516040516327d5ff4960e11b8152608051600482015260a051602482015260c08051604483015262278d009092046064820152908160848173016c1d7E2D64Edada6E60A56102209476a8c2DA95af4908115610fab57906060918591610f8c575b50015162278d0081029080820462278d001490151715610f78576101043510610f4e57610c6f3360c4356115a7565b80845260048035810160209081526040808720949091015190516327d5ff4960e11b81526080519281019290925260a051602483015260c08051604484015262278d0090910460648301528160848173016c1d7E2D64Edada6E60A56102209476a8c2DA95af4908115610f4357610cf6916060918791610f14575b50015161010435611483565b946001830191825415600014610ef85783547fffffffffffffffffffffff0000000000000000000000000000000000000000001660c43560ff16173360081b74ffffffffffffffffffffffffffffffffffffffff0016178455610d5b9060a4356116a3565b508594732F9594F9E540DC723C3b5e5Ac0fF1fb5F3439835803b15610603576040517f447c53ec0000000000000000000000000000000000000000000000000000000081526084356004820152336024820152908290829060449082905af48015610eed57610ede575b50905b600484019167ffffffffffffffff8211610eca57610df082610dea8554611160565b85611256565b80601f8311600114610e5f579180610e259260609b6002989796959261077f5750508160011b916000199060031b1c19161790565b90555b42905560038101610e3d61010435825461129b565b905501610e4b84825461129b565b905560405192835260208301526040820152f35b90601f19831684835260208320925b818110610eb257509160609a849260029897969560019510610e98575b505050811b019055610e28565b0135600019600384901b60f8161c19169055388080610e8b565b9192602060018192868f013581550194019201610e6e565b80634e487b7160e01b602492526041600452fd5b610ee79061103c565b38610dc5565b6040513d84823e3d90fd5b610f0c91945060a435608435600435611340565b949093610dc8565b610f36915060c03d60c011610f3c575b610f2e818361106c565b81019061163b565b38610cea565b503d610f24565b6040513d87823e3d90fd5b60046040517f335ac97b000000000000000000000000000000000000000000000000000000008152fd5b602484634e487b7160e01b81526011600452fd5b610fa5915060c03d60c011610f3c57610f2e818361106c565b38610c40565b6040513d86823e3d90fd5b60046040517ffeb7c323000000000000000000000000000000000000000000000000000000008152fd5b60046040517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b6080810190811067ffffffffffffffff82111761102657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161102657604052565b60c0810190811067ffffffffffffffff82111761102657604052565b90601f8019910116810190811067ffffffffffffffff82111761102657604052565b6024359060ff8216820361067857565b9181601f840112156106785782359167ffffffffffffffff8311610678576020838186019501011161067857565b919082519283825260005b8481106110f8575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016110d7565b9060c060a061115d9360ff81511684526001600160a01b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151918160a082015201906110cc565b90565b90600182811c92168015611190575b602083101461117a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161116f565b906040519182600082546111ad81611160565b9081845260209460019160018116908160001461121d57506001146111de575b5050506111dc9250038361106c565b565b600090815285812095935091905b8183106112055750506111dc93508201013880806111cd565b855488840185015294850194879450918301916111ec565b925050506111dc94925060ff191682840152151560051b8201013880806111cd565b81811061124a575050565b6000815560010161123f565b9190601f811161126557505050565b6111dc926000526020600020906020601f840160051c83019310611291575b601f0160051c019061123f565b9091508190611284565b919082018092116112a857565b634e487b7160e01b600052601160045260246000fd5b919082039182116112a857565b818102929181159184041417156112a857565b6004600091828155826001820155826002820155826003820155016113038154611160565b8061130d57505050565b82601f821160011461131e57505055565b909180825261133c601f60208420940160051c84016001850161123f565b5555565b939290916004850160008381528160205260408120946001860195865498891561147657611370908742916114a3565b999097881561146857908a91600284019161138e429184549061129b565b11611446575050506001600160a01b03732F9594F9E540DC723C3b5e5Ac0fF1fb5F3439835915460081c1691813b15610483576040517f7e0c44c500000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b039290921660248301528290829060449082905af48015610eed579261057692604092611432979695611437575b5090858252602052206112de565b509190565b6114409061103c565b38611424565b935095509550915060039250429055016114618482546112be565b9055559190565b505050509550505050508190565b5050509550505050508190565b811561148d570490565b634e487b7160e01b600052601260045260246000fd5b600490939291936000948552016020526040832092604051916114c583611050565b6001600160a01b03855460ff8116855260081c1660208401526001850154604084019081526002860154936060810194855260a0611511600460038a015499608085019a8b520161119a565b9101525190811561156957818110611569579061152d916112be565b908251908183101561155f57508161154c61155b9493611553936112be565b95516112cb565b905190611483565b9190565b9492505050519190565b50509250508190565b6040519061157f82611050565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b906001600160a01b036040519160ff6020840194168452166040820152604081526060810181811067ffffffffffffffff8211176110265760405251902090565b67ffffffffffffffff81116110265760051b60200190565b60ff1660ff81146112a85760010190565b80518210156116255760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b908160c09103126106785760a06040519161165583611050565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b80548210156116255760005260206000200190600090565b91906001830160009082825280602052604082205415600014611727578454946801000000000000000086101561171357836117036116ec886001604098999a0185558461168b565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146118165760001991808301818111611802578254908482019182116117ee578181036117b9575b505050805480156117a557820191611788838361168b565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b6117d96117c96116ec938661168b565b90549060031b1c9283928661168b565b90558652846020526040862055388080611770565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b505050509056fea264697066735822122082f735c7f7d947eb5871b40f23aa448ec729ef51379befb73dee7092a87c436d64736f6c63430008160033",
  "deployedBytecode": "0x6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c9081633474241b14610b0657816362195e9f14610ade5781636555463a14610ab25781637060440414610a00578163844899f1146109be5781638c48d3321461083f578163a5ac5cd71461067d578163da4382fa14610487578163f1a91b1314610256575063fb1af52e146100b157600080fd5b604036600319011261025357602435906040519182908054808552602080950191845284842090845b81811061023f57505050816100f091038261106c565b80516100fb816115e8565b91610109604051938461106c565b818352610115826115e8565b601f1901845b81811061021e575050600480350190845b838110610193575050505060405191838301848452825180915260408401948060408360051b870101940192955b8287106101675785850386f35b909192938280610183600193603f198a8203018652885161110c565b960192019601959291909261015a565b806101a360019284999899611611565b518852838752604088206101fa6004604051926101bf84611050565b6001600160a01b03815460ff8116865260081c168b85015285810154604085015260028101546060850152600381015460808501520161119a565b60a08201526102098288611611565b526102148187611611565b500195949561012c565b9580959661022d949394611572565b8282880101520195949592919261011b565b8254845292860192600192830192016100da565b80fd5b90506102535760803660031901126102535767ffffffffffffffff6004356024358281116104835761028c90369060040161109e565b9290936044359384156104595760ff84541694604051936102ac8561100a565b80831161044557604051602098601f1994906102cf601f830187168c018461106c565b8183523682820111610441578187928c92838601378301015285528785019182526040850192606435845260608601946001906001875289600052600389018b526040600020975191825194851161042d576103358561032f8b54611160565b8b611256565b8b93601f86116001146103c05750509280610395989795936103709360039896926103b5575b50508160011b916000199060031b1c19161790565b85555b51600185015551600284015551151591019060ff801983541691151516179055565b805460ff6103a4818316611600565b169060ff1916179055604051908152f35b01519050388061035b565b8983528c8320949392908616915b8d83831061041557505050926001928592600398966103959b9a9896106103fd575b505050811b018555610373565b015160001983891b60f8161c191690553880806103f0565b848601518755958101959485019491909101906103ce565b602482634e487b7160e01b81526041600452fd5b8680fd5b602484634e487b7160e01b81526041600452fd5b60046040517f907adecd000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b90506102535760a0366003190112610253576064359060443560043560ff841684036106785760843593841561064e576104c29033906115a7565b90600481019082855260209180835260408620916001830154156106245784866104ef9260243590611340565b95909660038401928354808b101560001461061d575b604051907fa9059cbb0000000000000000000000000000000000000000000000000000000082523360048301526024820152868160448186305af18015610612576105d7575b50835460809a908082106105975750509161057660408361057b958a6002999a9b96528a52206112de565b61172d565b5054910154915b60405194855284015260408301526060820152f35b92509650506105cf91506002869401928354906105c86105c0846105bb89866112cb565b611483565b9889946112be565b90556112be565b905590610582565b8681813d831161060b575b6105ec818361106c565b81010312610607575180151503610603573861054b565b5080fd5b8280fd5b503d6105e2565b6040513d85823e3d90fd5b5089610505565b60046040517f1a00354f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b90506102535760c03660031901126102535760043561069a61108e565b67ffffffffffffffff60443581811161083b576106bb90369060040161109e565b9290916064359360a4359586151587036108375785156104595760ff8082541694169384101561080d5760030193836000526020908560205260406000209383116107f9576107148361070e8654611160565b86611256565b8891601f841160011461078a57508261077c98979593600397959361074e938c9261077f5750508160011b916000199060031b1c19161790565b90555b60005260205260406000209060018201556084356002820155019060ff801983541691151516179055565b80f35b01359050388061035b565b91601f198416858b5260208b20938b905b8282106107e157505092600192859261077c9b9a989660039a9896106107c9575b505050811b019055610751565b0135600019838a1b60f8161c191690553880806107bc565b8060018597829496880135815501960193019061079b565b602489634e487b7160e01b81526041600452fd5b60046040517fc9c5baf2000000000000000000000000000000000000000000000000000000008152fd5b8780fd5b8480fd5b602083366003190182136102535760043560ff9260ff82541693610862856115e8565b92610870604051948561106c565b85845261087c866115e8565b601f190183865b82811061099057505050846003809201905b8381168881101561090757906108fc826109029360005284885260406000208787604051926108c38461100a565b6108cc8161119a565b845260018101548c85015260028101546040850152015416151560608201526108f5828b611611565b5288611611565b50611600565b610895565b85888860405191838301848452825180915260408401948060408360051b870101940192955b82871061093a5785850386f35b909192938280600192603f1989820301855287519061096260808351908084528301906110cc565b918381015184830152604081015160408301526060809101511515910152960192019601959291909261092d565b60405161099c8161100a565b8860608083528185840152816040840152820152828289010152018490610883565b8260403660031901126102535760043560ff8116810361067857602435906001600160a01b0382168203610678576020916109f8916115a7565b604051908152f35b82606036600319011261025357610a1561108e565b604435916001600160a01b03918284168403610678576040610a9592610a49610aae96600494610a43611572565b506115a7565b8152828035016020522060405193610a6085611050565b815460ff8116865260081c1660208501526001810154604085015260028101546060850152600381015460808501520161119a565b60a082015260405191829160208352602083019061110c565b0390f35b826060366003190112610253576040610ad26044356024356004356114a3565b82519182526020820152f35b9050610253576080366003190112610253576040610ad2606435604435602435600435611340565b9050610253576101203660031901126102535760603660231901126102535760e060405260243560805260443560a05260643560c05260c43560ff811690036102535760e43567ffffffffffffffff811161060357610b6990369060040161109e565b90918060ff600435541660ff60c43516101561080d576101043515610fe05760ff60c4351682526003600435016020526040822060405190610baa8261100a565b610bb38161119a565b82526001810154602083015260ff6003600283015492604085019384520154161580156060840152610fb657516040516327d5ff4960e11b8152608051600482015260a051602482015260c08051604483015262278d009092046064820152908160848173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4908115610fab57906060918591610f8c575b50015162278d0081029080820462278d001490151715610f78576101043510610f4e57610c6f3360c4356115a7565b80845260048035810160209081526040808720949091015190516327d5ff4960e11b81526080519281019290925260a051602483015260c08051604484015262278d0090910460648301528160848173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4908115610f4357610cf6916060918791610f14575b50015161010435611483565b946001830191825415600014610ef85783547fffffffffffffffffffffff0000000000000000000000000000000000000000001660c43560ff16173360081b74ffffffffffffffffffffffffffffffffffffffff0016178455610d5b9060a4356116a3565b50859473__$d26c4b6c55cbf068c0037866f9978a3889$__803b15610603576040517f447c53ec0000000000000000000000000000000000000000000000000000000081526084356004820152336024820152908290829060449082905af48015610eed57610ede575b50905b600484019167ffffffffffffffff8211610eca57610df082610dea8554611160565b85611256565b80601f8311600114610e5f579180610e259260609b6002989796959261077f5750508160011b916000199060031b1c19161790565b90555b42905560038101610e3d61010435825461129b565b905501610e4b84825461129b565b905560405192835260208301526040820152f35b90601f19831684835260208320925b818110610eb257509160609a849260029897969560019510610e98575b505050811b019055610e28565b0135600019600384901b60f8161c19169055388080610e8b565b9192602060018192868f013581550194019201610e6e565b80634e487b7160e01b602492526041600452fd5b610ee79061103c565b38610dc5565b6040513d84823e3d90fd5b610f0c91945060a435608435600435611340565b949093610dc8565b610f36915060c03d60c011610f3c575b610f2e818361106c565b81019061163b565b38610cea565b503d610f24565b6040513d87823e3d90fd5b60046040517f335ac97b000000000000000000000000000000000000000000000000000000008152fd5b602484634e487b7160e01b81526011600452fd5b610fa5915060c03d60c011610f3c57610f2e818361106c565b38610c40565b6040513d86823e3d90fd5b60046040517ffeb7c323000000000000000000000000000000000000000000000000000000008152fd5b60046040517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b6080810190811067ffffffffffffffff82111761102657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161102657604052565b60c0810190811067ffffffffffffffff82111761102657604052565b90601f8019910116810190811067ffffffffffffffff82111761102657604052565b6024359060ff8216820361067857565b9181601f840112156106785782359167ffffffffffffffff8311610678576020838186019501011161067857565b919082519283825260005b8481106110f8575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016110d7565b9060c060a061115d9360ff81511684526001600160a01b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151918160a082015201906110cc565b90565b90600182811c92168015611190575b602083101461117a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161116f565b906040519182600082546111ad81611160565b9081845260209460019160018116908160001461121d57506001146111de575b5050506111dc9250038361106c565b565b600090815285812095935091905b8183106112055750506111dc93508201013880806111cd565b855488840185015294850194879450918301916111ec565b925050506111dc94925060ff191682840152151560051b8201013880806111cd565b81811061124a575050565b6000815560010161123f565b9190601f811161126557505050565b6111dc926000526020600020906020601f840160051c83019310611291575b601f0160051c019061123f565b9091508190611284565b919082018092116112a857565b634e487b7160e01b600052601160045260246000fd5b919082039182116112a857565b818102929181159184041417156112a857565b6004600091828155826001820155826002820155826003820155016113038154611160565b8061130d57505050565b82601f821160011461131e57505055565b909180825261133c601f60208420940160051c84016001850161123f565b5555565b939290916004850160008381528160205260408120946001860195865498891561147657611370908742916114a3565b999097881561146857908a91600284019161138e429184549061129b565b11611446575050506001600160a01b0373__$d26c4b6c55cbf068c0037866f9978a3889$__915460081c1691813b15610483576040517f7e0c44c500000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b039290921660248301528290829060449082905af48015610eed579261057692604092611432979695611437575b5090858252602052206112de565b509190565b6114409061103c565b38611424565b935095509550915060039250429055016114618482546112be565b9055559190565b505050509550505050508190565b5050509550505050508190565b811561148d570490565b634e487b7160e01b600052601260045260246000fd5b600490939291936000948552016020526040832092604051916114c583611050565b6001600160a01b03855460ff8116855260081c1660208401526001850154604084019081526002860154936060810194855260a0611511600460038a015499608085019a8b520161119a565b9101525190811561156957818110611569579061152d916112be565b908251908183101561155f57508161154c61155b9493611553936112be565b95516112cb565b905190611483565b9190565b9492505050519190565b50509250508190565b6040519061157f82611050565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b906001600160a01b036040519160ff6020840194168452166040820152604081526060810181811067ffffffffffffffff8211176110265760405251902090565b67ffffffffffffffff81116110265760051b60200190565b60ff1660ff81146112a85760010190565b80518210156116255760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b908160c09103126106785760a06040519161165583611050565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b80548210156116255760005260206000200190600090565b91906001830160009082825280602052604082205415600014611727578454946801000000000000000086101561171357836117036116ec886001604098999a0185558461168b565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146118165760001991808301818111611802578254908482019182116117ee578181036117b9575b505050805480156117a557820191611788838361168b565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b6117d96117c96116ec938661168b565b90549060031b1c9283928661168b565b90558652846020526040862055388080611770565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b505050509056fea264697066735822122082f735c7f7d947eb5871b40f23aa448ec729ef51379befb73dee7092a87c436d64736f6c63430008160033",
  "libraries": {
    "Curation": "0x2F9594F9E540DC723C3b5e5Ac0fF1fb5F3439835",
    "Token": "0x016c1d7E2D64Edada6E60A56102209476a8c2DA9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountIsZero()": [
        {
          "notice": "common "
        }
      ],
      "PlanNotExisted()": [
        {
          "notice": "Member "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}