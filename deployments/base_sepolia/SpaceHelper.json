{
  "address": "0x649688Bf2E056F0A991534d4A8B1DD49C206Fb9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFactory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAmountTooLarge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawToken",
      "type": "event"
    }
  ],
  "transactionHash": "0xa89f84f47330f1dfbee99f304b122da3d3a42dd0ee0c8a7cfc7d2281f2bf93b9",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x649688Bf2E056F0A991534d4A8B1DD49C206Fb9b",
    "transactionIndex": 1,
    "gasUsed": "1179540",
    "logsBloom": "0x
    "blockHash": "0xe1e17cf9e7f0fbc6250b0f26296dc293332e742de90094ae4db067c749873cfa",
    "transactionHash": "0xa89f84f47330f1dfbee99f304b122da3d3a42dd0ee0c8a7cfc7d2281f2bf93b9",
    "logs": [],
    "blockNumber": 16054532,
    "cumulativeGasUsed": "1223367",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9d3a85cc2e7236f15f84ebf7696f574d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyFactory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAmountTooLarge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyFactory()\":[{\"notice\":\"Space \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceHelper.sol\":\"SpaceHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1450},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount) external;\\n\\n  function subscribeByEth(uint8 planId) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x660eed820aba75b1483e6e3df81f84f55596d03ae7f5dcca12d9273f2e2e9b35\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\nstruct CreateSpaceInput {\\n  uint256 appId;\\n  string spaceName;\\n  string symbol;\\n  string uri;\\n  uint256 preBuyEthAmount;\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(CreateSpaceInput calldata input) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x327ec8357fe2744fcb2902c1dae18b867ab35fb21073b1084da13666ae44d4df\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0xe53b8f71c73cbeb044645cc7d6296501646674b96e3aa9f461c109be125f8cda\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x45bb39227b3e42e8d050bdf65fa472d389840c2da0fe6ea0a01a4c96f52de2c5\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error InvalidAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xf2d247465c7668c8db648da5543962ad812df27351e22cf88dfbe391fd1d9930\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd113d7e7e933b2a721cd92f11806d05adbb3fc7eca38d25c64d05339a4a1ccbb\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8 planId) {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    planId = self.planIndex;\\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\\n    ++self.planIndex;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    Token.State memory token,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\\n\\n    Plan memory plan = self.plans[planId];\\n    if (!plan.isActive) revert Errors.PlanNotActive();\\n\\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n\\n      Curation.increaseMemberCount(curation, msg.sender);\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    bytes32 id\\n  ) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    /** expired */\\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\\n      Curation.decreaseMemberCount(curation, subscription.account);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n    } else {\\n      subscription.startTime = block.timestamp;\\n      subscription.amount -= consumedAmount;\\n      subscription.duration = remainingDuration;\\n    }\\n\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscription(State storage self, uint8 planId) external view returns (Subscription memory) {\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    return self.subscriptions[id];\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function calculateIncreasingDuration(\\n    Token.State memory token,\\n    Plan memory plan,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint256 duration) {\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    duration = tokenAmount / info.tokenAmountAfterFee;\\n  }\\n\\n  function calculateMinimumSubscriptionTokens(\\n    Token.State memory token,\\n    Plan memory plan\\n  ) internal pure returns (uint256) {\\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0xbf18c382e8d413e4c6457907af26027a8735bce25860970470b29896f0880899\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct State {\\n    uint256 daoRevenue;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    Contributor memory contributor = self.contributors[msg.sender];\\n    if (contributor.account == address(0)) {\\n      revert Errors.OnlyContributor();\\n    }\\n    if (contributor.shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n    if (to == address(0) || msg.sender == to) {\\n      revert Errors.InvalidRecipient();\\n    }\\n\\n    if (self.contributors[to].account == address(0)) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256 orderId) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    orderId = self.orderIndex;\\n    self.orders[orderId] = Order(msg.sender, amount, price);\\n    orderIds.add(orderId);\\n    self.orderIndex++;\\n  }\\n\\n  function cancelShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId\\n  ) external returns (uint256 amount, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\\n    amount = order.amount;\\n    price = order.price;\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\\n    uint256 ethAmount = order.price * amount;\\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\\n    if (self.contributors[order.seller].shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (self.contributors[msg.sender].account == address(0)) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (OrderInfo[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    OrderInfo[] memory orders = new OrderInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Order memory order = self.orders[ids[i]];\\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    if (self.contributors[account].account != address(0)) {\\n      revert Errors.ContributorExisted();\\n    }\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(account, 0, 0, 0);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      info[i] = self.contributors[self.contributorAddresses[i]];\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\\n      revert Errors.InvalidBeneficiary();\\n    }\\n    if (vestingAddresses.contains(beneficiary)) {\\n      revert Errors.BeneficiaryExists();\\n    }\\n\\n    Contributor memory payer = self.contributors[msg.sender];\\n\\n    if (payer.shares < allocation) {\\n      revert Errors.AllocationTooLarge();\\n    }\\n\\n    if (self.contributors[beneficiary].account == address(0)) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external returns (uint256) {\\n    return _claimVesting(self, msg.sender);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n\\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      if (self.contributors[vesting.payer].shares <= releasable) {\\n        revert Errors.InsufficientShares();\\n      }\\n\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoRevenue = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0xc47ba77a2b439dce10896ccb0fa270b61de44be3a7e60b3b5f62c93ded0ab919\",\"license\":\"MIT\"},\"contracts/lib/SpaceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Member.sol\\\";\\nimport \\\"./Share.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceHelper {\\n  using SafeERC20 for IERC20;\\n\\n  function initialize(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Token.State storage token,\\n    address factory,\\n    address owner\\n  ) external returns (uint8 planId, uint256 premint) {\\n    if (msg.sender != factory) revert Errors.OnlyFactory();\\n\\n    Share.addContributor(share, owner);\\n\\n    share.contributors[owner].shares = SHARES_SUPPLY;\\n\\n    Curation.initTiers(curation);\\n\\n    planId = Member.createPlan(member, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\\n\\n    token.x = Token.initialX;\\n    token.y = Token.initialY;\\n    token.k = Token.initialK;\\n\\n    BuyInfo memory info = Token.buy(token, PREMINT_ETH_AMOUNT, 0);\\n\\n    premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n  }\\n\\n  function swap(\\n    mapping(address => address) storage spaceToFounder,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount) {\\n    if (!isSpace(spaceToFounder, tokenIn) || !isSpace(spaceToFounder, tokenOut) || tokenIn == tokenOut) {\\n      revert Errors.InvalidTokens();\\n    }\\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\\n  }\\n\\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\\n    amount = address(this).balance;\\n    TransferUtil.safeTransferETH(feeReceiver, amount);\\n  }\\n\\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\\n    }\\n  }\\n\\n  function isSpace(\\n    mapping(address => address) storage spaceToFounder,\\n    address spaceAddress\\n  ) public view returns (bool) {\\n    return spaceToFounder[spaceAddress] != address(0);\\n  }\\n\\n  function sell(\\n    Token.State storage token,\\n    address factory,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n  }\\n\\n  // deduct protocolFee and appFee\\n  function deductSubscriptionFees(\\n    Member.State storage member,\\n    address factory,\\n    uint256 appId,\\n    uint256 subscriptionFeePercent,\\n    uint256 revenue\\n  ) public returns (uint256 creatorRevenue) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n\\n    appFee = (revenue * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (revenue * subscriptionFeePercent) / 1 ether;\\n    creatorRevenue = revenue - protocolFee - appFee;\\n    member.subscriptionIncome += creatorRevenue;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n\\n  function distributeCreatorRevenue(\\n    Staking.State storage staking,\\n    Share.State storage share,\\n    uint256 stakingRevenuePercent,\\n    uint256 creatorRevenue\\n  ) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 stakingRevenue = (creatorRevenue * stakingRevenuePercent) / 1 ether;\\n      uint256 daoRevenue = creatorRevenue - stakingRevenue;\\n      staking.stakingRevenue += stakingRevenue;\\n      share.daoRevenue += daoRevenue;\\n    } else {\\n      share.daoRevenue += creatorRevenue;\\n    }\\n  }\\n\\n  function processSubscriptionRevenue(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Config storage config,\\n    address factory,\\n    uint256 appId,\\n    uint256 revenue,\\n    address account\\n  ) external {\\n    if (revenue > 0) {\\n      uint256 creatorRevenue = deductSubscriptionFees(member, factory, appId, config.subscriptionFeePercent, revenue);\\n\\n      CurationUser memory user = curation.users[account];\\n\\n      if (user.curator != address(0)) {\\n        CurationUser storage curatorUser = curation.users[user.curator];\\n        uint256 rebateRate = Curation.getRebateRate(curation, curatorUser.memberCount);\\n\\n        uint256 rewards = (creatorRevenue * rebateRate) / 1 ether;\\n        curatorUser.rewards += rewards;\\n        creatorRevenue = creatorRevenue - rewards;\\n      }\\n\\n      SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorRevenue);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfae6e82e444e97dfec3bc468bdf1e71cd7a36f8d126a54e044dcdb5fc733df0d\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased; // released yield\\n    uint256 stakingRevenue; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n  }\\n\\n  function unstake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    if (amount > self.userStaked[account]) revert Errors.AmountTooLarge();\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStaker(State storage self, address account) external view returns (Staker memory) {\\n    return\\n      Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 yieldReleasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self, yieldReleasable);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    }\\n\\n    return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    if (self.yieldReleased == self.yieldAmount) return;\\n\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable == 0) return;\\n    if (IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingRevenue += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(\\n    State storage self,\\n    uint256 yieldReleasable\\n  ) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 stakingRevenue = self.stakingRevenue + yieldReleasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingRevenue) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self, 0);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    if (isChanged) {\\n      self.stakingRevenue = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0xd9bea351e8b04421944179abeffd2b464d79147e5a121c4cfe644ffa3d1236e8\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\\n\\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\\n    info = getTokenAmount(self, ethAmount);\\n\\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(\\n    State storage self,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\\n    info = getEthAmount(self, tokenAmount);\\n\\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xc0229f0a7161fbf718e2e6dc51cdb2a7e33698c7b08b762c43e752e64dedd8f9\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f081dacc6f60dc0670c32219b4c58862a955232fcb0265e69dab4fd03f0670a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761147a90816100228239308160090152f35b600080fdfe60806040818152307f000000000000000000000000000000000000000000000000000000000000000014906004918236101561003a57600080fd5b600093843560e01c9081635d59e14a14610e5f575080639910c06914610a8b578063af933b5714610a5b578063c1e7e25814610a20578063da10111914610802578063e24cbc8514610614578063f044e081146102af5763fb7a2c50146100a057600080fd5b6102ab576101203660031901126102ab5760243591606435906084356044356100c7610ebe565b9460e4359161010435966001600160a01b039384891680990361029657806100ed578a80f35b60028601546101019260c435908935611130565b9660018201906000526020938185528360002090606060ff600387519361012785610f1a565b8554169485855260018101548a8601526002810154898601520154161515910152806101c3575b5050505050600101549082015415156000146101af5791610195600361018b670de0b6b3a764000061018361019e9786610f58565b048094611123565b9301918254610fd1565b90558254610fd1565b90555b388080808080808080808a80f35b50506101bc908254610fd1565b90556101a1565b6000989598528352816000209260028401548351927f60d580b2000000000000000000000000000000000000000000000000000000008452878401526024830152808260448173e26feaE5C55c5A5D75d879b51e6385117FE444035af49283156102a25750899261026c575b505090826001670de0b6b3a764000061024c610261958397610f58565b04920161025a838254610fd1565b9055611123565b93903880808061014e565b9080939250813d831161029b575b6102848183610f36565b8101031261029657905182600161022f565b600080fd5b503d61027a565b513d8b823e3d90fd5b8280fd5b509290926105585760e03660031901126105585760243560643591608435936102d6610ebe565b60c435906001600160a01b0390818316809303610610571633036105e8577307Be5FEF230C627aB7473e14740A2ab287c0E803803b156105e457836044918951928380927fa9479ab100000000000000000000000000000000000000000000000000000000825289888301528660248301525af480156105da576105c7575b506000526003602093018352620f4240600187600020015573e26feaE5C55c5A5D75d879b51e6385117FE44403803b156102ab57826024918851928380927f998a591a000000000000000000000000000000000000000000000000000000008252604435878301525af480156105a5579083916105af575b50508551947ff1a91b1300000000000000000000000000000000000000000000000000000000865281358287015260806024870152826084870152660746a5288000006044870152826064870152838660a481731D9C14178451aBb824a03b8b8ee7b173754717dd5af49586156105a557839661056c575b506801a055690d9db8000081556b037790a0e8714009b49c000060018201557305a37324b8ac5eceebef390a22a97c200000000060028201558651917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015281604482015260c0816064817387c9c3A2cbC1655239c50045B4f4feFce7B674975af4908115610562578291610521575b5061050a915060a06105016060830151608084015190610fd1565b91015190610fd1565b9182600182015542905560ff845193168352820152f35b905060c03d811161055b575b6105378183610f36565b81019160c082840312610558575061050a9161055291610f81565b386104e6565b80fd5b503d61052d565b86513d84823e3d90fd5b9095508381813d831161059e575b6105848183610f36565b810103126102ab575160ff811681036102ab579438610445565b503d61057a565b87513d85823e3d90fd5b6105b890610f06565b6105c35781386103cd565b5080fd5b6105d390939193610f06565b9138610355565b88513d86823e3d90fd5b8380fd5b5085517f0c6d42ae000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b509291926105c35760803660031901126105c357610630610e92565b9080519261063d84610ed4565b8084528060a06020958287820152828582015282606082015282608082015201528151947f04cac3040000000000000000000000000000000000000000000000000000000086528035818701526044356024870152606435604487015260c0866064817387c9c3A2cbC1655239c50045B4f4feFce7B674975af49586156107f85782966107bc575b50479183870192835110156107945760a087018051855163a9059cbb60e01b81526001600160a01b0390971693870193845260208401529491869083908190604001038184305af19081156107895750916080939160c0979361075c575b5061072f8151336113cd565b815195835187528084015190870152519085015260608101516060850152015160808301525160a0820152f35b61077b90873d8911610782575b6107738183610f36565b810190610fde565b5038610723565b503d610769565b8451903d90823e3d90fd5b5082517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90955060c03d81116107f1575b6107d38183610f36565b81019060c0818303126102ab57906107ea91610f81565b94386106c5565b503d6107c9565b83513d84823e3d90fd5b506102ab57806003193601126102ab5761081a610ea8565b91602492833567ffffffffffffffff93848211610a1c5736602383011215610a1c5781840135948511610a1c57858201918636918760051b010111610a1c5786949294926001600160a01b0392838716945b828110610877578980f35b898561088c6108878487876110d5565b6110fb565b1685519182917f70a08231000000000000000000000000000000000000000000000000000000008352308b840152828d60209485935afa928315610a1057818986898f948f96908b91996109d1575b50926108f36108878997948b97946109259a976110d5565b16928c519687958694859363a9059cbb60e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af180156109c757918993917f037238854fe57fbf51f09946f854fc3916fe83938d6521f09bd05463839f1304936109a9575b505061096a6108878588886110d5565b87516001600160a01b039190911681526020810191909152604090a260001981146109975760010161086c565b888a601189634e487b7160e01b835252fd5b816109bf92903d10610782576107738183610f36565b50388061095a565b87513d8f823e3d90fd5b9650505050509350508181813d8311610a09575b6109ef8183610f36565b810103126102ab57519189908b90898689896108f36108db565b503d6109e5565b508651903d90823e3d90fd5b8680fd5b5083906105585760a03660031901126105585750610a54602092610a42610e92565b60843591606435916044359135611130565b9051908152f35b8483836105c35760203660031901126105c357602090610a79610ea8565b90610a854780936113cd565b51908152f35b506102ab5760a03660031901126102ab57610aa4610e92565b92604435926001600160a01b03948585168095036102ab5760643590868116908185526020978435895280878720541615908115610e4e575b508015610e45575b610e1d578551888101907f23b872dd0000000000000000000000000000000000000000000000000000000082523360248201523060448201528460648201526064815260a0810181811067ffffffffffffffff821117610e0a57885251610b5d918791829182875af1610b56611012565b9084611042565b805190898215159283610df1575b505050610dc25785517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0390911684820190815260208101849052889082908190604001038188865af18015610db8579085939291610d9b575b508551917fd79875eb000000000000000000000000000000000000000000000000000000008352848301528260248301528160448160c09586945af1908115610d91579085918591610d4c575b50918091602495949301518651958680927fd96a094a000000000000000000000000000000000000000000000000000000008252608435878301528a5af1938415610d4257908792918495610cfe575b5050610c898460a06105016060610cbe980151608084015190610fd1565b95869184875180978195829463a9059cbb60e01b845233908401602090939291936001600160a01b0360408201951681520152565b03925af1908115610cf35750610cd6575b5051908152f35b610cec90843d8611610782576107738183610f36565b5038610ccf565b8351903d90823e3d90fd5b919394508092503d8311610d3b575b610d178183610f36565b810191818303126105e45791610c89610d358893610cbe9695610f81565b94610c6b565b503d610d0d565b85513d85823e3d90fd5b915050813d8311610d8a575b610d628183610f36565b8101908281830312610610579185610d7f82936024979695610f81565b915091929394610c1b565b503d610d58565b85513d86823e3d90fd5b610db190893d8b11610782576107738183610f36565b5038610bce565b86513d87823e3d90fd5b602484838851917f5274afe7000000000000000000000000000000000000000000000000000000008352820152fd5b610e019350820181019101610fde565b15388981610b6b565b602488604189634e487b7160e01b835252fd5b8386517f672215de000000000000000000000000000000000000000000000000000000008152fd5b50868214610ae5565b905087865286862054161538610add565b85908585806003193601126105e4576020936001600160a01b039283610e83610e92565b16825235855220541615158152f35b602435906001600160a01b038216820361029657565b600435906001600160a01b038216820361029657565b60a435906001600160a01b038216820361029657565b60c0810190811067ffffffffffffffff821117610ef057604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610ef057604052565b6080810190811067ffffffffffffffff821117610ef057604052565b90601f8019910116810190811067ffffffffffffffff821117610ef057604052565b81810292918115918404141715610f6b57565b634e487b7160e01b600052601160045260246000fd5b91908260c091031261029657604051610f9981610ed4565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b91908201809211610f6b57565b90816020910312610296575180151581036102965790565b67ffffffffffffffff8111610ef057601f01601f191660200190565b3d1561103d573d9061102382610ff6565b916110316040519384610f36565b82523d6000602084013e565b606090565b90611081575080511561105757805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806110cc575b611092575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561108a565b91908110156110e55760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102965790565b51906001600160a01b038216820361029657565b91908203918211610f6b57565b949391906040938451927f24f3a51b00000000000000000000000000000000000000000000000000000000845260048401526000936001600160a01b039185856024818688165afa9485156113c35786956112b9575b50916111be95939160026111cb61120b9997956111c6670de0b6b3a7640000806111b460608b015188610f58565b049b8c9387610f58565b048095611123565b611123565b9a016111d88b8254610fd1565b905585518098819263a9059cbb60e01b9586845260048401602090939291936001600160a01b0360408201951681520152565b0360209889918188305af18015610db85761129c575b5085611231575b50505050505050565b9184015184519182529091166001600160a01b031660048201526024810193909352838360448184305af1918215611292575050611274575b8080808080611228565b8161128a92903d10610782576107738183610f36565b50388061126a565b51903d90823e3d90fd5b6112b290883d8a11610782576107738183610f36565b5038611221565b9094503d8087833e6112cb8183610f36565b810160209081838203126113bf57825167ffffffffffffffff938482116113b75701916080838303126113bb5789519361130485610f1a565b61130d8461110f565b8552818401519081116113b757830182601f820112156113b75780519061133382610ff6565b936113408d519586610f36565b8285528383830101116113b3578a5b8281106113a05750509360608a98969484846111be9d61120b9f9d9b99966111cb976002990101528401526113858b820161110f565b8b840152015160608201529799505050919395929092611186565b818101840151858201850152830161134f565b8a80fd5b8980fd5b8880fd5b8780fd5b87513d88823e3d90fd5b600080809381935af16113de611012565b50156113e657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152fdfea2646970667358221220937e445321bf4cec73f4e523c828021eb45227614830a3ed1df58934d3b2738f64736f6c63430008140033",
  "deployedBytecode": "0x60806040818152307f000000000000000000000000000000000000000000000000000000000000000014906004918236101561003a57600080fd5b600093843560e01c9081635d59e14a14610e5f575080639910c06914610a8b578063af933b5714610a5b578063c1e7e25814610a20578063da10111914610802578063e24cbc8514610614578063f044e081146102af5763fb7a2c50146100a057600080fd5b6102ab576101203660031901126102ab5760243591606435906084356044356100c7610ebe565b9460e4359161010435966001600160a01b039384891680990361029657806100ed578a80f35b60028601546101019260c435908935611130565b9660018201906000526020938185528360002090606060ff600387519361012785610f1a565b8554169485855260018101548a8601526002810154898601520154161515910152806101c3575b5050505050600101549082015415156000146101af5791610195600361018b670de0b6b3a764000061018361019e9786610f58565b048094611123565b9301918254610fd1565b90558254610fd1565b90555b388080808080808080808a80f35b50506101bc908254610fd1565b90556101a1565b6000989598528352816000209260028401548351927f60d580b2000000000000000000000000000000000000000000000000000000008452878401526024830152808260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156102a25750899261026c575b505090826001670de0b6b3a764000061024c610261958397610f58565b04920161025a838254610fd1565b9055611123565b93903880808061014e565b9080939250813d831161029b575b6102848183610f36565b8101031261029657905182600161022f565b600080fd5b503d61027a565b513d8b823e3d90fd5b8280fd5b509290926105585760e03660031901126105585760243560643591608435936102d6610ebe565b60c435906001600160a01b0390818316809303610610571633036105e85773__$aee754128d0d1775ed250cc6ad74f33f25$__803b156105e457836044918951928380927fa9479ab100000000000000000000000000000000000000000000000000000000825289888301528660248301525af480156105da576105c7575b506000526003602093018352620f4240600187600020015573__$d26c4b6c55cbf068c0037866f9978a3889$__803b156102ab57826024918851928380927f998a591a000000000000000000000000000000000000000000000000000000008252604435878301525af480156105a5579083916105af575b50508551947ff1a91b1300000000000000000000000000000000000000000000000000000000865281358287015260806024870152826084870152660746a5288000006044870152826064870152838660a48173__$481ca34c951945c71f6bbcbbb91702f088$__5af49586156105a557839661056c575b506801a055690d9db8000081556b037790a0e8714009b49c000060018201557305a37324b8ac5eceebef390a22a97c200000000060028201558651917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015281604482015260c08160648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4908115610562578291610521575b5061050a915060a06105016060830151608084015190610fd1565b91015190610fd1565b9182600182015542905560ff845193168352820152f35b905060c03d811161055b575b6105378183610f36565b81019160c082840312610558575061050a9161055291610f81565b386104e6565b80fd5b503d61052d565b86513d84823e3d90fd5b9095508381813d831161059e575b6105848183610f36565b810103126102ab575160ff811681036102ab579438610445565b503d61057a565b87513d85823e3d90fd5b6105b890610f06565b6105c35781386103cd565b5080fd5b6105d390939193610f06565b9138610355565b88513d86823e3d90fd5b8380fd5b5085517f0c6d42ae000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b509291926105c35760803660031901126105c357610630610e92565b9080519261063d84610ed4565b8084528060a06020958287820152828582015282606082015282608082015201528151947f04cac3040000000000000000000000000000000000000000000000000000000086528035818701526044356024870152606435604487015260c08660648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49586156107f85782966107bc575b50479183870192835110156107945760a087018051855163a9059cbb60e01b81526001600160a01b0390971693870193845260208401529491869083908190604001038184305af19081156107895750916080939160c0979361075c575b5061072f8151336113cd565b815195835187528084015190870152519085015260608101516060850152015160808301525160a0820152f35b61077b90873d8911610782575b6107738183610f36565b810190610fde565b5038610723565b503d610769565b8451903d90823e3d90fd5b5082517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90955060c03d81116107f1575b6107d38183610f36565b81019060c0818303126102ab57906107ea91610f81565b94386106c5565b503d6107c9565b83513d84823e3d90fd5b506102ab57806003193601126102ab5761081a610ea8565b91602492833567ffffffffffffffff93848211610a1c5736602383011215610a1c5781840135948511610a1c57858201918636918760051b010111610a1c5786949294926001600160a01b0392838716945b828110610877578980f35b898561088c6108878487876110d5565b6110fb565b1685519182917f70a08231000000000000000000000000000000000000000000000000000000008352308b840152828d60209485935afa928315610a1057818986898f948f96908b91996109d1575b50926108f36108878997948b97946109259a976110d5565b16928c519687958694859363a9059cbb60e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af180156109c757918993917f037238854fe57fbf51f09946f854fc3916fe83938d6521f09bd05463839f1304936109a9575b505061096a6108878588886110d5565b87516001600160a01b039190911681526020810191909152604090a260001981146109975760010161086c565b888a601189634e487b7160e01b835252fd5b816109bf92903d10610782576107738183610f36565b50388061095a565b87513d8f823e3d90fd5b9650505050509350508181813d8311610a09575b6109ef8183610f36565b810103126102ab57519189908b90898689896108f36108db565b503d6109e5565b508651903d90823e3d90fd5b8680fd5b5083906105585760a03660031901126105585750610a54602092610a42610e92565b60843591606435916044359135611130565b9051908152f35b8483836105c35760203660031901126105c357602090610a79610ea8565b90610a854780936113cd565b51908152f35b506102ab5760a03660031901126102ab57610aa4610e92565b92604435926001600160a01b03948585168095036102ab5760643590868116908185526020978435895280878720541615908115610e4e575b508015610e45575b610e1d578551888101907f23b872dd0000000000000000000000000000000000000000000000000000000082523360248201523060448201528460648201526064815260a0810181811067ffffffffffffffff821117610e0a57885251610b5d918791829182875af1610b56611012565b9084611042565b805190898215159283610df1575b505050610dc25785517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0390911684820190815260208101849052889082908190604001038188865af18015610db8579085939291610d9b575b508551917fd79875eb000000000000000000000000000000000000000000000000000000008352848301528260248301528160448160c09586945af1908115610d91579085918591610d4c575b50918091602495949301518651958680927fd96a094a000000000000000000000000000000000000000000000000000000008252608435878301528a5af1938415610d4257908792918495610cfe575b5050610c898460a06105016060610cbe980151608084015190610fd1565b95869184875180978195829463a9059cbb60e01b845233908401602090939291936001600160a01b0360408201951681520152565b03925af1908115610cf35750610cd6575b5051908152f35b610cec90843d8611610782576107738183610f36565b5038610ccf565b8351903d90823e3d90fd5b919394508092503d8311610d3b575b610d178183610f36565b810191818303126105e45791610c89610d358893610cbe9695610f81565b94610c6b565b503d610d0d565b85513d85823e3d90fd5b915050813d8311610d8a575b610d628183610f36565b8101908281830312610610579185610d7f82936024979695610f81565b915091929394610c1b565b503d610d58565b85513d86823e3d90fd5b610db190893d8b11610782576107738183610f36565b5038610bce565b86513d87823e3d90fd5b602484838851917f5274afe7000000000000000000000000000000000000000000000000000000008352820152fd5b610e019350820181019101610fde565b15388981610b6b565b602488604189634e487b7160e01b835252fd5b8386517f672215de000000000000000000000000000000000000000000000000000000008152fd5b50868214610ae5565b905087865286862054161538610add565b85908585806003193601126105e4576020936001600160a01b039283610e83610e92565b16825235855220541615158152f35b602435906001600160a01b038216820361029657565b600435906001600160a01b038216820361029657565b60a435906001600160a01b038216820361029657565b60c0810190811067ffffffffffffffff821117610ef057604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610ef057604052565b6080810190811067ffffffffffffffff821117610ef057604052565b90601f8019910116810190811067ffffffffffffffff821117610ef057604052565b81810292918115918404141715610f6b57565b634e487b7160e01b600052601160045260246000fd5b91908260c091031261029657604051610f9981610ed4565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b91908201809211610f6b57565b90816020910312610296575180151581036102965790565b67ffffffffffffffff8111610ef057601f01601f191660200190565b3d1561103d573d9061102382610ff6565b916110316040519384610f36565b82523d6000602084013e565b606090565b90611081575080511561105757805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806110cc575b611092575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561108a565b91908110156110e55760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102965790565b51906001600160a01b038216820361029657565b91908203918211610f6b57565b949391906040938451927f24f3a51b00000000000000000000000000000000000000000000000000000000845260048401526000936001600160a01b039185856024818688165afa9485156113c35786956112b9575b50916111be95939160026111cb61120b9997956111c6670de0b6b3a7640000806111b460608b015188610f58565b049b8c9387610f58565b048095611123565b611123565b9a016111d88b8254610fd1565b905585518098819263a9059cbb60e01b9586845260048401602090939291936001600160a01b0360408201951681520152565b0360209889918188305af18015610db85761129c575b5085611231575b50505050505050565b9184015184519182529091166001600160a01b031660048201526024810193909352838360448184305af1918215611292575050611274575b8080808080611228565b8161128a92903d10610782576107738183610f36565b50388061126a565b51903d90823e3d90fd5b6112b290883d8a11610782576107738183610f36565b5038611221565b9094503d8087833e6112cb8183610f36565b810160209081838203126113bf57825167ffffffffffffffff938482116113b75701916080838303126113bb5789519361130485610f1a565b61130d8461110f565b8552818401519081116113b757830182601f820112156113b75780519061133382610ff6565b936113408d519586610f36565b8285528383830101116113b3578a5b8281106113a05750509360608a98969484846111be9d61120b9f9d9b99966111cb976002990101528401526113858b820161110f565b8b840152015160608201529799505050919395929092611186565b818101840151858201850152830161134f565b8a80fd5b8980fd5b8880fd5b8780fd5b87513d88823e3d90fd5b600080809381935af16113de611012565b50156113e657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152fdfea2646970667358221220937e445321bf4cec73f4e523c828021eb45227614830a3ed1df58934d3b2738f64736f6c63430008140033",
  "libraries": {
    "Token": "0x87c9c3A2cbC1655239c50045B4f4feFce7B67497",
    "Share": "0x07Be5FEF230C627aB7473e14740A2ab287c0E803",
    "Staking": "0xb12a939E3D67aa5663823441f5702ad07FC51761",
    "Member": "0x1D9C14178451aBb824a03b8b8ee7b173754717dd",
    "Curation": "0xe26feaE5C55c5A5D75d879b51e6385117FE44403"
  },
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OnlyFactory()": [
        {
          "notice": "Space "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}