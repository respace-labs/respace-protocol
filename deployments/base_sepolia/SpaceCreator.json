{
  "address": "0x223aAD63c1e17Cd545DB60b690e6523EF8F4d2Bd",
  "abi": [],
  "transactionHash": "0xacd25fabe0303a76ca633c2844561caad34c2c4ba92aa21a7f521f805ac9944a",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x223aAD63c1e17Cd545DB60b690e6523EF8F4d2Bd",
    "transactionIndex": 21,
    "gasUsed": "5122236",
    "logsBloom": "0x
    "blockHash": "0x44bded9ae08a593e7020015144cf61ff06d663f3502b37eb4f465ff438ec8705",
    "transactionHash": "0xacd25fabe0303a76ca633c2844561caad34c2c4ba92aa21a7f521f805ac9944a",
    "logs": [],
    "blockNumber": 16267860,
    "cumulativeGasUsed": "11229135",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "d531e3eabe5d53f3e13e1b53bf2e8842",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceCreator.sol\":\"SpaceCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/TransferUtil.sol\\\";\\nimport \\\"./lib/Share.sol\\\";\\nimport \\\"./lib/Staking.sol\\\";\\nimport \\\"./lib/Member.sol\\\";\\nimport \\\"./lib/Token.sol\\\";\\nimport \\\"./lib/Curation.sol\\\";\\nimport \\\"./lib/SpaceHelper.sol\\\";\\nimport \\\"./lib/Events.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./interfaces/ISpace.sol\\\";\\nimport \\\"./interfaces/ISpaceFactory.sol\\\";\\n\\ncontract Space is ISpace, ERC20, ERC20Permit, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  address public immutable factory;\\n  uint256 public immutable appId;\\n\\n  Config public config;\\n\\n  /** Module state */\\n  Token.State public token;\\n  Share.State public share;\\n  Staking.State public staking;\\n  Member.State public member;\\n  Curation.State public curation;\\n\\n  /** Sets */\\n  EnumerableSet.Bytes32Set private subscriptionIds;\\n  EnumerableSet.UintSet private orderIds;\\n  EnumerableSet.AddressSet private vestingAddresses;\\n\\n  constructor(\\n    uint256 _appId,\\n    address _factory,\\n    address _founder,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) Ownable(_founder) {\\n    appId = _appId;\\n    factory = _factory;\\n    config = Config(_uri, 0.3 ether, 0.02 ether);\\n  }\\n\\n  receive() external payable {}\\n\\n  function initialize() external {\\n    (uint8 planId, uint256 premint) = SpaceHelper.initialize(member, share, curation, staking, token, factory, owner());\\n\\n    _mint(address(this), premint);\\n    emit Events.ContributorAdded(owner());\\n    emit Events.PlanCreated(planId, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, 0);\\n  }\\n\\n  function buy(uint256 minReturnAmount) external payable nonReentrant returns (BuyInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.buy(token, msg.value, minReturnAmount);\\n    uint256 tokenAmount = info.tokenAmountAfterFee;\\n    if (isSwap) {\\n      tokenAmount = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n      _mint(msg.sender, tokenAmount);\\n    } else {\\n      _distributeCreatorRevenue(info.creatorFee);\\n      _mint(msg.sender, tokenAmount);\\n      _mint(address(this), info.creatorFee);\\n      _mint(factory, info.protocolFee);\\n    }\\n\\n    emit Events.Trade(\\n      Events.TradeType.Buy,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      isSwap ? 0 : info.creatorFee,\\n      isSwap ? 0 : info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  function sell(\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external payable nonReentrant returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    _distributeCreatorRevenue(info.creatorFee);\\n    _burn(address(this), info.tokenAmountAfterFee);\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n\\n    emit Events.Trade(\\n      Events.TradeType.Sell,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      info.creatorFee,\\n      info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  // ================Member======================\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external onlyOwner {\\n    uint8 id = Member.createPlan(member, _uri, price, minEthAmount);\\n    emit Events.PlanCreated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function updatePlan(\\n    uint8 id,\\n    string calldata _uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external onlyOwner {\\n    Member.updatePlan(member, id, _uri, price, minEthAmount, isActive);\\n    emit Events.PlanUpdated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function getPlans() external view returns (Plan[] memory) {\\n    return Member.getPlans(member);\\n  }\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external nonReentrant {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    _subscribe(planId, amount, uri, false);\\n  }\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable nonReentrant {\\n    uint256 ethAmount = msg.value;\\n    if (ethAmount == 1) revert Errors.EthAmountIsZero();\\n\\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\\n    _mint(address(this), info.tokenAmountAfterFee);\\n    _subscribe(planId, info.tokenAmountAfterFee, uri, true);\\n  }\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribeDuration, uint256 remainingDuration) = Member\\n      .unsubscribe(member, curation, subscriptionIds, planId, amount);\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration, remainingDuration);\\n  }\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Subscription memory subscription = member.subscriptions[ids[i]];\\n\\n      if (block.timestamp - subscription.startTime <= mintPastDuration) {\\n        continue;\\n      }\\n\\n      (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, ids[i]);\\n      _processSubscriptionRevenue(consumedAmount, subscription.account);\\n    }\\n\\n    emit Events.DistributeSubscriptionRewards(msg.sender, mintPastDuration);\\n  }\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, id);\\n    _processSubscriptionRevenue(consumedAmount, account);\\n    emit Events.DistributeSingleSubscription(planId, account);\\n  }\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory) {\\n    return Member.getSubscription(member, planId, account);\\n  }\\n\\n  function getSubscriptions() external view returns (Subscription[] memory) {\\n    return Member.getSubscriptions(member, subscriptionIds);\\n  }\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256) {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    return Member.calculateConsumedAmount(member, id, timestamp);\\n  }\\n\\n  //================Share=======================\\n\\n  function addContributor(address account) external onlyOwner {\\n    Share.addContributor(share, account);\\n    emit Events.ContributorAdded(account);\\n  }\\n\\n  function distributeShareRewards() external {\\n    Share.distribute(share);\\n    emit Events.ShareRewardsDistributed(msg.sender);\\n  }\\n\\n  function claimShareRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Share.claimRewards(share);\\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\\n  }\\n\\n  function transferShares(address to, uint256 amount) external nonReentrant {\\n    Share.transferShares(share, to, amount);\\n    emit Events.SharesTransferred(msg.sender, to, amount);\\n  }\\n\\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256 orderId) {\\n    orderId = Share.createShareOrder(share, orderIds, amount, price);\\n    emit Events.ShareOrderCreated(orderId, msg.sender, amount, price);\\n  }\\n\\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\\n    (uint256 amount, uint256 price) = Share.cancelShareOrder(share, orderIds, orderId);\\n    emit Events.ShareOrderCanceled(orderId, msg.sender, amount, price);\\n  }\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\\n  }\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory) {\\n    return Share.getShareOrders(share, orderIds);\\n  }\\n\\n  function getContributors() external view returns (Contributor[] memory) {\\n    return Share.getContributors(share);\\n  }\\n\\n  function currentContributorRewards(address account) external view returns (uint256) {\\n    return Share.currentContributorRewards(share, account);\\n  }\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external {\\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\\n  }\\n\\n  function claimVesting() external returns (uint256 amount) {\\n    amount = Share.claimVesting(share);\\n    emit Events.VestingClaimed(msg.sender, amount);\\n  }\\n\\n  function removeVesting(address beneficiary) external {\\n    Share.removeVesting(share, vestingAddresses, beneficiary);\\n    emit Events.VestingRemoved(msg.sender, beneficiary);\\n  }\\n\\n  function getVestings() external view returns (VestingInfo[] memory) {\\n    return Share.getVestings(share, vestingAddresses);\\n  }\\n\\n  //================Staking=======================\\n\\n  function currentUserRewards(address account) external view returns (uint256) {\\n    return Staking.currentUserRewards(staking, account);\\n  }\\n\\n  function getStaker(address account) external view returns (Staker memory) {\\n    return Staking.getStaker(staking, account);\\n  }\\n\\n  function stake(uint256 amount) external nonReentrant {\\n    Staking.stake(staking, amount);\\n    emit Events.Staked(msg.sender, amount);\\n  }\\n\\n  function unstake(uint256 amount) external nonReentrant {\\n    Staking.unstake(staking, amount);\\n    emit Events.Unstaked(msg.sender, amount);\\n  }\\n\\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Staking.claim(staking);\\n    emit Events.StakingClaimed(msg.sender, amount);\\n  }\\n\\n  //================Curation=======================\\n\\n  // create self invitation code\\n  function createCode(bytes32 _code) external {\\n    Curation.createCode(curation, _code);\\n    emit Events.CodeCreated(msg.sender, _code);\\n  }\\n\\n  // update self invitation code\\n  function updateCode(bytes32 _code) external {\\n    Curation.updateCode(curation, _code);\\n    emit Events.CodeUpdated(msg.sender, _code);\\n  }\\n\\n  function bindCode(bytes32 _code) external {\\n    Curation.bindCode(curation, _code);\\n    emit Events.CodeBound(msg.sender, _code);\\n  }\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory) {\\n    return Curation.getUser(curation, account);\\n  }\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory) {\\n    return Curation.getUserByCode(curation, code);\\n  }\\n\\n  function getCodeByCurator(address account) external view returns (bytes32) {\\n    return Curation.getCodeByCurator(curation, account);\\n  }\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address) {\\n    return Curation.getCuratorByCode(curation, code);\\n  }\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external onlyOwner {\\n    Curation.updateTier(curation, id, memberCountBreakpoint, rebateRate);\\n    emit Events.TierUpdated(id, memberCountBreakpoint, rebateRate);\\n  }\\n\\n  function getTier(uint256 id) external view returns (Tier memory) {\\n    return Curation.getTier(curation, id);\\n  }\\n\\n  function claimCurationRewards() external nonReentrant returns (uint256 rewards) {\\n    rewards = Curation.claimRewards(curation);\\n    emit Events.CurationRewardsClaimed(msg.sender, rewards);\\n  }\\n\\n  //============Others===================\\n\\n  function updateConfig(string calldata uri, uint256 stakingRevenuePercent) external onlyOwner {\\n    config.uri = uri;\\n    config.stakingRevenuePercent = stakingRevenuePercent;\\n    emit Events.SpaceConfigUpdated(uri, stakingRevenuePercent);\\n  }\\n\\n  /**\\n   * deposit space to for share holder\\n   * @param amount token amount\\n   */\\n  function depositSpaceToken(uint256 amount) external nonReentrant {\\n    share.daoRevenue += amount;\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Events.TokenDeposited(amount);\\n  }\\n\\n  function _subscribe(uint8 planId, uint256 amount, string calldata uri, bool isUsingEth) internal {\\n    (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) = Member.subscribe(\\n      member,\\n      token,\\n      curation,\\n      subscriptionIds,\\n      planId,\\n      uri,\\n      amount\\n    );\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Subscribed(planId, isUsingEth, msg.sender, amount, increasingDuration, remainingDuration, uri);\\n  }\\n\\n  function _distributeCreatorRevenue(uint256 creatorFee) internal {\\n    SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorFee);\\n  }\\n\\n  function _processSubscriptionRevenue(uint256 revenue, address account) internal {\\n    SpaceHelper.processSubscriptionRevenue(member, share, curation, staking, config, factory, appId, revenue, account);\\n  }\\n}\\n\",\"keccak256\":\"0x2a5e60bf57b1f6fc17d026a36ca5960c85a45f885a25998e294e24ee0bddcd4f\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n  string uri;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external;\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8a943d3d116b7ed53dabbf9a56dfaf52246253e00a11d674defc22afbd53c794\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\nstruct CreateSpaceInput {\\n  uint256 appId;\\n  string spaceName;\\n  string symbol;\\n  string uri;\\n  uint256 preBuyEthAmount;\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(CreateSpaceInput calldata input) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x327ec8357fe2744fcb2902c1dae18b867ab35fb21073b1084da13666ae44d4df\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0xe53b8f71c73cbeb044645cc7d6296501646674b96e3aa9f461c109be125f8cda\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x45bb39227b3e42e8d050bdf65fa472d389840c2da0fe6ea0a01a4c96f52de2c5\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error InvalidAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xf2d247465c7668c8db648da5543962ad812df27351e22cf88dfbe391fd1d9930\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration,\\n    string uri\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9288baf2e557fbe11c5f5d94e5d8914393d8ca86ead770becd5630d8bf0129df\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8 planId) {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    planId = self.planIndex;\\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\\n    ++self.planIndex;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    Token.State memory token,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    string calldata uri,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\\n\\n    Plan memory plan = self.plans[planId];\\n    if (!plan.isActive) revert Errors.PlanNotActive();\\n\\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n\\n      Curation.increaseMemberCount(curation, msg.sender);\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.uri = uri;\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    bytes32 id\\n  ) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    /** expired */\\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\\n      Curation.decreaseMemberCount(curation, subscription.account);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n    } else {\\n      subscription.startTime = block.timestamp;\\n      subscription.amount -= consumedAmount;\\n      subscription.duration = remainingDuration;\\n    }\\n\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscription(\\n    State storage self,\\n    uint8 planId,\\n    address account\\n  ) external view returns (Subscription memory) {\\n    bytes32 id = generateSubscriptionId(planId, account);\\n    return self.subscriptions[id];\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function calculateIncreasingDuration(\\n    Token.State memory token,\\n    Plan memory plan,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint256 duration) {\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    duration = tokenAmount / info.tokenAmountAfterFee;\\n  }\\n\\n  function calculateMinimumSubscriptionTokens(\\n    Token.State memory token,\\n    Plan memory plan\\n  ) internal pure returns (uint256) {\\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0x4a98a389f2e6c24f0e443482617ee088cf1917364e7df1eafd02e75ef1cdac12\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct State {\\n    uint256 daoRevenue;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    Contributor memory contributor = self.contributors[msg.sender];\\n    if (contributor.account == address(0)) {\\n      revert Errors.OnlyContributor();\\n    }\\n    if (contributor.shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n    if (to == address(0) || msg.sender == to) {\\n      revert Errors.InvalidRecipient();\\n    }\\n\\n    if (self.contributors[to].account == address(0)) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256 orderId) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    orderId = self.orderIndex;\\n    self.orders[orderId] = Order(msg.sender, amount, price);\\n    orderIds.add(orderId);\\n    self.orderIndex++;\\n  }\\n\\n  function cancelShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId\\n  ) external returns (uint256 amount, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\\n    amount = order.amount;\\n    price = order.price;\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\\n    uint256 ethAmount = order.price * amount;\\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\\n    if (self.contributors[order.seller].shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (self.contributors[msg.sender].account == address(0)) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (OrderInfo[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    OrderInfo[] memory orders = new OrderInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Order memory order = self.orders[ids[i]];\\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    if (self.contributors[account].account != address(0)) {\\n      revert Errors.ContributorExisted();\\n    }\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(account, 0, 0, 0);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      info[i] = self.contributors[self.contributorAddresses[i]];\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\\n      revert Errors.InvalidBeneficiary();\\n    }\\n    if (vestingAddresses.contains(beneficiary)) {\\n      revert Errors.BeneficiaryExists();\\n    }\\n\\n    Contributor memory payer = self.contributors[msg.sender];\\n\\n    if (payer.shares < allocation) {\\n      revert Errors.AllocationTooLarge();\\n    }\\n\\n    if (self.contributors[beneficiary].account == address(0)) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external returns (uint256) {\\n    return _claimVesting(self, msg.sender);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n\\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      if (self.contributors[vesting.payer].shares <= releasable) {\\n        revert Errors.InsufficientShares();\\n      }\\n\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoRevenue = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0xc47ba77a2b439dce10896ccb0fa270b61de44be3a7e60b3b5f62c93ded0ab919\",\"license\":\"MIT\"},\"contracts/lib/SpaceCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../Space.sol\\\";\\n\\nlibrary SpaceCreator {\\n  function createSpace(CreateSpaceInput calldata input) external returns (address) {\\n    Space space = new Space(input.appId, address(this), msg.sender, input.spaceName, input.symbol, input.uri);\\n    space.initialize();\\n    return address(space);\\n  }\\n}\\n\",\"keccak256\":\"0x3d92a5fd8412d00e1479beedaa7441491fa0f14181fd584762e82d16293cce1c\",\"license\":\"MIT\"},\"contracts/lib/SpaceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Member.sol\\\";\\nimport \\\"./Share.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceHelper {\\n  using SafeERC20 for IERC20;\\n\\n  function initialize(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Token.State storage token,\\n    address factory,\\n    address owner\\n  ) external returns (uint8 planId, uint256 premint) {\\n    if (msg.sender != factory) revert Errors.OnlyFactory();\\n\\n    Share.addContributor(share, owner);\\n\\n    share.contributors[owner].shares = SHARES_SUPPLY;\\n\\n    Curation.initTiers(curation);\\n\\n    planId = Member.createPlan(member, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\\n\\n    token.x = Token.initialX;\\n    token.y = Token.initialY;\\n    token.k = Token.initialK;\\n\\n    BuyInfo memory info = Token.buy(token, PREMINT_ETH_AMOUNT, 0);\\n\\n    premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n  }\\n\\n  function swap(\\n    mapping(address => address) storage spaceToFounder,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount) {\\n    if (!isSpace(spaceToFounder, tokenIn) || !isSpace(spaceToFounder, tokenOut) || tokenIn == tokenOut) {\\n      revert Errors.InvalidTokens();\\n    }\\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\\n  }\\n\\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\\n    amount = address(this).balance;\\n    TransferUtil.safeTransferETH(feeReceiver, amount);\\n  }\\n\\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\\n    }\\n  }\\n\\n  function isSpace(\\n    mapping(address => address) storage spaceToFounder,\\n    address spaceAddress\\n  ) public view returns (bool) {\\n    return spaceToFounder[spaceAddress] != address(0);\\n  }\\n\\n  function sell(\\n    Token.State storage token,\\n    address factory,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n  }\\n\\n  // deduct protocolFee and appFee\\n  function deductSubscriptionFees(\\n    Member.State storage member,\\n    address factory,\\n    uint256 appId,\\n    uint256 subscriptionFeePercent,\\n    uint256 revenue\\n  ) public returns (uint256 creatorRevenue) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n\\n    appFee = (revenue * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (revenue * subscriptionFeePercent) / 1 ether;\\n    creatorRevenue = revenue - protocolFee - appFee;\\n    member.subscriptionIncome += creatorRevenue;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n\\n  function distributeCreatorRevenue(\\n    Staking.State storage staking,\\n    Share.State storage share,\\n    uint256 stakingRevenuePercent,\\n    uint256 creatorRevenue\\n  ) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 stakingRevenue = (creatorRevenue * stakingRevenuePercent) / 1 ether;\\n      uint256 daoRevenue = creatorRevenue - stakingRevenue;\\n      staking.stakingRevenue += stakingRevenue;\\n      share.daoRevenue += daoRevenue;\\n    } else {\\n      share.daoRevenue += creatorRevenue;\\n    }\\n  }\\n\\n  function processSubscriptionRevenue(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Config storage config,\\n    address factory,\\n    uint256 appId,\\n    uint256 revenue,\\n    address account\\n  ) external {\\n    if (revenue > 0) {\\n      uint256 creatorRevenue = deductSubscriptionFees(member, factory, appId, config.subscriptionFeePercent, revenue);\\n\\n      CurationUser memory user = curation.users[account];\\n\\n      if (user.curator != address(0)) {\\n        CurationUser storage curatorUser = curation.users[user.curator];\\n        uint256 rebateRate = Curation.getRebateRate(curation, curatorUser.memberCount);\\n\\n        uint256 rewards = (creatorRevenue * rebateRate) / 1 ether;\\n        curatorUser.rewards += rewards;\\n        creatorRevenue = creatorRevenue - rewards;\\n      }\\n\\n      SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorRevenue);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfae6e82e444e97dfec3bc468bdf1e71cd7a36f8d126a54e044dcdb5fc733df0d\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased; // released yield\\n    uint256 stakingRevenue; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n  }\\n\\n  function unstake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    if (amount > self.userStaked[account]) revert Errors.AmountTooLarge();\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStaker(State storage self, address account) external view returns (Staker memory) {\\n    return\\n      Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 yieldReleasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self, yieldReleasable);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    }\\n\\n    return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    if (self.yieldReleased == self.yieldAmount) return;\\n\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable == 0) return;\\n    if (IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingRevenue += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(\\n    State storage self,\\n    uint256 yieldReleasable\\n  ) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 stakingRevenue = self.stakingRevenue + yieldReleasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingRevenue) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self, 0);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    if (isChanged) {\\n      self.stakingRevenue = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0xd9bea351e8b04421944179abeffd2b464d79147e5a121c4cfe644ffa3d1236e8\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\\n\\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\\n    info = getTokenAmount(self, ethAmount);\\n\\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(\\n    State storage self,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\\n    info = getEthAmount(self, tokenAmount);\\n\\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xc0229f0a7161fbf718e2e6dc51cdb2a7e33698c7b08b762c43e752e64dedd8f9\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f081dacc6f60dc0670c32219b4c58862a955232fcb0265e69dab4fd03f0670a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604090808252600491823610156200001857600080fd5b600091823560e01c630fb1b31c146200003057600080fd5b307f000000000000000000000000000000000000000000000000000000000000000014620001e35760031990602036830112620001df5767ffffffffffffffff918535838111620001db5760a0818801928236030112620001db576200009a6024820183620001e7565b90916064620000bc620000b16044840187620001e7565b9290930186620001e7565b94909361593d96878901978989108b8a1117620001c7576200011f936200012e9896938b9a9896936200011093620002448d393589523060208a01528d33908a015260c060608a015260c089019162000222565b91868303608088015262000222565b9260a081850391015262000222565b039084f08015620001bb5773ffffffffffffffffffffffffffffffffffffffff1692833b15620001b857825163204a7f0760e21b8152918183878183895af18015620001ae5762000184575b6020858551908152f35b82116200019b57506020935081523880806200017a565b634e487b7160e01b815260418552602490fd5b84513d84823e3d90fd5b80fd5b505051903d90823e3d90fd5b50634e487b7160e01b8c5260418d5260248cfd5b8580fd5b8380fd5b8280fd5b903590601e19813603018212156200021d570180359067ffffffffffffffff82116200021d576020019181360383136200021d57565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe6101a0806040523462000752576200593d803803809162000021828562000757565b833981019060c0818303126200075257805162000041602083016200077b565b6200004f604084016200077b565b60608401516001600160401b03811162000752578562000071918601620007b5565b60808501519094906001600160401b03811162000752578662000096918301620007b5565b60a08201519096906001600160401b0381116200075257620000b99201620007b5565b60408051969192919087016001600160401b03811188821017620004fe5760405260018752603160f81b602088015285516001600160401b038111620004fe57600354600181811c9116801562000747575b6020821014620004dd57601f8111620006dd575b50806020601f8211600114620006525760009162000646575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004fe5760045490600182811c921680156200063b575b6020831014620004dd5781601f849311620005c6575b50602090601f831160011462000537576000926200052b575b50508160011b916000199060031b1c1916176004555b620001c28562000810565b95610120968752620001d481620009b5565b9561014096875260208151910120908160e052602081519101209081610100524660a0526040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019082821060018060401b03831117620004fe576040829052825190206080523060c0526001600160a01b0392831691821562000514575050600880546001600160a01b03198116831790915560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955610180938452610160928352606081016001600160401b03811182821017620004fe5760405281815260406020820191670429d069189e00008352019166470de4df820000835280519060018060401b038211620004fe57600a5490600182811c92168015620004f3575b6020831014620004dd5781601f84931162000479575b50602090601f8311600114620003ff57600092620003f3575b50508160011b916000199060031b1c191617600a555b51600b5551600c5560405192614e10948562000b0d863960805185614549015260a05185614604015260c0518561451a015260e05185614598015261010051856145be0152518461226801525183612292015251828181610c1501528181611170015281816115d2015281816123ae0152614d5d0152518181816125070152614d840152f35b01519050388062000357565b600a60009081526000805160206200591d8339815191529350601f198516905b81811062000460575090846001959493921062000446575b505050811b01600a556200036d565b015160001960f88460031b161c1916905538808062000437565b929360206001819287860151815501950193016200041f565b600a6000529091506000805160206200591d833981519152601f840160051c81019160208510620004d2575b90601f859493920160051c01905b818110620004c257506200033e565b60008155849350600101620004b3565b9091508190620004a5565b634e487b7160e01b600052602260045260246000fd5b91607f169162000328565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a1565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f1984168510620005aa576001945083601f1981161062000590575b505050811b01600455620001b7565b015160001960f88460031b161c1916905538808062000581565b8181015183556020948501946001909301929091019062000564565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101916020851062000630575b90601f859493920160051c01905b81811062000620575062000188565b6000815584935060010162000611565b909150819062000603565b91607f169162000172565b90508701513862000138565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8a828210620006c45750509083600194939210620006aa575b5050811b016003556200014d565b89015160001960f88460031b161c1916905538806200069c565b6001849560209395849301518155019401920162000683565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200073c575b601f0160051c01905b8181106200072f57506200011f565b6000815560010162000720565b909150819062000717565b90607f16906200010b565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004fe57604052565b51906001600160a01b03821682036200075257565b60005b838110620007a45750506000910152565b818101518382015260200162000793565b81601f82011215620007525780516001600160401b038111620004fe5760405192620007ec601f8301601f19166020018562000757565b8184526020828401011162000752576200080d916020808501910162000790565b90565b8051602091908281101562000890575090601f8251116200084e57808251920151908083106200083f57501790565b82600019910360031b1b161790565b604490620008829260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000790565b601f01601f19168101030190fd5b6001600160401b038111620004fe576005928354926001938481811c91168015620009aa575b83821014620004dd57601f811162000973575b5081601f8411600114620009095750928293918392600094620008fd575b50501b916000199060031b1c191617905560ff90565b015192503880620008e7565b919083601f1981168760005284600020946000905b888383106200095857505050106200093e575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000931565b8587015188559096019594850194879350908101906200091e565b8560005284601f846000209201871c820191601f8601881c015b8281106200099d575050620008c9565b600081550185906200098d565b90607f1690620008b6565b805160209081811015620009e25750601f8251116200084e57808251920151908083106200083f57501790565b906001600160401b038211620004fe57600654926001938481811c9116801562000b01575b83821014620004dd57601f811162000ac7575b5081601f841160011462000a5b575092829391839260009462000a4f575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a38565b919083601f198116600660005284600020946000905b8883831062000aac575050501062000a92575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a84565b85870151885590960195948501948793509081019062000a71565b600660005284601f84600020920160051c820191601f860160051c015b82811062000af457505062000a1a565b6000815501859062000ae4565b90607f169062000a0756fe604060808152600436101561001d575b50361561001b57600080fd5b005b6000803560e01c8063012b3ced14613db957806306fdde0314613ce6578063095ea7b314613cbc5780630f5aa7f314613c1057806318160ddd14613bf15780632026e37214613b4457806323b872dd14613a5457806325e702d2146139af57806328bcf8791461390a5780632e17de7814613859578063313ce5671461383d5780633644e51514613819578063368242d3146136f65780633b47a9ac146135995780633d203ce2146134425780634479091d1461324c578063485449ab1461312e5780634cf088d9146130e45780634cf518a114612ff15780634f062c5a14612f2d5780635b8594f714612ce85780635f8b012814612c39578063626a9b2614612a8357806362bf342f1461295f57806363935f1c146128995780636b69e05b146127d357806370a082311461279d578063715018a61461273457806373b8740c146126c7578063752904d01461265c57806379502c55146125615780637ecebe001461252a57806380afdea8146124ef5780638129fc1c1461235a57806384b0196e146122515780638681d72f1461219a57806388d4a3e5146120175780638d3ed7c414611f165780638da5cb5b14611eee5780638fcb4e5b14611e23578063924d615314611d4857806392fd9e8b14611c7857806395d89b4114611b93578063a23c44b114611aaa578063a2c96ed8146119a2578063a2dc057414611935578063a694fc3a14611883578063a8d5fd6514611851578063a9059cbb14611820578063af157c19146116b6578063b579184f146115f6578063c45a0155146115b2578063cd5c64261461150d578063d505accf146113a3578063d79875eb14611071578063d94a862b14610e84578063d96a094a14610bf4578063dcb2a3f514610b57578063dd62ed3e14610b0b578063e16b6d5d14610aec578063e25a2a9914610a1f578063e3f6b544146109ec578063eb2fd73514610891578063eeb3e45614610767578063ef153e1314610686578063f09badbd146104b3578063f2fde38b14610419578063fc0c546a146103e35763fedda89c14610320575061000f565b346103e057806003193601126103e05781516338683dc160e11b81526010600482015260209290838160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49283156103d557926103a1575b5080518281527f9fe9b7be9d151c7a8b6de49a1312ff27a15096d0d1d12999af85fe4310e0b125843392a251908152f35b9091508281813d83116103ce575b6103b98183614203565b810103126103c957519038610370565b600080fd5b503d6103af565b8251903d90823e3d90fd5b80fd5b50346103e057806003193601126103e05750600d54600e54600f54925191825260208201526040810191909152606090f35b0390f35b5090346104af5760203660031901126104af576104346140a3565b61043c61423b565b6001600160a01b0380911691821561049857506008548273ffffffffffffffffffffffffffffffffffffffff19821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b815260048101849052602490fd5b5080fd5b5090346104af57606080600319360112610682576104cf6140cf565b9160243560443567ffffffffffffffff811161067e576104f3903690600401614133565b946104fc6148ff565b821561066d5761050e833033306149b6565b60ff845191633474241b60e01b8352601f6004840152600d546024840152600e546044840152600f54606484015260246084840152602a60a484015216948560c483015261012060e483015280828061056c61012482018b8861492f565b87610104830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49182156106625760009081908294610607575b50916105fc93916105d57f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc989796943390614cf8565b865196879660008852602088015286015284015260a06080840152339660a084019161492f565b0390a3600160095580f35b809450838092503d831161065b575b6106208183614203565b810103126103e057508151602083015192860151927f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc61059f565b503d610616565b85513d6000823e3d90fd5b83516310eb483f60e21b8152600490fd5b8580fd5b8280fd5b50346103e05761069536614225565b929061069f6148ff565b81519363039f5b5160e31b855260106004860152602c6024860152816044860152806064860152602094858160848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af494851561075c579461072d575b50825191825284820152827ff0b6a2e9121a710dc8fe3532a5396d4dae643d9a666e7e0e768be1c0e9a40474833393a3600160095551908152f35b9093508481813d8311610755575b6107458183614203565b810103126103c9575192386106f2565b503d61073b565b8451903d90823e3d90fd5b509061077236614225565b9161077b6148ff565b80519063f9dc325160e01b825260106004830152602c6024830152826044830152836064830152808260848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49081156108885785928692610816575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081016105fc565b809350818093503d8311610881575b61082f8183614203565b8101031261087d57816105fc6001600160a01b039260206108707f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3596614b57565b93015193509193506107ce565b8480fd5b503d610825565b513d86823e3d90fd5b5090346104af5760603660031901126104af5760043567ffffffffffffffff8111610682576108c4903690600401614133565b909160243591604435906108d661423b565b825163f1a91b1360e01b8152601f600482015260806024820152926020848061090360848201868b61492f565b886044830152866064830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49384156109e2578794610974575b50917f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99461096e9260ff959451958695169785614950565b0390a280f35b919350916020823d82116109da575b8161099060209383614203565b810103126109d6577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99460ff946109c961096e94614811565b9550925094929092610936565b8680fd5b3d9150610983565b81513d89823e3d90fd5b5090346104af57816003193601126104af5760609060ff601f541690602054906021549181519384526020840152820152f35b5090346104af5760603660031901126104af576004359060443590602435610a4561423b565b8473__$d26c4b6c55cbf068c0037866f9978a3889$__803b156104af578160849185519283809263282f95d760e21b8252602460048301528a60248301528760448301528960648301525af48015610ae257610ace575b50507f2702951ec468d8fb7c1501e01af87b4bd50cda65a20463fc38ee59b954a777b09282519182526020820152a280f35b610ad7906141b7565b61087d578438610a9c565b84513d84823e3d90fd5b5090346104af57816003193601126104af576020906024549051908152f35b5090346104af57806003193601126104af57602091610b286140a3565b82610b316140b9565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b50346103e057602091826003193601126104af57610b736140a3565b6001600160a01b0382519163076b6f0360e51b835260106004840152166024820152838160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49283156103d55792610bc5575b5051908152f35b9091508281813d8311610bed575b610bdd8183614203565b810103126103c957519038610bbe565b503d610bd3565b509060203660031901126104af57610c0a61487d565b50610c136148ff565b7f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03821633148151926355d2ad9160e01b8452600d6004850152346024850152600435604485015260c08460648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4938415610e7a578594610e40575b5060608401805190918315610e07575050610cb2610cbd9151608086015190614345565b60a085015190614345565b93610cc8853361481f565b83830151918015610dfc5781905b15610df257815b84516370a0823160e01b815233600482015290602082602481305afa918215610de8578492610da8575b509160c097610d647f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9388979695610da699519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b0390a3600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b959493929091506020863d8211610de0575b81610dc760209383614203565b810103126103c9579451939492939192919060c0610d07565b3d9150610dba565b86513d86823e3d90fd5b60a0850151610cdd565b608085015190610cd6565b610e3b91969250610e3060808701610e1f8151614c99565b610e29893361481f565b513061481f565b60a08601519061481f565b610cc8565b90935060c03d8111610e73575b610e578183614203565b810160c08282031261067e57610e6c916148af565b9238610c8e565b503d610e4d565b83513d87823e3d90fd5b50346103e057806003193601126103e0578151634624699960e11b8152601f6004820152818160248173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115611067578291610f57575b50825191602080840190808552835180925285850181878460051b880101950193965b838810610f025786860387f35b90919293948380600192603f198a8203018652885190610f2a8251608080845283019061407e565b91838101518483015286810151878301526060809101511515910152970193019701969093929193610ef5565b90503d8083833e610f688183614203565b810190602090818184031261106357805167ffffffffffffffff9182821161067e57019083601f8301121561087d57815190610fa38261462a565b94610fb088519687614203565b828652848087019360051b8501019381851161105f57858101935b858510610fdf575050505050505038610ed2565b845184811161105b578201608080601f198387030112611057578b5191611005836141e7565b89810151878111611053576110448b95938f92936110298a89809997840101614974565b85528381015187860152606093848201519086015201614922565b90820152815201940193610fcb565b8c80fd5b8a80fd5b8980fd5b8780fd5b8380fd5b83513d84823e3d90fd5b509061107c36614225565b91909261108761487d565b506110906148ff565b815192630132b0c160e21b8452600d6004850152846024850152604484015260c08360648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af492831561139757819361135b575b504793828401948551101561134a5760808401916110f88351614c99565b60608501513015611332573060005260209060008252856000205481811061130b5790806000923084528385520387832055806002540360025586519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef833092a360a086018051865163a9059cbb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660048201526024810191909152909790828160448187305af18015611301576112cd575b50828080808451335af16111ce614a77565b50156112a457519351965185516370a0823160e01b815233600482015290918082602481305afa938415611299579361125f575b865186815260208101869052604081018a9052606081018490526080810185905260c0908990610da6908a9033906001907f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b908060a08101610d64565b9080935081969594963d8311611292575b61127a8183614203565b810103126103c9579051929391929086610da6611202565b503d611270565b8751903d90823e3d90fd5b855162461bcd60e51b81526004810183905260026024820152612a2360f11b6044820152606490fd5b8281813d83116112fa575b6112e28183614203565b81010312611063576112f390614922565b50386111bc565b503d6112d8565b87513d86823e3d90fd5b865163391434e360e21b815230600482015260248101919091526044810191909152606490fd5b8451634b637e8f60e11b815260048101839052602490fd5b825163539fbea360e11b8152600490fd5b90925060c03d8111611390575b6113728183614203565b81019060c0818303126110635790611389916148af565b91386110da565b503d611368565b509051903d90823e3d90fd5b50346103e05760e03660031901126103e0576113bd6140a3565b6113c56140b9565b6044359160843560643560ff821682036103c9578042116114f6576001600160a01b03908184169283885260076020528888209081549160018301905589519260208401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868c860152858916606086015289608086015260a085015260c084015260c0835260e083019183831067ffffffffffffffff8411176114e0576114aa936114a1938c5251902061147b614510565b908b519161190160f01b83526002830152602282015260c43591604260a43592206143fb565b9092919261448b565b16908082036114c35750506114c0939450614368565b80f35b604492508651916325c0072360e11b835260048301526024820152fd5b634e487b7160e01b600052604160045260246000fd5b60249087519063313c898160e11b82526004820152fd5b5090346104af57816003193601126104af578173__$aee754128d0d1775ed250cc6ad74f33f25$__803b156104af5781602491845192838092632ce9a45f60e01b8252601060048301525af480156115a557611591575b507f1f44ad0beffb1a0d2f012c4d508d4527dca5f9590e01f1d262b6cc4e65a7a18f60208351338152a180f35b61159a906141b7565b6104af578138611564565b50505051903d90823e3d90fd5b5090346104af57816003193601126104af57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346104af5760203660031901126104af57816116126140a3565b61161a61423b565b73__$aee754128d0d1775ed250cc6ad74f33f25$__92833b1561068257826001600160a01b0392604483518095819363a9479ab160e01b83526010600484015216978860248301525af49081156116ad5750611699575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b6116a2906141b7565b6104af578138611671565b513d84823e3d90fd5b50346103e057806003193601126103e05781516377e7a4e760e01b81526010600482015291818360248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4928315611815578293611777575b50909181519160208080850192818652845180945285019301945b82811061172d5784840385f35b909192826080826117686001948a51606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b01960191019492919094611720565b9092503d8083833e6117898183614203565b81019060209081818403126110635780519067ffffffffffffffff821161087d57019082601f830112156110635781516117c28161462a565b936117cf87519586614203565b818552828086019260071b850101938185116109d6578301915b8483106117fc5750505050509138611705565b8360809161180a8486614be7565b8152019201916117e9565b5051903d90823e3d90fd5b5090346104af57806003193601126104af5760209061184a6118406140a3565b6024359033614267565b5160018152f35b50346103e057806003193601126103e05750601054601154601254925191825260208201526040810191909152606090f35b5090346104af5760203660031901126104af57600435906118a26148ff565b8273__$b2fda0c84abdf24a5bde0680bf090c8e0e$__803b156104af5781604491845192838092632c4780bf60e11b8252601760048301528860248301525af4801561106757611921575b5050519081527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a2600160095580f35b61192a906141b7565b6106825782386118ed565b50346103e057602091826003193601126104af576119516140a3565b6001600160a01b03825191630157d38b60e71b835260176004840152166024820152838160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49283156103d55792610bc5575051908152f35b50346103e057816003193601126103e0576119bb6140cf565b916001600160a01b036119cc6140b9565b606060a084516119db8161419b565b86815286602082015286868201528683820152866080820152015260ff835195631c18110160e21b8752601f6004880152166024860152166044840152818360648173__$481ca34c951945c71f6bbcbbb91702f088$__5af4918215611a9f578092611a57575b815160208082528190610415908201866140df565b9091503d8082853e611a698185614203565b8301926020818503126104af5780519167ffffffffffffffff83116103e0575092611a98916104159401614b6b565b9038611a42565b9051903d90823e3d90fd5b5090346104af5760203660031901126104af57611ac56140a3565b91611ace614c2a565b506001600160a01b038251936373351a6d60e01b85526017600486015216602484015260808360448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4928315611397578193611b52575b608084610da685518092606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b90925060803d8111611b8c575b611b698183614203565b8101926080828503126103e05750611b86608093610da692614be7565b92611b1c565b503d611b5f565b50346103e057806003193601126103e057508051600091600454611bb681614161565b80845290600190818116908115611c505750600114611bf3575b5050611be182610415940383614203565b5191829160208352602083019061407e565b6004600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610611c385750505091810160200191611be182611bd0565b80546020878701810191909152909501948101611c1e565b61041596508592506020915092611be19360ff191682840152151560051b8201019450611bd0565b50346103e057806003193601126103e057611c916148ff565b81516357ac83fd60e11b8152601060048201529160208360248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4918215611a9f5791611d14575b8051338152602081810184905293507fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b3789080604081015b0390a1600160095551908152f35b90506020823d8211611d40575b81611d2e60209383614203565b810103126103c9576020915190611ccf565b3d9150611d21565b5090346104af5760203660031901126104af57611d63614c2a565b5080519063ac362d7360e01b825260246004830152600435602483015260808260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611e19576104159392611de9575b50519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b611e0b91925060803d8111611e12575b611e038183614203565b810190614c4f565b9038611dae565b503d611df9565b81513d85823e3d90fd5b5090346104af57806003193601126104af57611e3d6140a3565b9060243590611e4a6148ff565b8373__$aee754128d0d1775ed250cc6ad74f33f25$__93843b156104af57816001600160a01b039160648551809481936379a8803f60e11b83526010600484015216988960248301528860448301525af4801561106757611eda575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b611ee3906141b7565b611063578338611ea6565b5090346104af57816003193601126104af576020906001600160a01b03600854169051908152f35b5090346104af5760203660031901126104af57600435611f346148ff565b8151638b26588d60e01b815260106004820152602c60248201526044810182905291808360648173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4801561200d5784938591611fba575b50907faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc91815194855260208501523393a3600160095580f35b827faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc939550611ffe92503d8611612006575b611ff68183614203565b810190614b41565b909391611f81565b503d611fec565b81513d86823e3d90fd5b50346103e057806003193601126103e0578151630cd985a960e41b815260106004820152602c6024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49081156110675782916120ce575b508251916020808401908085528351809252808686019401925b8281106120935785850386f35b835180518652808301516001600160a01b03168684015287810151888701526060908101519086015260809094019392810192600101612086565b90503d8083833e6120df8183614203565b81019060209081818403126110635780519067ffffffffffffffff821161087d57019082601f830112156110635781516121188161462a565b9361212587519586614203565b818552828086019260071b850101938185116109d6578301915b8483106121515750505050503861206c565b6080838303126109d65783608091895161216a816141e7565b85518152612179838701614b57565b838201528a8601518b8201526060808701519082015281520192019161213f565b5090346104af5760203660031901126104af57816121b66140a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__92833b1561068257826001600160a01b0392606483518095819362f67ae160e21b835260106004840152602e602484015216978860448301525af49081156116ad575061223d575b5050337f7b22c48ae06c79582ff5c89ab9ddff415a5ae48e866411fb60c66d75a60b561f8380a380f35b612246906141b7565b6104af578138612213565b5090346104af57816003193601126104af5761228c7f0000000000000000000000000000000000000000000000000000000000000000614642565b916122b67f000000000000000000000000000000000000000000000000000000000000000061473b565b918051916020918284019484861067ffffffffffffffff8711176114e0579280612310838896612303998b9996528686528151998a99600f60f81b8b5260e0868c015260e08b019061407e565b91898303908a015261407e565b924660608801523060808801528460a088015286840360c088015251928381520193925b82811061234357505050500390f35b835185528695509381019392810192600101612334565b5090346104af57816003193601126104af576001600160a01b038281600854169183519263f044e08160e01b8452601f6004850152601060248501526024604485015260176064850152600d6084850152817f00000000000000000000000000000000000000000000000000000000000000001660a485015260c4840152838360e48173__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__5af48015610ae25782938391612482575b509260809260ff926124367f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab9963061481f565b60085416958051967f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f30294702728380a260608752816060880152660746a52880000060208801528601521692a280f35b809450858092503d83116124e8575b61249b8183614203565b810103126104af578260809260ff9261243660206124d97f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab998614811565b94015193965050925092612403565b503d612491565b5090346104af57816003193601126104af57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5090346104af5760203660031901126104af57806020926001600160a01b036125516140a3565b1681526007845220549051908152f35b50346103e057806003193601126103e057508051600091600a5461258481614161565b8084529060019081811690811561263457506001146125d7575b50506125af826125ca940383614203565b600b5490600c5490805194859460608652606086019061407e565b9260208501528301520390f35b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b82861061261c57505050918101602001916125af8261259e565b80546020878701810191909152909501948101612602565b6125ca965085925060209150926125af9360ff191682840152151560051b820101945061259e565b5090346104af5760203660031901126104af5760207f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e8858916004359061269f6148ff565b6126ab82601054614345565b6010556126ba823033306149b6565b51908152a1600160095580f35b50346103e057602091826003193601126104af576126e36140a3565b6001600160a01b0382519163111ddb2160e11b835260246004840152166024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156103d55792610bc5575051908152f35b50346103e057806003193601126103e05761274d61423b565b60006001600160a01b0360085473ffffffffffffffffffffffffffffffffffffffff198116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5090346104af5760203660031901126104af57806020926001600160a01b036127c46140a3565b16815280845220549051908152f35b50346103e057806003193601126103e0576127ec6148ff565b815163710e206160e11b8152601760048201529160208360248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4918215611a9f5791612865575b8051338152602081810184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e908060408101611d06565b90506020823d8211612891575b8161287f60209383614203565b810103126103c957602091519061282a565b3d9150612872565b50346103e057806003193601126103e0576128b26148ff565b815191632ec1536160e11b83526024600484015260208360248173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611a9f579161292b575b8051338152602081810184905293507fb829edcd2c5ee38b47b519f30efb6ea48a14b05bd1754f51a384ef422f14d357908060408101611d06565b90506020823d8211612957575b8161294560209383614203565b810103126103c95760209151906128f0565b3d9150612938565b50346103e05760603660031901126103e0576129796140cf565b6129cc60206129866140b9565b855163844899f160e01b815260ff90941660048501526001600160a01b0316602484015273__$481ca34c951945c71f6bbcbbb91702f088$__9291829081906044820190565b0381855af4908115612a79579084918491612a45575b5060648251809481936332aaa31d60e11b8352601f6004840152602483015260443560448301525af4908115611067578291612a26575b5082519182526020820152f35b9050612a3f9150823d841161200657611ff68183614203565b38612a19565b9150506020813d8211612a71575b81612a6060209383614203565b810103126103c957839051386129e2565b3d9150612a53565b84513d85823e3d90fd5b50346103e057806003193601126103e0578151633299ded160e01b815260106004820152602e6024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115611067578291612b51575b508251916020808401908085528351809252808686019401925b828110612aff5785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101612af2565b90503d8083833e612b628183614203565b81019060209081818403126110635780519067ffffffffffffffff821161087d570182601f8201121561106357805191612b9b8361462a565b93612ba887519586614203565b838552818501908260c08096028501019381851161105f578301915b848310612bd75750505050505038612ad8565b858383031261105f578386918a51612bee8161419b565b612bf786614b57565b8152612c04838701614b57565b838201528b8601518c820152606080870151908201526080808701519082015260a08087015190820152815201920191612bc4565b5090346104af5760203660031901126104af57612c546140a3565b90612c5d614c2a565b506001600160a01b0381519263153fd0b960e21b84526024600485015216602483015260808260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611e19576104159392611de95750519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b5090806003193601126104af57612cfd6140cf565b60243567ffffffffffffffff811161106357612d1d903690600401614133565b929091612d286148ff565b60013414612f1c5781516355d2ad9160e01b8152600d6004820152346024820152604481018690529260c08460648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4938415612f12578694612ed8575b506060809401612d8d81513061481f565b519160ff845191633474241b60e01b8352601f6004840152600d546024840152600e546044840152600f54606484015260246084840152602a60a484015216948560c483015261012060e4830152808280612ded61012482018b8861492f565b87610104830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49182156106625760009081908294612e7d575b50916105fc9391612e567f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc989796943390614cf8565b865196879660018852602088015286015284015260a06080840152339660a084019161492f565b809450838092503d8311612ed1575b612e968183614203565b810103126103e057508151602083015192860151927f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc612e20565b503d612e8c565b90935060c03d8111612f0b575b612eef8183614203565b810160c0828203126109d657612f04916148af565b9238612d7c565b503d612ee5565b83513d88823e3d90fd5b815163323940cd60e21b8152600490fd5b50346103e0576020806003193601126104af5781818451612f4d816141cb565b82815201528251630819334960e01b8152602460048201526004356024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af492831561075c578093612fa9575b50508083519280518452015190820152f35b909192508382813d8311612fea575b612fc28183614203565b810103126103e0575081835191612fd8836141cb565b80518352015182820152903880612f97565b503d612fb8565b5090346104af5760803660031901126104af5761300c6140a3565b9060243590604435606435908573__$aee754128d0d1775ed250cc6ad74f33f25$__95863b156104af57816001600160a01b039160c48751809481936324aec54560e21b835260106004840152602e6024840152169a8b60448301528a60648301528760848301528860a48301525af480156130da576130c6575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190606090a380f35b6130cf906141b7565b61067e578538613087565b85513d84823e3d90fd5b5090346104af57816003193601126104af5760c0906017549060185490601954601a5490601b5492601c5494815196875260208701528501526060840152608083015260a0820152f35b5090346104af5760a03660031901126104af576131496140cf565b9060243567ffffffffffffffff81116110635761316a903690600401614133565b90604435926064359086608435968715158098036104af5761318a61423b565b73__$481ca34c951945c71f6bbcbbb91702f088$__803b156106825760ff9183918551808095819463a5ac5cd760e01b8352601f6004840152169c8d602483015260c060448301526131e060c483018d8d61492f565b908d60648401528a608484015260a483015203915af4801561106757613234575b5050907f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f9461096e925194859485614950565b613240909392936141b7565b6109d657908638613201565b50346103e057816003193601126103e05767ffffffffffffffff916004358381116106825761327f903690600401614133565b9190936024359061328e61423b565b831161342e5761329f600a54614161565b601f81116133cb575b5083601f84116001146133245784958461330d927f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89791613319575b508560011b906000198760031b1c191617600a555b82600b55835194848695865285019161492f565b9060208301520390a180f35b9050810135386132e4565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890601f198516865b8181106133b35750917f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89697918661330d9410613399575b5050600185811b01600a556132f9565b820135600019600388901b60f8161c191690553880613389565b9192602060018192868c013581550194019201613351565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f850160051c81019160208610613424575b601f0160051c01905b81811061341957506132a8565b85815560010161340c565b9091508190613403565b634e487b7160e01b84526041600452602484fd5b5090346104af57806003193601126104af5761345c6140cf565b6134646140b9565b825163844899f160e01b815260ff831660048201526001600160a01b038216602482015290929073__$481ca34c951945c71f6bbcbbb91702f088$__90602081604481855af4908115612f12579083918791613565575b5060848251809481936362195e9f60e01b8352601f6004840152602480840152602a604484015260648301525af490811561355b57926001600160a01b036020936135328760ff957f66b1fd337cea274cb38fa0696247bba4469e95f3be5ce7d9c9a974d9a11e4bd5988b9161353d575b50614cf8565b51951685521692a280f35b6135549150843d861161200657611ff68183614203565b503861352c565b82513d87823e3d90fd5b9150506020813d8211613591575b8161358060209383614203565b810103126103c957829051386134bb565b3d9150613573565b50346103e057806003193601126103e0578151637d8d7a9760e11b8152601f6004820152602a6024820152818160448173__$481ca34c951945c71f6bbcbbb91702f088$__5af490811561106757829161364a575b50825191602080840190808552835180925280868601968360051b870101940192955b82871061361e5785850386f35b90919293828061363a600193603f198a820301865288516140df565b9601920196019592919092613611565b90503d8083833e61365b8183614203565b8101602090818382031261106357825167ffffffffffffffff9384821161067e57019080601f8301121561087d578151906136958261462a565b946136a288519687614203565b828652848087019360051b8501019382851161105f57858101935b8585106136d15750505050505050386135ee565b845183811161105b5787916136eb86848094870101614b6b565b8152019401936136bd565b5090346104af57806003193601126104af576137106140cf565b6137186148ff565b60ff825191636d21c17d60e11b8352601f6004840152602480840152602a60448401521690816064820152602435608482015260808160a48173__$481ca34c951945c71f6bbcbbb91702f088$__5af49081156115a55784938594869287946137cc575b507fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff9827699392916137af6105fc923390614cf8565b519283923397846040919493926060820195825260208201520152565b9550509150506080833d8211613811575b816137ea60809383614203565b810103126110635782516020840151848301516060909501519094909290916105fc61377c565b3d91506137dd565b5090346104af57816003193601126104af57602090613836614510565b9051908152f35b5090346104af57816003193601126104af576020905160128152f35b5090346104af5760203660031901126104af57600435906138786148ff565b8273__$b2fda0c84abdf24a5bde0680bf090c8e0e$__803b156104af578160449184519283809262c4a11560e11b8252601760048301528860248301525af48015611067576138f6575b5050519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a2600160095580f35b6138ff906141b7565b6106825782386138c2565b5090346104af5760203660031901126104af57600435908273__$d26c4b6c55cbf068c0037866f9978a3889$__803b156104af57816044918451928380926373272e1560e11b8252602460048301528860248301525af480156110675761399b575b5050519081527ffcd5abced4a14fd82dd75efe917d75c414fce0581307a6c5616350e6d4cc86b360203392a280f35b6139a4906141b7565b61068257823861396c565b5090346104af5760203660031901126104af57600435908273__$d26c4b6c55cbf068c0037866f9978a3889$__803b156104af5781604491845192838092630b7fb74160e01b8252602460048301528860248301525af4801561106757613a40575b5050519081527fa580c6f3f2d7189dd4058538c62d03023016a7c3b7925688501462a6e39e345460203392a280f35b613a49906141b7565b610682578238613a11565b5090346104af5760603660031901126104af57613a6f6140a3565b613a776140b9565b9060443593836001600160a01b03831691828152600160205220336000526020528360002054906000198203613ab6575b60208561184a888787614267565b858210613b1f578015613b07573315613aef57600090815260016020908152858220338352815290859020918690039091558290613aa8565b8451634a1406b160e11b815260006004820152602490fd5b845163e602df0560e01b815260006004820152602490fd5b8451637dc7a0d960e11b81523360048201526024810183905260448101879052606490fd5b50346103e057602091826003193601126104af578051635554b25560e11b8152602460048201526004356024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156103d5578093613baf575b50506001600160a01b03905191168152f35b909192508382813d8311613bea575b613bc88183614203565b810103126103e05750613be26001600160a01b0391614b57565b919038613b9d565b503d613bbe565b5090346104af57816003193601126104af576020906002549051908152f35b5090346104af5760203660031901126104af576004359073__$d26c4b6c55cbf068c0037866f9978a3889$__83813b156103e05760449183519283809263739133db60e11b8252602460048301528760248301525af48015613cb257613c9f575b50519081527f5d20e16c575e19d37142327b2bb4d5017477cfa3a514b0523564afa605104c8060203392a280f35b613cab909391936141b7565b9138613c71565b82513d86823e3d90fd5b5090346104af57806003193601126104af5760209061184a613cdc6140a3565b6024359033614368565b5090346104af57816003193601126104af5780519082600354613d0881614161565b80855291600191808316908115613d915750600114613d34575b505050611be182610415940383614203565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610613d7957505050611be18260206104159582010194613d22565b80546020878701810191909152909501948101613d5c565b610415975086935060209250611be194915060ff191682840152151560051b82010194613d22565b5090346104af5760203660031901126104af57602a54806080526020608001602a84527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d291845b8181106140455750613e19925050607f19016080614203565b608051825b818110613e5d578251338152600435602082015284907f73c58cffa8ee146b206627c2c322e2d5bba6c275790dd2cb73f1afdd7fb0d76f90604090a180f35b613e68816080614b0a565b5184526023602052828420835190613e7f8261419b565b6001600160a01b03815460ff8116845260081c16602083015260018101548583015260028101546060830152600381015460808301528451908187600483015492613ec984614161565b80845293600181169081156140235750600114613fdf575b50613eee92500382614203565b60a0820152600435613f038583015142614b34565b1115613fd957613f14826080614b0a565b51908451916362195e9f60e01b8352601f6004840152602480840152602a60448401526064830152848260848173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115613fcf57613f7e928792613fa3575b50602001516001600160a01b031690614cf8565b6000198114613f8f57600101613e1e565b634e487b7160e01b84526011600452602484fd5b6001600160a01b03919250613fc6602091883d8a1161200657611ff68183614203565b50929150613f6a565b85513d88823e3d90fd5b50613f7e565b6004018952505060208720879183915b8184106140075750506020613eee9282010138613ee1565b6020919250806001915483868801015201920191908391613fef565b905060209250613eee94915060ff191682840152151560051b82010138613ee1565b8354835260019384019360209093019201613e00565b60005b83811061406e5750506000910152565b818101518382015260200161405e565b906020916140978151809281855285808601910161405b565b601f01601f1916010190565b600435906001600160a01b03821682036103c957565b602435906001600160a01b03821682036103c957565b6004359060ff821682036103c957565b9060c060a06141309360ff81511684526001600160a01b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151918160a0820152019061407e565b90565b9181601f840112156103c95782359167ffffffffffffffff83116103c957602083818601950101116103c957565b90600182811c92168015614191575b602083101461417b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614170565b60c0810190811067ffffffffffffffff8211176114e057604052565b67ffffffffffffffff81116114e057604052565b6040810190811067ffffffffffffffff8211176114e057604052565b6080810190811067ffffffffffffffff8211176114e057604052565b90601f8019910116810190811067ffffffffffffffff8211176114e057604052565b60409060031901126103c9576004359060243590565b6001600160a01b0360085416330361424f57565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561432c571692831561431357600090838252816020526040822054908382106142e1575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b9190820180921161435257565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038091169182156143e257169182156143c95760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161447f57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156144735780516001600160a01b0381161561446a57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b60048110156144fa578061449d575050565b600181036144b75760405163f645eedf60e01b8152600490fd5b600281036144d85760405163fce698f760e01b815260048101839052602490fd5b6003146144e25750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480614601575b1561456b577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a081526145fb8161419b565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614614542565b67ffffffffffffffff81116114e05760051b60200190565b60ff81146146805760ff811690601f821161466e5760405191614664836141cb565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b5060405160055481600061469383614161565b8083529260019081811690811561471957506001146146ba575b5061413092500382614203565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8483106146fe57506141309350508101602001386146ad565b819350908160209254838589010152019101909184926146e5565b90506020925061413094915060ff191682840152151560051b820101386146ad565b60ff811461475d5760ff811690601f821161466e5760405191614664836141cb565b5060405160065481600061477083614161565b808352926001908181169081156147195750600114614796575061413092500382614203565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b8483106147da57506141309350508101602001386146ad565b819350908160209254838589010152019101909184926147c1565b67ffffffffffffffff81116114e057601f01601f191660200190565b519060ff821682036103c957565b6001600160a01b0316908115614313577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614861600094600254614345565b60025584845283825260408420818154019055604051908152a3565b6040519061488a8261419b565b8160a06000918281528260208201528260408201528260608201528260808201520152565b91908260c09103126103c9576040516148c78161419b565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b600260095414614910576002600955565b604051633ee5aeb560e01b8152600490fd5b519081151582036103c957565b908060209392818452848401376000828201840152601f01601f1916010190565b9061496a906040939695949660608452606084019161492f565b9460208201520152565b81601f820112156103c957805161498a816147f5565b926149986040519485614203565b818452602082840101116103c957614130916020808501910161405b565b906040519360208501916323b872dd60e01b83526001600160a01b039485809216602488015216604486015260648501526064845260a084019084821067ffffffffffffffff8311176114e057614a269360009384936040521694519082865af1614a1f614a77565b9083614aa7565b8051908115159182614a54575b5050614a3c5750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126103c9576020614a6f9101614922565b153880614a33565b3d15614aa2573d90614a88826147f5565b91614a966040519384614203565b82523d6000602084013e565b606090565b90614ace5750805115614abc57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580614b01575b614adf575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15614ad7565b8051821015614b1e5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161435257565b91908260409103126103c9576020825192015190565b51906001600160a01b03821682036103c957565b919060c0838203126103c95760405190614b848261419b565b8193614b8f81614811565b8352614b9d60208201614b57565b602084015260408101516040840152606081015160608401526080810151608084015260a08101519167ffffffffffffffff83116103c95760a092614be29201614974565b910152565b91908260809103126103c957604051614bff816141e7565b6060808294614c0d81614b57565b845260208101516020850152604081015160408501520151910152565b60405190614c37826141e7565b60006060838281528260208201528260408201520152565b908160809103126103c957614c91606060405192614c6c846141e7565b614c7581614b57565b8452602081015160208501526040810151604085015201614922565b606082015290565b600b54601b5490919015614ceb5781810291818304148115171561435257614cdb614cd2670de0b6b3a7640000614ce694048093614b34565b91601a54614345565b601a55601054614345565b601055565b614ce69150601054614345565b9073__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__91823b156103c9576101246000926040519485938492630fb7a2c560e41b8452601f6004850152601060248501526024604485015260176064850152600a60848501526001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001660a48601527f000000000000000000000000000000000000000000000000000000000000000060c486015260e4850152166101048301525af48015614dce57614dc35750565b614dcc906141b7565b565b6040513d6000823e3d90fdfea264697066735822122077fbedb33dad0559a7e4030eddf8b508544bb3e069c5f7cba94067a8e65c2f2464736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212200bdc0f6a958bd32f9deab7296719906a5e3ec5ddf132bae305a72314beb87b7d64736f6c63430008140033",
  "libraries": {
    "Token": "0x463D8eD1B594904f6b1E35d271eaff016b4c670b",
    "Share": "0x32B028c8fE91a5b5771Cf060CD533f6C0Adc6943",
    "Staking": "0x1980f579dD1D2E98e801ef87a106b0653a7F40FE",
    "Member": "0xaF021e9860B3aA6De3CE12a9032d24ED3aEBEaEa",
    "Curation": "0x5D571a3Ff0da5Db56d072Da9A5b29A9c8153953D",
    "SpaceHelper": "0x8489d4f5648dEaEace16eabEE3345cE4B2Ea54cF"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}