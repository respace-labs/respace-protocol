{
  "address": "0x7e94dedB0ee9d36f2d70D8CdB784a8DB3C9E277b",
  "abi": [],
  "transactionHash": "0x6304ab0f9f10e10a3aa35aba31eeed450edac17986e9907524aaebdb35628130",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x7e94dedB0ee9d36f2d70D8CdB784a8DB3C9E277b",
    "transactionIndex": 13,
    "gasUsed": "5338417",
    "logsBloom": "0x
    "blockHash": "0xc732630db122e50019ba23c5a0eac7027bfe8751ab79c9f2d76a242c8d1bf852",
    "transactionHash": "0x6304ab0f9f10e10a3aa35aba31eeed450edac17986e9907524aaebdb35628130",
    "logs": [],
    "blockNumber": 17284009,
    "cumulativeGasUsed": "6385451",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "f95069ec1bb2ad9870f36440b26fd327",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceCreator.sol\":\"SpaceCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":880},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/Space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/TransferUtil.sol\\\";\\nimport \\\"./lib/Share.sol\\\";\\nimport \\\"./lib/Staking.sol\\\";\\nimport \\\"./lib/Member.sol\\\";\\nimport \\\"./lib/Token.sol\\\";\\nimport \\\"./lib/Curation.sol\\\";\\nimport \\\"./lib/SpaceHelper.sol\\\";\\nimport \\\"./lib/Events.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./interfaces/ISpace.sol\\\";\\nimport \\\"./interfaces/ISpaceFactory.sol\\\";\\n\\ncontract Space is ISpace, ERC20, ERC20Permit, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  address public immutable factory;\\n  uint256 public immutable appId;\\n\\n  Config public config;\\n\\n  /** Module state */\\n  Token.State public token;\\n  Share.State public share;\\n  Staking.State public staking;\\n  Member.State public member;\\n  Curation.State public curation;\\n\\n  /** Sets */\\n  EnumerableSet.Bytes32Set private subscriptionIds;\\n  EnumerableSet.UintSet private orderIds;\\n  EnumerableSet.AddressSet private vestingAddresses;\\n\\n  constructor(\\n    uint256 _appId,\\n    address _factory,\\n    address _founder,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) Ownable(_founder) {\\n    appId = _appId;\\n    factory = _factory;\\n    config = Config(_uri, 0.3 ether, 0.02 ether);\\n  }\\n\\n  receive() external payable {}\\n\\n  function initialize() external {\\n    (uint8 planId, uint256 premint) = SpaceHelper.initialize(member, share, curation, staking, token, factory, owner());\\n\\n    _mint(address(this), premint);\\n    emit Events.ContributorAdded(owner());\\n    emit Events.PlanCreated(planId, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, 0);\\n  }\\n\\n  function buy(uint256 minReturnAmount) external payable nonReentrant returns (BuyInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.buy(token, msg.value, minReturnAmount);\\n    uint256 tokenAmount = info.tokenAmountAfterFee;\\n    if (isSwap) {\\n      tokenAmount = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n      _mint(msg.sender, tokenAmount);\\n    } else {\\n      _distributeCreatorRevenue(info.creatorFee);\\n      _mint(msg.sender, tokenAmount);\\n      _mint(address(this), info.creatorFee);\\n      _mint(factory, info.protocolFee);\\n    }\\n\\n    emit Events.Trade(\\n      Events.TradeType.Buy,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      isSwap ? 0 : info.creatorFee,\\n      isSwap ? 0 : info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  function sell(\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external payable nonReentrant returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    _distributeCreatorRevenue(info.creatorFee);\\n    _burn(address(this), info.tokenAmountAfterFee);\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n\\n    emit Events.Trade(\\n      Events.TradeType.Sell,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      info.creatorFee,\\n      info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  // ================Member======================\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external onlyOwner {\\n    uint8 id = Member.createPlan(member, _uri, price, minEthAmount);\\n    emit Events.PlanCreated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function updatePlan(\\n    uint8 id,\\n    string calldata _uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external onlyOwner {\\n    Member.updatePlan(member, id, _uri, price, minEthAmount, isActive);\\n    emit Events.PlanUpdated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function getPlans() external view returns (Plan[] memory) {\\n    return Member.getPlans(member);\\n  }\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external nonReentrant {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    _subscribe(planId, amount, uri, false);\\n  }\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable nonReentrant {\\n    uint256 ethAmount = msg.value;\\n    if (ethAmount == 1) revert Errors.EthAmountIsZero();\\n\\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\\n    _mint(address(this), info.tokenAmountAfterFee);\\n    _subscribe(planId, info.tokenAmountAfterFee, uri, true);\\n  }\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribeDuration, uint256 remainingDuration) = Member\\n      .unsubscribe(member, curation, subscriptionIds, planId, amount);\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration, remainingDuration);\\n  }\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Subscription memory subscription = member.subscriptions[ids[i]];\\n\\n      if (block.timestamp - subscription.startTime <= mintPastDuration) {\\n        continue;\\n      }\\n\\n      (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, ids[i]);\\n      _processSubscriptionRevenue(consumedAmount, subscription.account);\\n    }\\n\\n    emit Events.DistributeSubscriptionRewards(msg.sender, mintPastDuration);\\n  }\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, id);\\n    _processSubscriptionRevenue(consumedAmount, account);\\n    emit Events.DistributeSingleSubscription(planId, account);\\n  }\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory) {\\n    return Member.getSubscription(member, planId, account);\\n  }\\n\\n  function getSubscriptions() external view returns (Subscription[] memory) {\\n    return Member.getSubscriptions(member, subscriptionIds);\\n  }\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256) {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    return Member.calculateConsumedAmount(member, id, timestamp);\\n  }\\n\\n  //================Share=======================\\n\\n  function addContributor(address account) external onlyOwner {\\n    Share.addContributor(share, account);\\n    emit Events.ContributorAdded(account);\\n  }\\n\\n  function distributeShareRewards() external {\\n    Share.distribute(share);\\n    emit Events.ShareRewardsDistributed(msg.sender);\\n  }\\n\\n  function claimShareRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Share.claimRewards(share);\\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\\n  }\\n\\n  function transferShares(address to, uint256 amount) external nonReentrant {\\n    Share.transferShares(share, to, amount);\\n    emit Events.SharesTransferred(msg.sender, to, amount);\\n  }\\n\\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256 orderId) {\\n    orderId = Share.createShareOrder(share, orderIds, amount, price);\\n    emit Events.ShareOrderCreated(orderId, msg.sender, amount, price);\\n  }\\n\\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\\n    (uint256 amount, uint256 price) = Share.cancelShareOrder(share, orderIds, orderId);\\n    emit Events.ShareOrderCanceled(orderId, msg.sender, amount, price);\\n  }\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\\n  }\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory) {\\n    return Share.getShareOrders(share, orderIds);\\n  }\\n\\n  function getContributors() external view returns (Contributor[] memory) {\\n    return Share.getContributors(share);\\n  }\\n\\n  function currentContributorRewards(address account) external view returns (uint256) {\\n    return Share.currentContributorRewards(share, account);\\n  }\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external {\\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\\n  }\\n\\n  function claimVesting() external returns (uint256 amount) {\\n    amount = Share.claimVesting(share);\\n    emit Events.VestingClaimed(msg.sender, amount);\\n  }\\n\\n  function removeVesting(address beneficiary) external {\\n    Share.removeVesting(share, vestingAddresses, beneficiary);\\n    emit Events.VestingRemoved(msg.sender, beneficiary);\\n  }\\n\\n  function getVestings() external view returns (VestingInfo[] memory) {\\n    return Share.getVestings(share, vestingAddresses);\\n  }\\n\\n  //================Staking=======================\\n\\n  function currentUserRewards(address account) external view returns (uint256) {\\n    return Staking.currentUserRewards(staking, account);\\n  }\\n\\n  function getStaker(address account) external view returns (Staker memory) {\\n    return Staking.getStaker(staking, account);\\n  }\\n\\n  function stake(uint256 amount) external nonReentrant {\\n    Staking.stake(staking, amount);\\n    emit Events.Staked(msg.sender, amount);\\n  }\\n\\n  function unstake(uint256 amount) external nonReentrant {\\n    Staking.unstake(staking, amount);\\n    emit Events.Unstaked(msg.sender, amount);\\n  }\\n\\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Staking.claim(staking);\\n    emit Events.StakingClaimed(msg.sender, amount);\\n  }\\n\\n  //================Curation=======================\\n\\n  // create self invitation code\\n  function createCode(bytes32 _code) external {\\n    Curation.createCode(curation, _code);\\n    emit Events.CodeCreated(msg.sender, _code);\\n  }\\n\\n  // update self invitation code\\n  function updateCode(bytes32 _code) external {\\n    Curation.updateCode(curation, _code);\\n    emit Events.CodeUpdated(msg.sender, _code);\\n  }\\n\\n  function bindCode(bytes32 _code) external {\\n    Curation.bindCode(curation, _code);\\n    emit Events.CodeBound(msg.sender, _code);\\n  }\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory) {\\n    return Curation.getUser(curation, account);\\n  }\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory) {\\n    return Curation.getUserByCode(curation, code);\\n  }\\n\\n  function getCodeByCurator(address account) external view returns (bytes32) {\\n    return Curation.getCodeByCurator(curation, account);\\n  }\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address) {\\n    return Curation.getCuratorByCode(curation, code);\\n  }\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external onlyOwner {\\n    Curation.updateTier(curation, id, memberCountBreakpoint, rebateRate);\\n    emit Events.TierUpdated(id, memberCountBreakpoint, rebateRate);\\n  }\\n\\n  function getTier(uint256 id) external view returns (Tier memory) {\\n    return Curation.getTier(curation, id);\\n  }\\n\\n  function claimCurationRewards() external nonReentrant returns (uint256 rewards) {\\n    rewards = Curation.claimRewards(curation);\\n    emit Events.CurationRewardsClaimed(msg.sender, rewards);\\n  }\\n\\n  //============Others===================\\n\\n  function updateConfig(string calldata uri, uint256 stakingRevenuePercent) external onlyOwner {\\n    config.uri = uri;\\n    config.stakingRevenuePercent = stakingRevenuePercent;\\n    emit Events.SpaceConfigUpdated(uri, stakingRevenuePercent);\\n  }\\n\\n  /**\\n   * deposit space to for share holder\\n   * @param amount token amount\\n   */\\n  function depositSpaceToken(uint256 amount) external nonReentrant {\\n    share.daoRevenue += amount;\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Events.TokenDeposited(amount);\\n  }\\n\\n  function _subscribe(uint8 planId, uint256 amount, string calldata uri, bool isUsingEth) internal {\\n    (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) = Member.subscribe(\\n      member,\\n      token,\\n      curation,\\n      subscriptionIds,\\n      planId,\\n      uri,\\n      amount\\n    );\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Subscribed(planId, isUsingEth, msg.sender, amount, increasingDuration, remainingDuration, uri);\\n  }\\n\\n  function _distributeCreatorRevenue(uint256 creatorFee) internal {\\n    SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorFee);\\n  }\\n\\n  function _processSubscriptionRevenue(uint256 revenue, address account) internal {\\n    SpaceHelper.processSubscriptionRevenue(member, share, curation, staking, config, factory, appId, revenue, account);\\n  }\\n}\\n\",\"keccak256\":\"0x4ee4340dc36457050afe1f5b2be1b3b6d711f9377c490061778206d27d88135c\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n  string uri;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external;\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x087706e9abd6808c4e132d31787bce70fc89906be55bf31591cd70f715582b7a\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\nstruct CreateSpaceInput {\\n  uint256 appId;\\n  string spaceName;\\n  string symbol;\\n  string uri;\\n  uint256 preBuyEthAmount;\\n  address referral;\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(CreateSpaceInput calldata input) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xafd59c494c6a4c14ffcf94b01b3eec2cfe04ff02f3584ede3b123de84ff8a814\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0x0a4250017b84d277718650c405f4ba06b70be2a5e84ee1d4091c4ece64370491\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1072f6a022eddf152c5625bec140b16de6fadaef3c8d663376ad48874d384a64\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error ExceedMaxAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xfa08fa5ae4cf41760a816c982b6d0f227412e7a5c16e74365291f47438f2644e\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount,\\n    address referral\\n  );\\n  event PriceUpdated(uint256 price);\\n  event ReferralRewardRateUpdated(uint256 rate);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration,\\n    string uri\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfbd5ca9b184ebba95bde0127a85ec940841001f36f90666719c4ca1af90ebcac\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8 planId) {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    planId = self.planIndex;\\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\\n    ++self.planIndex;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    Token.State memory token,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    string calldata uri,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\\n\\n    Plan memory plan = self.plans[planId];\\n    if (!plan.isActive) revert Errors.PlanNotActive();\\n\\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n\\n      Curation.increaseMemberCount(curation, msg.sender);\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.uri = uri;\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    bytes32 id\\n  ) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    /** expired */\\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\\n      Curation.decreaseMemberCount(curation, subscription.account);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n    } else {\\n      subscription.startTime = block.timestamp;\\n      subscription.amount -= consumedAmount;\\n      subscription.duration = remainingDuration;\\n    }\\n\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscription(\\n    State storage self,\\n    uint8 planId,\\n    address account\\n  ) external view returns (Subscription memory) {\\n    bytes32 id = generateSubscriptionId(planId, account);\\n    return self.subscriptions[id];\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function calculateIncreasingDuration(\\n    Token.State memory token,\\n    Plan memory plan,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint256 duration) {\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    duration = tokenAmount / info.tokenAmountAfterFee;\\n  }\\n\\n  function calculateMinimumSubscriptionTokens(\\n    Token.State memory token,\\n    Plan memory plan\\n  ) internal pure returns (uint256) {\\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0xabe67c8ad7caa15ce2f42276daa1f9578918b2754da1c92b4f8631264813789b\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct State {\\n    uint256 daoRevenue;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    Contributor memory contributor = self.contributors[msg.sender];\\n    if (contributor.account == address(0)) {\\n      revert Errors.OnlyContributor();\\n    }\\n    if (contributor.shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n    if (to == address(0) || msg.sender == to) {\\n      revert Errors.InvalidRecipient();\\n    }\\n\\n    if (self.contributors[to].account == address(0)) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256 orderId) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    orderId = self.orderIndex;\\n    self.orders[orderId] = Order(msg.sender, amount, price);\\n    orderIds.add(orderId);\\n    self.orderIndex++;\\n  }\\n\\n  function cancelShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId\\n  ) external returns (uint256 amount, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\\n    amount = order.amount;\\n    price = order.price;\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\\n    uint256 ethAmount = order.price * amount;\\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\\n    if (self.contributors[order.seller].shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (self.contributors[msg.sender].account == address(0)) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (OrderInfo[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    OrderInfo[] memory orders = new OrderInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Order memory order = self.orders[ids[i]];\\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    if (self.contributors[account].account != address(0)) {\\n      revert Errors.ContributorExisted();\\n    }\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(account, 0, 0, 0);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      info[i] = self.contributors[self.contributorAddresses[i]];\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\\n      revert Errors.InvalidBeneficiary();\\n    }\\n    if (vestingAddresses.contains(beneficiary)) {\\n      revert Errors.BeneficiaryExists();\\n    }\\n\\n    Contributor memory payer = self.contributors[msg.sender];\\n\\n    if (payer.shares < allocation) {\\n      revert Errors.AllocationTooLarge();\\n    }\\n\\n    if (self.contributors[beneficiary].account == address(0)) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external returns (uint256) {\\n    return _claimVesting(self, msg.sender);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n\\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      if (self.contributors[vesting.payer].shares <= releasable) {\\n        revert Errors.InsufficientShares();\\n      }\\n\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    if (isChanged) {\\n      self.daoRevenue = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0x64c37f41883b5ab2be0e0d0268513db8aab24f9763576d9b3ffcf51e2c4272b8\",\"license\":\"MIT\"},\"contracts/lib/SpaceCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Space.sol\\\";\\n\\nlibrary SpaceCreator {\\n  function createSpace(CreateSpaceInput calldata input) external returns (address) {\\n    Space space = new Space(input.appId, address(this), msg.sender, input.spaceName, input.symbol, input.uri);\\n    space.initialize();\\n    return address(space);\\n  }\\n}\\n\",\"keccak256\":\"0x7c772354afc50296fb0d39a0d5123c7fada8439398b38dfb546f689d3d35e5b2\",\"license\":\"MIT\"},\"contracts/lib/SpaceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Member.sol\\\";\\nimport \\\"./Share.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceHelper {\\n  using SafeERC20 for IERC20;\\n\\n  function initialize(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Token.State storage token,\\n    address factory,\\n    address owner\\n  ) external returns (uint8 planId, uint256 premint) {\\n    if (msg.sender != factory) revert Errors.OnlyFactory();\\n\\n    Share.addContributor(share, owner);\\n\\n    share.contributors[owner].shares = SHARES_SUPPLY;\\n\\n    Curation.initTiers(curation);\\n\\n    planId = Member.createPlan(member, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\\n\\n    token.x = Token.initialX;\\n    token.y = Token.initialY;\\n    token.k = Token.initialK;\\n\\n    BuyInfo memory info = Token.buy(token, PREMINT_ETH_AMOUNT, 0);\\n\\n    premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n  }\\n\\n  function swap(\\n    mapping(address => address) storage spaceToFounder,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount) {\\n    if (!isSpace(spaceToFounder, tokenIn) || !isSpace(spaceToFounder, tokenOut) || tokenIn == tokenOut) {\\n      revert Errors.InvalidTokens();\\n    }\\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\\n  }\\n\\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\\n    amount = address(this).balance;\\n    TransferUtil.safeTransferETH(feeReceiver, amount);\\n  }\\n\\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\\n    }\\n  }\\n\\n  function isSpace(\\n    mapping(address => address) storage spaceToFounder,\\n    address spaceAddress\\n  ) public view returns (bool) {\\n    return spaceToFounder[spaceAddress] != address(0);\\n  }\\n\\n  function sell(\\n    Token.State storage token,\\n    address factory,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n  }\\n\\n  // deduct protocolFee and appFee\\n  function deductSubscriptionFees(\\n    Member.State storage member,\\n    address factory,\\n    uint256 appId,\\n    uint256 subscriptionFeePercent,\\n    uint256 revenue\\n  ) public returns (uint256 creatorRevenue) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n\\n    appFee = (revenue * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (revenue * subscriptionFeePercent) / 1 ether;\\n    creatorRevenue = revenue - protocolFee - appFee;\\n    member.subscriptionIncome += creatorRevenue;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n\\n  function distributeCreatorRevenue(\\n    Staking.State storage staking,\\n    Share.State storage share,\\n    uint256 stakingRevenuePercent,\\n    uint256 creatorRevenue\\n  ) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 stakingRevenue = (creatorRevenue * stakingRevenuePercent) / 1 ether;\\n      uint256 daoRevenue = creatorRevenue - stakingRevenue;\\n      staking.stakingRevenue += stakingRevenue;\\n      share.daoRevenue += daoRevenue;\\n    } else {\\n      share.daoRevenue += creatorRevenue;\\n    }\\n  }\\n\\n  function processSubscriptionRevenue(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Config storage config,\\n    address factory,\\n    uint256 appId,\\n    uint256 revenue,\\n    address account\\n  ) external {\\n    if (revenue > 0) {\\n      uint256 creatorRevenue = deductSubscriptionFees(member, factory, appId, config.subscriptionFeePercent, revenue);\\n\\n      CurationUser memory user = curation.users[account];\\n\\n      if (user.curator != address(0)) {\\n        CurationUser storage curatorUser = curation.users[user.curator];\\n        uint256 rebateRate = Curation.getRebateRate(curation, curatorUser.memberCount);\\n\\n        uint256 rewards = (creatorRevenue * rebateRate) / 1 ether;\\n        curatorUser.rewards += rewards;\\n        creatorRevenue = creatorRevenue - rewards;\\n      }\\n\\n      SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorRevenue);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc0ad26ef546ba8605dd09e3c7ca61e999cb9d212dc7ba469b31e4c595f0f7e79\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased; // released yield\\n    uint256 stakingRevenue; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n  }\\n\\n  function unstake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    if (amount > self.userStaked[account]) revert Errors.AmountTooLarge();\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStaker(State storage self, address account) external view returns (Staker memory) {\\n    return\\n      Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 yieldReleasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self, yieldReleasable);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    }\\n\\n    return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    if (self.yieldReleased == self.yieldAmount) return;\\n\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable == 0) return;\\n    if (IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingRevenue += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(\\n    State storage self,\\n    uint256 yieldReleasable\\n  ) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 stakingRevenue = self.stakingRevenue + yieldReleasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingRevenue) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self, 0);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    if (isChanged) {\\n      self.stakingRevenue = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0xb43195ad0877504f25e8b683f790d8f8a37101409ffee07a5afdef0803986c3d\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\\n\\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\\n    info = getTokenAmount(self, ethAmount);\\n\\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(\\n    State storage self,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\\n    info = getEthAmount(self, tokenAmount);\\n\\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xa70bee01471d54dfe5c22ba461f1bdcb4ef6834c0f4a2e4e05e14d3de03fc2a3\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x9b3d57bea5bba1424035a8591e21adc6cc4f50457c743f4e0a1a599581951285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57615ffb90816100228239308160330152f35b600080fdfe6080604090808252600491823610156200001857600080fd5b600091823560e01c630fb1b31c146200003057600080fd5b307f000000000000000000000000000000000000000000000000000000000000000014620001fc5760031990602036830112620001f85767ffffffffffffffff918535838111620001f45760c0818801928236030112620001f4576200009a602482018362000200565b90916064620000bc620000b1604484018762000200565b929093018662000200565b949093615d6996878901978989108b8a1117620001e0576200011f936200012e9896938b9a98969362000110936200025d8d393589523060208a01528d33908a015260c060608a015260c08901916200023b565b9186830360808801526200023b565b9260a08185039101526200023b565b039084f08015620001d45773ffffffffffffffffffffffffffffffffffffffff1692833b15620001d1578251917f8129fc1c0000000000000000000000000000000000000000000000000000000083528183878183895af18015620001c7576200019d575b6020858551908152f35b8211620001b4575060209350815238808062000193565b80604186634e487b7160e01b6024945252fd5b84513d84823e3d90fd5b80fd5b505051903d90823e3d90fd5b5060248c60418f634e487b7160e01b835252fd5b8580fd5b8380fd5b8280fd5b903590601e198136030182121562000236570180359067ffffffffffffffff821162000236576020019181360383136200023657565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe6101a08060405234620007525762005d69803803809162000021828562000757565b833981019060c0818303126200075257805162000041602083016200077b565b6200004f604084016200077b565b60608401516001600160401b03811162000752578562000071918601620007b5565b60808501519094906001600160401b03811162000752578662000096918301620007b5565b60a08201519096906001600160401b0381116200075257620000b99201620007b5565b60408051969192919087016001600160401b03811188821017620004fe5760405260018752603160f81b602088015285516001600160401b038111620004fe57600354600181811c9116801562000747575b6020821014620004dd57601f8111620006dd575b50806020601f8211600114620006525760009162000646575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004fe5760045490600182811c921680156200063b575b6020831014620004dd5781601f849311620005c6575b50602090601f831160011462000537576000926200052b575b50508160011b916000199060031b1c1916176004555b620001c28562000810565b95610120968752620001d481620009b5565b9561014096875260208151910120908160e052602081519101209081610100524660a0526040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019082821060018060401b03831117620004fe576040829052825190206080523060c0526001600160a01b0392831691821562000514575050600880546001600160a01b03198116831790915560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955610180938452610160928352606081016001600160401b03811182821017620004fe5760405281815260406020820191670429d069189e00008352019166470de4df820000835280519060018060401b038211620004fe57600a5490600182811c92168015620004f3575b6020831014620004dd5781601f84931162000479575b50602090601f8311600114620003ff57600092620003f3575b50508160011b916000199060031b1c191617600a555b51600b5551600c556040519261523c948562000b0d863960805185614bca015260a05185614c85015260c05185614b9b015260e05185614c1901526101005185614c3f015251846124d801525183612502015251828181610cca015281816112550152818161173e0152818161263b01526149f00152518181816127970152614a170152f35b01519050388062000357565b600a600090815260008051602062005d498339815191529350601f198516905b81811062000460575090846001959493921062000446575b505050811b01600a556200036d565b015160001960f88460031b161c1916905538808062000437565b929360206001819287860151815501950193016200041f565b600a60005290915060008051602062005d49833981519152601f840160051c81019160208510620004d2575b90601f859493920160051c01905b818110620004c257506200033e565b60008155849350600101620004b3565b9091508190620004a5565b634e487b7160e01b600052602260045260246000fd5b91607f169162000328565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a1565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f1984168510620005aa576001945083601f1981161062000590575b505050811b01600455620001b7565b015160001960f88460031b161c1916905538808062000581565b8181015183556020948501946001909301929091019062000564565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101916020851062000630575b90601f859493920160051c01905b81811062000620575062000188565b6000815584935060010162000611565b909150819062000603565b91607f169162000172565b90508701513862000138565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8a828210620006c45750509083600194939210620006aa575b5050811b016003556200014d565b89015160001960f88460031b161c1916905538806200069c565b6001849560209395849301518155019401920162000683565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200073c575b601f0160051c01905b8181106200072f57506200011f565b6000815560010162000720565b909150819062000717565b90607f16906200010b565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004fe57604052565b51906001600160a01b03821682036200075257565b60005b838110620007a45750506000910152565b818101518382015260200162000793565b81601f82011215620007525780516001600160401b038111620004fe5760405192620007ec601f8301601f19166020018562000757565b8184526020828401011162000752576200080d916020808501910162000790565b90565b8051602091908281101562000890575090601f8251116200084e57808251920151908083106200083f57501790565b82600019910360031b1b161790565b604490620008829260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000790565b601f01601f19168101030190fd5b6001600160401b038111620004fe576005928354926001938481811c91168015620009aa575b83821014620004dd57601f811162000973575b5081601f8411600114620009095750928293918392600094620008fd575b50501b916000199060031b1c191617905560ff90565b015192503880620008e7565b919083601f1981168760005284600020946000905b888383106200095857505050106200093e575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000931565b8587015188559096019594850194879350908101906200091e565b8560005284601f846000209201871c820191601f8601881c015b8281106200099d575050620008c9565b600081550185906200098d565b90607f1690620008b6565b805160209081811015620009e25750601f8251116200084e57808251920151908083106200083f57501790565b906001600160401b038211620004fe57600654926001938481811c9116801562000b01575b83821014620004dd57601f811162000ac7575b5081601f841160011462000a5b575092829391839260009462000a4f575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a38565b919083601f198116600660005284600020946000905b8883831062000aac575050501062000a92575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a84565b85870151885590960195948501948793509081019062000a71565b600660005284601f84600020920160051c820191601f860160051c015b82811062000af457505062000a1a565b6000815501859062000ae4565b90607f169062000a0756fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c8063012b3ced1461420557806306fdde0314614135578063095ea7b31461410e5780630f5aa7f31461405457806318160ddd146140365780632026e37214613f7857806323b872dd14613e3e57806325e702d214613d7f57806328bcf87914613cc05780632e17de7814613bf4578063313ce56714613bd85780633644e51514613bb5578063368242d314613a7e5780633b47a9ac146138ff5780633d203ce2146137b05780634479091d146135bd578063485449ab1461348b5780634cf088d9146134435780634cf518a1146133435780634f062c5a1461325c5780635b8594f7146130115780635f8b012814612f48578063626a9b2614612d6c57806362bf342f14612c3757806363935f1c14612b565780636b69e05b14612a7557806370a0823114612a3e578063715018a6146129d557806373b8740c1461294c578063752904d0146128e257806379502c55146127f25780637ecebe00146127ba57806380afdea81461277f5780638129fc1c146125cf57806384b0196e146124c25780638681d72f146123f357806388d4a3e51461224a5780638d3ed7c41461214c5780638da5cb5b146121255780638fcb4e5b14612040578063924d615314611f5657806392fd9e8b14611e6957806395d89b4114611d86578063a23c44b114611c87578063a2c96ed814611b6e578063a2dc057414611ae5578063a694fc3a14611a19578063a8d5fd65146119e7578063a9059cbb146119b5578063af157c1914611830578063b579184f14611762578063c45a01551461171e578063cd5c642614611669578063d505accf146114c5578063d79875eb14611121578063d94a862b14610f22578063d96a094a14610caa578063dcb2a3f514610bf3578063dd62ed3e14610ba3578063e16b6d5d14610b85578063e25a2a9914610a9d578063e3f6b54414610a6b578063eb2fd735146108f9578063eeb3e456146107b2578063ef153e13146106be578063f09badbd146104e1578063f2fde38b14610433578063fc0c546a146103fd5763fedda89c1461031e575061000e565b346103fa57806003193601126103fa57604051907f70d07b82000000000000000000000000000000000000000000000000000000008252601060048301526020918281602481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49182156103ee57916103bc575b506040518181527f9fe9b7be9d151c7a8b6de49a1312ff27a15096d0d1d12999af85fe4310e0b125833392a2604051908152f35b90508181813d83116103e7575b6103d38183614630565b810103126103e2575138610388565b600080fd5b503d6103c9565b604051903d90823e3d90fd5b80fd5b50346103fa57806003193601126103fa57600d54600e54600f5460408051938452602084019290925290820152606090f35b0390f35b50346103fa5760203660031901126103fa5761044d6144d0565b610455614cab565b6001600160a01b038091169081156104b0576008548273ffffffffffffffffffffffffffffffffffffffff19821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b602483604051907f1e4fbdf70000000000000000000000000000000000000000000000000000000082526004820152fd5b50346103fa576060806003193601126106ba576104fc6144fc565b906024359060443567ffffffffffffffff81116106b657610521903690600401614560565b93909261052c614b56565b801561068c5761053e81303330614d4d565b60ff60405192633474241b60e01b8452601f6004850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216938460c484015261012060e484015283838061059d61012482018a866147df565b85610104830152038173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af49384156106805760009384908596610638575b509461062d92916106037f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc973390614972565b604051958695600087526020870152604086015284015260a06080840152339660a08401916147df565b0390a3600160095580f35b80965082809495969392503d8311610679575b6106558183614630565b810103126103fa57508351602085015160409095015194909392919061062d6105d0565b503d61064b565b6040513d6000823e3d90fd5b60046040517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b5080fd5b50346103fa576106cd36614652565b91906106d7614b56565b604051927f1cfada8800000000000000000000000000000000000000000000000000000000845260106004850152602c60248501528160448501528060648501526020938481608481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49384156103ee5793610783575b5060405191825283820152817ff0b6a2e9121a710dc8fe3532a5396d4dae643d9a666e7e0e768be1c0e9a4047460403393a36001600955604051908152f35b9092508381813d83116107ab575b61079b8183614630565b810103126103e257519138610744565b503d610791565b506107bc36614652565b906107c5614b56565b6040517ff9dc325100000000000000000000000000000000000000000000000000000000815260106004820152602c6024820152816044820152826064820152604081608481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af480156108ee578491859161087a575b506040805133815260208101959095528401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3590806060810161062d565b9150506040813d6040116108e6575b8161089660409383614630565b810103126108e2576001600160a01b038161062d60206108d67f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a35956146cb565b92015192505091610831565b8380fd5b3d9150610889565b6040513d86823e3d90fd5b50346103fa5760603660031901126103fa5760043567ffffffffffffffff81116106ba5761092b903690600401614560565b6044359060243561093a614cab565b604051917ff1a91b13000000000000000000000000000000000000000000000000000000008352601f6004840152608060248401526020838061098160848201858a6147df565b856044830152876064830152038173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af4928315610a605786936109f3575b507f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99360ff93926109ed92604051958695169785614800565b0390a280f35b909192506020813d602011610a58575b81610a1060209383614630565b81010312610a54577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99360ff93610a496109ed936146f7565b9450929150936109b4565b8580fd5b3d9150610a03565b6040513d88823e3d90fd5b50346103fa57806003193601126103fa57606060ff601f54166020546021549060405192835260208301526040820152f35b50346103fa5760603660031901126103fa57600435602435604435610ac0614cab565b8373Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c803b156106ba5781608491604051928380927fa0be575c000000000000000000000000000000000000000000000000000000008252602460048301528960248301528860448301528760648301525af48015610b7a57610b66575b50507f2702951ec468d8fb7c1501e01af87b4bd50cda65a20463fc38ee59b954a777b09160409182519182526020820152a280f35b610b6f906145e4565b6108e2578338610b31565b6040513d84823e3d90fd5b50346103fa57806003193601126103fa576020602454604051908152f35b50346103fa5760403660031901126103fa57610bbd6144d0565b6040610bc76144e6565b926001600160a01b03809316815260016020522091166000526020526020604060002054604051908152f35b50346103fa57602090816003193601126103fa57610c0f6144d0565b6001600160a01b03604051917fed6de060000000000000000000000000000000000000000000000000000000008352601060048401521660248201528281604481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49182156103ee5791610c7d575b50604051908152f35b90508181813d8311610ca3575b610c948183614630565b810103126103e2575138610c74565b503d610c8a565b5060203660031901126103fa57610cbf614940565b50610cc8614b56565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038116331491604051916355d2ad9160e01b8352600d6004840152346024840152600435604484015260c083606481737341A3Bd560F830AB179729763dA8329a4EaE65B5af4928315610b7a578293610ee1575b5060608301805190918515610ea8575050610d68610d7391516080850151906148f0565b60a0840151906148f0565b90610d7e8233614cef565b6040830151918415610e9d5781945b15610e9357815b604051906370a0823160e01b8252336004830152602082602481305afa9182156108ee578492610e59575b50604080519586526020860193909352918401959095526060830152608082019390935260c09233917f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b908060a081015b0390a36001600955610e57604051809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b969150916020873d602011610e8b575b81610e7660209383614630565b810103126103e2579551909591610e10610dbf565b3d9150610e69565b60a0840151610d94565b608084015194610d8d565b610edc91939250610ed160808601610ec08151614e1b565b610eca8633614cef565b5130614cef565b60a085015190614cef565b610d7e565b90925060c03d60c011610f1b575b610ef98183614630565b81019060c081830312610f175790610f1091614824565b9138610d44565b8280fd5b503d610eef565b50346103fa57806003193601126103fa576040517f8c48d332000000000000000000000000000000000000000000000000000000008152601f6004820152818160248173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af4908115610b7a578291611014575b5060405190602092838301848452825180915260408401948060408360051b870101940192955b828710610fbe5785850386f35b909192938280600192603f19898203018552875190610fe660808351908084528301906144ab565b9183810151848301526040810151604083015260608091015115159101529601920196019592919092610fb1565b90503d8083833e6110258183614630565b810160209081838203126108e257825167ffffffffffffffff93848211610a5457019080601f830112156106b65781519061105f826146df565b9461106d6040519687614630565b828652848087019360051b8501019382851161111d57858101935b85851061109c575050505050505038610f8a565b84518381116111195782019060809081601f198488030112611115576040516110c481614614565b8984015193868511611111576111028b95946110e58a888098860101614721565b845260408301518685015260609283810151604086015201614899565b90820152815201940193611088565b8c80fd5b8a80fd5b8980fd5b8780fd5b5061112b36614652565b9091611135614940565b5061113e614b56565b604051917f04cac304000000000000000000000000000000000000000000000000000000008352600d6004840152836024840152604483015260c082606481737341A3Bd560F830AB179729763dA8329a4EaE65B5af49182156114b857819261147b575b50476040830190815110156114515760808301916111c08351614e1b565b6060840151301561143957306000526020906000825260406000205481811061141157908060009230845283855203604083205580600254036002556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef833092a360a0850180516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660048201526024810191909152909390828160448187305af180156108ee576113dd575b50828080808451335af13d156113d8573d6112bb81614705565b906112c96040519283614630565b815284843d92013e5b1561139557519351925190604051906370a0823160e01b82523360048301528082602481305afa9384156103ee5793611361575b50509160c095610e107f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b936001956040519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b908094929350813d831161138e575b61137a8183614630565b810103126103e25791519085610e10611306565b503d611370565b606482604051907f08c379a0000000000000000000000000000000000000000000000000000000008252600482015260026024820152612a2360f11b6044820152fd5b6112d2565b8281813d831161140a575b6113f28183614630565b810103126108e25761140390614899565b50386112a1565b503d6113e8565b60405163391434e360e21b815230600482015260248101919091526044810191909152606490fd5b60248260405190634b637e8f60e11b82526004820152fd5b60046040517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90915060c03d60c0116114b1575b6114938183614630565b81019060c081830312610f1757906114aa91614824565b90386111a2565b503d611489565b50604051903d90823e3d90fd5b50346103fa5760e03660031901126103fa576114df6144d0565b906114e86144e6565b60443590606435936084359460ff861686036103e257804211611638576001600160a01b039081831696878752600760205260408720908154916001830190556040519260208401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528a6040860152858816606086015288608086015260a085015260c084015260c0835260e083019183831067ffffffffffffffff841117611622576115d4936115cb936040525190206115a4614b91565b906040519161190160f01b83526002830152602282015260c43591604260a43592206150b4565b90929192615138565b168581036115eb57506115e8939450614e7a565b80f35b60449086604051917f4b800e4600000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b634e487b7160e01b600052604160045260246000fd5b602490604051907f627913020000000000000000000000000000000000000000000000000000000082526004820152fd5b50346103fa57806003193601126103fa5780738c86C104a2358dC47530378f11aeD5d90CD3bC5C803b1561171b5781602491604051928380927f2ce9a45f000000000000000000000000000000000000000000000000000000008252601060048301525af48015610b7a57611707575b507f1f44ad0beffb1a0d2f012c4d508d4527dca5f9590e01f1d262b6cc4e65a7a18f6020604051338152a180f35b611710906145e4565b6103fa5780386116d9565b50fd5b50346103fa57806003193601126103fa5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346103fa5760203660031901126103fa5761177c6144d0565b611784614cab565b81738c86C104a2358dC47530378f11aeD5d90CD3bC5C91823b156106ba57816001600160a01b03916044604051809481937fa9479ab10000000000000000000000000000000000000000000000000000000083526010600484015216968760248301525af48015610b7a5761181c575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b611825906145e4565b6106ba5781386117f4565b50346103fa57806003193601126103fa57604051907f77e7a4e7000000000000000000000000000000000000000000000000000000008252601060048301528082602481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49182156114b857819261190f575b5090604051906020808301906020845282518092526020604085019301945b8281106118c55784840385f35b909192826080826119006001948a51606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b019601910194929190946118b8565b9091503d8083833e6119218183614630565b8101906020906020818403126108e25780519067ffffffffffffffff82116106b657019082601f830112156108e257815161195b816146df565b936119696040519586614630565b81855260208086019260071b850101938185116119b157602001915b8483106119985750505050509038611899565b836080916119a684866148fd565b815201920191611985565b8680fd5b50346103fa5760403660031901126103fa576119dc6119d26144d0565b6024359033614a61565b602060405160018152f35b50346103fa57806003193601126103fa5760105460115460125460408051938452602084019290925290820152606090f35b50346103fa5760203660031901126103fa57600435611a36614b56565b81731f716bc526465101349273087367ea9850CdFC17803b156106ba5781604491604051928380927f588f017e000000000000000000000000000000000000000000000000000000008252601760048301528760248301525af48015610b7a57611ad1575b50506040519081527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a2600160095580f35b611ada906145e4565b6106ba578138611a9b565b50346103fa57602090816003193601126103fa57611b016144d0565b6001600160a01b03604051917fabe9c580000000000000000000000000000000000000000000000000000000008352601760048401521660248201528281604481731f716bc526465101349273087367ea9850CdFC175af49182156103ee5791610c7d5750604051908152f35b50346103fa5760403660031901126103fa57611b886144fc565b906001600160a01b03611b996144e6565b606060a0604051611ba9816145c8565b8581528560208201528560408201528583820152856080820152015260ff604051947f70604404000000000000000000000000000000000000000000000000000000008652601f6004870152166024850152166044830152808260648173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af49081156103ee578091611c41575b6040516020808252819061042f9082018561450c565b90503d8082843e611c528184614630565b8201916020818403126106ba5780519167ffffffffffffffff83116103fa575091611c819161042f9301614763565b38611c2b565b50346103fa5760203660031901126103fa57611ca16144d0565b611ca9614874565b506001600160a01b03604051917f73351a6d00000000000000000000000000000000000000000000000000000000835260176004840152166024820152608081604481731f716bc526465101349273087367ea9850CdFC175af4908115610b7a578291611d48575b608082610e576040518092606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b905060803d608011611d7f575b611d5f8183614630565b8101916080828403126103fa5750608091611d79916148fd565b38611d11565b503d611d55565b50346103fa57806003193601126103fa57604051600454600082611da98361458e565b9182825260209360019085600182169182600014611e49575050600114611dec575b50611dd892500383614630565b61042f6040519282849384528301906144ab565b84915060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b858310611e31575050611dd8935082010185611dcb565b80548389018501528794508693909201918101611e1a565b60ff191685820152611dd895151560051b8501019250879150611dcb9050565b50346103fa57806003193601126103fa57611e82614b56565b604051907faf5907fa00000000000000000000000000000000000000000000000000000000825260106004830152602082602481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49081156103ee5790611f23575b60408051338152602081810184905292917fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b3789190819081015b0390a16001600955604051908152f35b506020813d602011611f4e575b81611f3d60209383614630565b810103126103e25760209051611eda565b3d9150611f30565b50346103fa5760203660031901126103fa57611f70614874565b506040517fac362d7300000000000000000000000000000000000000000000000000000000815260246004820152600435602482015260808160448173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af4908115610b7a5761042f9291612011575b506040519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b612033915060803d608011612039575b61202b8183614630565b8101906148a6565b38611fd4565b503d612021565b50346103fa5760403660031901126103fa5761205a6144d0565b602435612065614b56565b82738c86C104a2358dC47530378f11aeD5d90CD3bC5C92833b156106ba57816001600160a01b03916064604051809481937ff351007e0000000000000000000000000000000000000000000000000000000083526010600484015216978860248301528760448301525af48015610b7a57612111575b50506040519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b61211a906145e4565b610f175782386120db565b50346103fa57806003193601126103fa5760206001600160a01b0360085416604051908152f35b50346103fa5760203660031901126103fa57600435612169614b56565b604051907f8b26588d00000000000000000000000000000000000000000000000000000000825260106004830152602c6024830152806044830152604082606481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af4801561223f578392849161220a575b5060405192835260208301527faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc60403393a3600160095580f35b905061222f91925060403d604011612238575b6122278183614630565b8101906146b5565b919091386121d0565b503d61221d565b6040513d85823e3d90fd5b50346103fa57806003193601126103fa57604051907fcd985a9000000000000000000000000000000000000000000000000000000000825260106004830152602c60248301528082604481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49182156114b8578192612321575b509060405190602080830190808452825180925280604085019301945b8281106122e45784840385f35b855180518552808301516001600160a01b0316858401526040808201519086015260609081015190850152948101946080909301926001016122d7565b9091503d8083833e6123338183614630565b81019060209081818403126108e25780519067ffffffffffffffff82116106b657019082601f830112156108e257815161236c816146df565b9361237a6040519586614630565b818552828086019260071b850101938185116119b1578301915b8483106123a757505050505090386122ba565b6080838303126119b157836080916040516123c181614614565b855181526123d08387016146cb565b838201526040860151604082015260608087015190820152815201920191612394565b50346103fa5760203660031901126103fa5761240d6144d0565b81738c86C104a2358dC47530378f11aeD5d90CD3bC5C91823b156106ba57816001600160a01b03916064604051809481937f03d9eb8400000000000000000000000000000000000000000000000000000000835260106004840152602e602484015216968760448301525af48015610b7a576124ae575b5050337f7b22c48ae06c79582ff5c89ab9ddff415a5ae48e866411fb60c66d75a60b561f8380a380f35b6124b7906145e4565b6106ba578138612484565b50346103fa57806003193601126103fa576124fc7f0000000000000000000000000000000000000000000000000000000000000000614edb565b906125267f0000000000000000000000000000000000000000000000000000000000000000614ff4565b9060405190602090602083019383851067ffffffffffffffff861117611622579284926020612585889661257798604052858552604051988998600f60f81b8a5260e0858b015260e08a01906144ab565b9088820360408a01526144ab565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106125b857505050500390f35b8351855286955093810193928101926001016125a9565b50346103fa57806003193601126103fa576001600160a01b03806008541690604051917ff044e081000000000000000000000000000000000000000000000000000000008352601f6004840152601060248401526024604484015260176064840152600d6084840152817f00000000000000000000000000000000000000000000000000000000000000001660a484015260c483015260408260e48173D80E170Cd13CFca2b4509157E455A6a762199e805af4801561223f5783928491612712575b5060ff7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab9926126c260809330614cef565b6008541693604051947f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f30294702728780a260608552856060860152660746a52880000060208601528560408601521692a280f35b9250506040823d604011612777575b8161272e60409383614630565b81010312610f1757608060ff7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab9926126c2602061276a876146f7565b9601519350509250612691565b3d9150612721565b50346103fa57806003193601126103fa5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346103fa5760203660031901126103fa5760406020916001600160a01b036127e16144d0565b168152600783522054604051908152f35b50346103fa57806003193601126103fa57604051600a549060006128158361458e565b8083526020936001908181169081156128c4575060011461286a575b61285d848661284282870383614630565b600b54600c54906040519485946060865260608601906144ab565b9284015260408301520390f35b600a60009081529492507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8286106128b157509193830184019150612842905082612831565b8054858701850152948301948101612896565b60ff1916858701525050151560051b82018301905061284282612831565b50346103fa5760203660031901126103fa577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e88586020600435612922614b56565b61292e816010546148f0565b60105561293d81303330614d4d565b604051908152a1600160095580f35b50346103fa57602090816003193601126103fa576129686144d0565b6001600160a01b03604051917f223bb64200000000000000000000000000000000000000000000000000000000835260246004840152166024820152828160448173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af49182156103ee5791610c7d5750604051908152f35b50346103fa57806003193601126103fa576129ee614cab565b60006001600160a01b0360085473ffffffffffffffffffffffffffffffffffffffff198116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103fa5760203660031901126103fa5760406020916001600160a01b03612a656144d0565b1681528083522054604051908152f35b50346103fa57806003193601126103fa57612a8e614b56565b604051907fe21c40c200000000000000000000000000000000000000000000000000000000825260176004830152602082602481731f716bc526465101349273087367ea9850CdFC175af49081156103ee5790612b23575b60408051338152602081810184905292917fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e919081908101611f13565b506020813d602011612b4e575b81612b3d60209383614630565b810103126103e25760209051612ae6565b3d9150612b30565b50346103fa57806003193601126103fa57612b6f614b56565b604051907f5d82a6c20000000000000000000000000000000000000000000000000000000082526024600483015260208260248173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af49081156103ee5790612c04575b60408051338152602081810184905292917fb829edcd2c5ee38b47b519f30efb6ea48a14b05bd1754f51a384ef422f14d357919081908101611f13565b506020813d602011612c2f575b81612c1e60209383614630565b810103126103e25760209051612bc7565b3d9150612c11565b50346103fa5760603660031901126103fa57612c516144fc565b90612ca66020612c5f6144e6565b60405163844899f160e01b815260ff90951660048601526001600160a01b0316602485015273F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841789391829081906044820190565b0381865af48015610b7a578290612d39575b6040915060648251809581937f6555463a000000000000000000000000000000000000000000000000000000008352601f6004840152602483015260443560448301525af480156114b8576040928291612d1a575b5082519182526020820152f35b9050612d339150823d8411612238576122278183614630565b38612d0d565b506020813d602011612d64575b81612d5360209383614630565b810103126103e25760409051612cb8565b3d9150612d46565b50346103fa57806003193601126103fa57604051907f3299ded100000000000000000000000000000000000000000000000000000000825260106004830152602e60248301528082604481738c86C104a2358dC47530378f11aeD5d90CD3bC5C5af49182156114b8578192612e5a575b509060405190602080830190808452825180925280604085019301945b828110612e065784840385f35b855180516001600160a01b03908116865281840151168584015260408082015190860152606080820151908601526080808201519086015260a090810151908501529481019460c090930192600101612df9565b9091503d8083833e612e6c8183614630565b81019060209081818403126108e25780519067ffffffffffffffff82116106b6570182601f820112156108e257805191612ea5836146df565b93612eb36040519586614630565b838552818501908260c08096028501019381851161111d578301915b848310612ee3575050505050509038612ddc565b858383031261111d57838691604051612efb816145c8565b612f04866146cb565b8152612f118387016146cb565b8382015260408601516040820152606080870151908201526080808701519082015260a08087015190820152815201920191612ecf565b50346103fa5760203660031901126103fa57612f626144d0565b612f6a614874565b506001600160a01b03604051917f54ff42e40000000000000000000000000000000000000000000000000000000083526024600484015216602482015260808160448173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af4908115610b7a5761042f929161201157506040519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b5060403660031901126103fa576130266144fc565b60243567ffffffffffffffff8111610f1757613046903690600401614560565b9161304f614b56565b6001341461323257604051906355d2ad9160e01b8252600d600483015234602483015284604483015260c082606481737341A3Bd560F830AB179729763dA8329a4EaE65B5af49182156132275785926131ec575b5060608092016130b4815130614cef565b5160ff60405192633474241b60e01b8452601f6004850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216938460c484015261012060e484015283838061311461012482018a866147df565b85610104830152038173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af493841561068057600093849085966131a4575b509461062d929161317a7f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc973390614972565b604051958695600187526020870152604086015284015260a06080840152339660a08401916147df565b80965082809495969392503d83116131e5575b6131c18183614630565b810103126103fa57508351602085015160409095015194909392919061062d613147565b503d6131b7565b90915060c03d60c011613220575b6132048183614630565b810160c082820312610a545761321991614824565b90386130a3565b503d6131fa565b6040513d87823e3d90fd5b60046040517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b50346103fa576020806003193601126106ba57818160405161327d816145f8565b8281520152604051907f0819334900000000000000000000000000000000000000000000000000000000825260246004830152600435602483015260408260448173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af491821561223f5783926132f5575b60408051845181528385015181850152f35b9091506040813d60401161333b575b8161331160409383614630565b81010312610f1757604092508183519161332a836145f8565b8051835201518282015290386132e3565b3d9150613304565b50346103fa5760803660031901126103fa5761335d6144d0565b60243560443560643584738c86C104a2358dC47530378f11aeD5d90CD3bC5C94853b156106ba57816001600160a01b039160c4604051809481937f92bb151400000000000000000000000000000000000000000000000000000000835260106004840152602e602484015216998a60448301528960648301528860848301528760a48301525af48015610b7a5761342f575b50506040805193845260208401929092529082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190606090a380f35b613438906145e4565b6106b65784386133ef565b50346103fa57806003193601126103fa5760c0601754601854601954601a54601b5491601c5493604051958652602086015260408501526060840152608083015260a0820152f35b50346103fa5760a03660031901126103fa576134a56144fc565b60243567ffffffffffffffff8111610f17576134c5903690600401614560565b604435916064359285608435958615158097036106ba576134e4614cab565b73F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA84178803b15610f175760ff91839160405180809581947fa5ac5cd7000000000000000000000000000000000000000000000000000000008352601f6004840152169b8c602483015260c0604483015261355460c483018c8c6147df565b908960648401528c608484015260a483015203915af48015610b7a576135a9575b50507f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f936109ed9160405194859485614800565b6135b2906145e4565b610a54578538613575565b50346103fa5760403660031901126103fa5767ffffffffffffffff906004358281116106ba576135f1903690600401614560565b602435936135fd614cab565b811161379c5761360e600a5461458e565b601f8111613739575b508293601f8211600114613697578184957f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb8959161368c575b508260011b906000198460031b1c191617600a555b80600b556136806040519384936040855260408501916147df565b9060208301520390a180f35b905083013538613650565b600a8452601f198216947fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890855b8781106137215750837f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb8969710613707575b5050600182811b01600a55613665565b840135600019600385901b60f8161c1916905538806136f7565b909160206001819285890135815501930191016136c5565b600a84527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f830160051c81019160208410613792575b601f0160051c01905b8181106137875750613617565b84815560010161377a565b9091508190613771565b602483634e487b7160e01b81526041600452fd5b50346103fa5760403660031901126103fa576137ca6144fc565b6137d26144e6565b60405163844899f160e01b815260ff831660048201526001600160a01b038216602482015290919073F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA8417890602081604481855af480156132275785906138cc575b6040915060848251809481936362195e9f60e01b8352601f6004840152602480840152602a604484015260648301525af49081156108ee577f66b1fd337cea274cb38fa0696247bba4469e95f3be5ce7d9c9a974d9a11e4bd5926138978560209460ff9489916138ac575b50614972565b6001600160a01b03604051951685521692a280f35b6138c5915060403d604011612238576122278183614630565b5038613891565b506020813d6020116138f7575b816138e660209383614630565b810103126103e25760409051613826565b3d91506138d9565b50346103fa57806003193601126103fa576040517ffb1af52e000000000000000000000000000000000000000000000000000000008152601f6004820152602a6024820152818160448173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af4908115610b7a5782916139d1575b5060405190602092602083016020845282518091526040840194602060408360051b870101940192955b8287106139a55785850386f35b9091929382806139c1600193603f198a8203018652885161450c565b9601920196019592919092613998565b90503d8083833e6139e28183614630565b810160209081838203126108e257825167ffffffffffffffff93848211610a5457019080601f830112156106b657815190613a1c826146df565b94613a2a6040519687614630565b828652848087019360051b8501019382851161111d57858101935b858510613a5957505050505050503861396e565b8451838111611119578791613a7386848094870101614763565b815201940193613a45565b50346103fa5760403660031901126103fa57613a986144fc565b613aa0614b56565b60ff604051917fda4382fa000000000000000000000000000000000000000000000000000000008352601f6004840152602480840152602a604484015216806064830152602435608483015260808260a48173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af4801561223f578392849385918693613b69575b5090613b4b7fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff98276993923390614972565b6040805195865260208601919091528401523392806060810161062d565b94505050506080823d608011613bad575b81613b8760809383614630565b81010312610f175781516020830151604084015160609094015190939091613b4b613b1c565b3d9150613b7a565b50346103fa57806003193601126103fa576020613bd0614b91565b604051908152f35b50346103fa57806003193601126103fa57602060405160128152f35b50346103fa5760203660031901126103fa57600435613c11614b56565b81731f716bc526465101349273087367ea9850CdFC17803b156106ba5781604491604051928380927f0189422a000000000000000000000000000000000000000000000000000000008252601760048301528760248301525af48015610b7a57613cac575b50506040519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a2600160095580f35b613cb5906145e4565b6106ba578138613c76565b50346103fa5760203660031901126103fa576004358173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c803b156106ba5781604491604051928380927fe64e5c2a000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a57613d6b575b50506040519081527ffcd5abced4a14fd82dd75efe917d75c414fce0581307a6c5616350e6d4cc86b360203392a280f35b613d74906145e4565b6106ba578138613d3a565b50346103fa5760203660031901126103fa576004358173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c803b156106ba5781604491604051928380927f0b7fb741000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a57613e2a575b50506040519081527fa580c6f3f2d7189dd4058538c62d03023016a7c3b7925688501462a6e39e345460203392a280f35b613e33906145e4565b6106ba578138613df9565b50346103fa5760603660031901126103fa57613e586144d0565b613e606144e6565b6044359160406001600160a01b0382169485815260016020522033600052602052604060002054936000198503613e9d575b506119dc9350614a61565b838510613f39578015613f08573315613ed7576119dc94849160005260016020526040600020336000526020520360406000205538613e92565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606490fd5b50346103fa57602090816003193601126103fa576040517faaa964aa000000000000000000000000000000000000000000000000000000008152602460048201526004356024820152828160448173Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c5af49182156103ee578092613ffe575b50506001600160a01b0360405191168152f35b9091508282813d831161402f575b6140168183614630565b810103126103fa5750614028906146cb565b3880613feb565b503d61400c565b50346103fa57806003193601126103fa576020600254604051908152f35b50346103fa5760203660031901126103fa576004359073Bf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c803b156106ba5781604491604051928380927fe72267b6000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a576140ff575b50906040519081527f5d20e16c575e19d37142327b2bb4d5017477cfa3a514b0523564afa605104c8060203392a280f35b614108906145e4565b386140ce565b50346103fa5760403660031901126103fa576119dc61412b6144d0565b6024359033614e7a565b50346103fa57806003193601126103fa57604051908082600354916141598361458e565b92838352602094600191866001821691826000146141e3575050600114614189575b5050611dd892500383614630565b90859250600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8583106141cb575050611dd89350820101388061417b565b805483890185015287945086939092019181016141b3565b9250935050611dd894915060ff191682840152151560051b820101388061417b565b50346103fa5760203660031901126103fa57602a54806080526020608001602a83527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d291835b8181106144725784614262607f1985016080614630565b608051815b8181106142a55760408051338152600435602082015284917f73c58cffa8ee146b206627c2c322e2d5bba6c275790dd2cb73f1afdd7fb0d76f91a180f35b6142b0816080614668565b51835260236020526040832090604051916142ca836145c8565b6001600160a01b03815460ff8116855260081c1660208401526001810154604084015260028101546060840152600381015460808401526040519081866004830154926143168461458e565b8084529360018116908115614450575060011461440c575b5061433b92500382614630565b60a0830152600435614351604084015142614692565b111561440357614362816080614668565b51604051906362195e9f60e01b8252601f6004830152602480830152602a6044830152606482015260408160848173F09abe8C2cbE0c6017CB4b50Cd62eb6CbCA841785af48015613227576001936143cf9287926143d5575b50602001516001600160a01b031690614972565b01614267565b6001600160a01b039192506143fa60209160403d604011612238576122278183614630565b509291506143bb565b600191506143cf565b6004018852505060208620869183915b818410614434575050602061433b928201018861432e565b602091925080600191548386880101520192019190839161441c565b90506020925061433b94915060ff191682840152151560051b8201018861432e565b835483526001938401936020909301920161424b565b60005b83811061449b5750506000910152565b818101518382015260200161448b565b906020916144c481518092818552858086019101614488565b601f01601f1916010190565b600435906001600160a01b03821682036103e257565b602435906001600160a01b03821682036103e257565b6004359060ff821682036103e257565b9060c060a061455d9360ff81511684526001600160a01b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151918160a082015201906144ab565b90565b9181601f840112156103e25782359167ffffffffffffffff83116103e257602083818601950101116103e257565b90600182811c921680156145be575b60208310146145a857565b634e487b7160e01b600052602260045260246000fd5b91607f169161459d565b60c0810190811067ffffffffffffffff82111761162257604052565b67ffffffffffffffff811161162257604052565b6040810190811067ffffffffffffffff82111761162257604052565b6080810190811067ffffffffffffffff82111761162257604052565b90601f8019910116810190811067ffffffffffffffff82111761162257604052565b60409060031901126103e2576004359060243590565b805182101561467c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161469f57565b634e487b7160e01b600052601160045260246000fd5b91908260409103126103e2576020825192015190565b51906001600160a01b03821682036103e257565b67ffffffffffffffff81116116225760051b60200190565b519060ff821682036103e257565b67ffffffffffffffff811161162257601f01601f191660200190565b81601f820112156103e257805161473781614705565b926147456040519485614630565b818452602082840101116103e25761455d9160208085019101614488565b919060c0838203126103e2576040519061477c826145c8565b8193614787816146f7565b8352614795602082016146cb565b602084015260408101516040840152606081015160608401526080810151608084015260a08101519167ffffffffffffffff83116103e25760a0926147da9201614721565b910152565b908060209392818452848401376000828201840152601f01601f1916010190565b9061481a90604093969594966060845260608401916147df565b9460208201520152565b91908260c09103126103e25760405161483c816145c8565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6040519061488182614614565b60006060838281528260208201528260408201520152565b519081151582036103e257565b908160809103126103e2576148e86060604051926148c384614614565b6148cc816146cb565b8452602081015160208501526040810151604085015201614899565b606082015290565b9190820180921161469f57565b91908260809103126103e25760405161491581614614565b6060808294614923816146cb565b845260208101516020850152604081015160408501520151910152565b6040519061494d826145c8565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9073D80E170Cd13CFca2b4509157E455A6a762199e8091823b156103e25761012460009260405194859384927ffb7a2c50000000000000000000000000000000000000000000000000000000008452601f6004850152601060248501526024604485015260176064850152600a60848501526001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001660a48601527f000000000000000000000000000000000000000000000000000000000000000060c486015260e4850152166101048301525af4801561068057614a565750565b614a5f906145e4565b565b916001600160a01b03808416928315614b3e5716928315614b0d5760009083825281602052604082205490838210614adb575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6024604051634b637e8f60e11b815260006004820152fd5b600260095414614b67576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480614c82575b15614bec577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152614c7c816145c8565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614614bc3565b6001600160a01b03600854163303614cbf57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b6001600160a01b0316908115614b0d577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614d316000946002546148f0565b60025584845283825260408420818154019055604051908152a3565b92906040519160208301917f23b872dd0000000000000000000000000000000000000000000000000000000083526001600160a01b039485809216602486015216604484015260648301526064825260a082019082821067ffffffffffffffff83111761162257602092600092604052519082865af115610680576000513d614e1257508082163b155b614ddf575050565b60249250604051917f5274afe7000000000000000000000000000000000000000000000000000000008352166004820152fd5b60011415614dd7565b600b54601b5490919015614e6d5781810291818304148115171561469f57614e5d614e54670de0b6b3a7640000614e6894048093614692565b91601a546148f0565b601a556010546148f0565b601055565b614e6891506010546148f0565b6001600160a01b03809116918215613f085716918215613ed75760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60ff8114614f315760ff811690601f8211614f075760405191614efd836145f8565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614f448361458e565b80835292602090600190818116908115614fd05750600114614f6f575b505061455d92500382614630565b91509260056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0936000925b828410614fb8575061455d9450505081016020013880614f61565b85548785018301529485019486945092810192614f9d565b9150506020925061455d94915060ff191682840152151560051b8201013880614f61565b60ff81146150165760ff811690601f8211614f075760405191614efd836145f8565b506040516006548160006150298361458e565b80835292602090600190818116908115614fd0575060011461505357505061455d92500382614630565b91509260066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f936000925b82841061509c575061455d9450505081016020013880614f61565b85548785018301529485019486945092810192615081565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161512c57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156103ee5780516001600160a01b0381161561512357918190565b50809160019190565b50505060009160039190565b60048110156151f0578061514a575050565b6001810361517c5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b600281036151b557602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146151bf5750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212203b1a7ed2e9b9c5f0461d36e4257e3826c99cf1543dfc140b63a58fe5b8b7a2c364736f6c63430008160033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220d8ebecafd4876e32cf1b515b0281dcdce67cf4bc4bc1cc5da1139f64aa5888c664736f6c63430008160033",
  "deployedBytecode": "$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156103ee57916103bc575b506040518181527f9fe9b7be9d151c7a8b6de49a1312ff27a15096d0d1d12999af85fe4310e0b125833392a2604051908152f35b90508181813d83116103e7575b6103d38183614630565b810103126103e2575138610388565b600080fd5b503d6103c9565b604051903d90823e3d90fd5b80fd5b50346103fa57806003193601126103fa57600d54600e54600f5460408051938452602084019290925290820152606090f35b0390f35b50346103fa5760203660031901126103fa5761044d6144d0565b610455614cab565b6001600160a01b038091169081156104b0576008548273ffffffffffffffffffffffffffffffffffffffff19821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b602483604051907f1e4fbdf70000000000000000000000000000000000000000000000000000000082526004820152fd5b50346103fa576060806003193601126106ba576104fc6144fc565b906024359060443567ffffffffffffffff81116106b657610521903690600401614560565b93909261052c614b56565b801561068c5761053e81303330614d4d565b60ff60405192633474241b60e01b8452601f6004850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216938460c484015261012060e484015283838061059d61012482018a866147df565b85610104830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49384156106805760009384908596610638575b509461062d92916106037f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc973390614972565b604051958695600087526020870152604086015284015260a06080840152339660a08401916147df565b0390a3600160095580f35b80965082809495969392503d8311610679575b6106558183614630565b810103126103fa57508351602085015160409095015194909392919061062d6105d0565b503d61064b565b6040513d6000823e3d90fd5b60046040517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b5080fd5b50346103fa576106cd36614652565b91906106d7614b56565b604051927f1cfada8800000000000000000000000000000000000000000000000000000000845260106004850152602c6024850152816044850152806064850152602093848160848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49384156103ee5793610783575b5060405191825283820152817ff0b6a2e9121a710dc8fe3532a5396d4dae643d9a666e7e0e768be1c0e9a4047460403393a36001600955604051908152f35b9092508381813d83116107ab575b61079b8183614630565b810103126103e257519138610744565b503d610791565b506107bc36614652565b906107c5614b56565b6040517ff9dc325100000000000000000000000000000000000000000000000000000000815260106004820152602c602482015281604482015282606482015260408160848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af480156108ee578491859161087a575b506040805133815260208101959095528401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3590806060810161062d565b9150506040813d6040116108e6575b8161089660409383614630565b810103126108e2576001600160a01b038161062d60206108d67f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a35956146cb565b92015192505091610831565b8380fd5b3d9150610889565b6040513d86823e3d90fd5b50346103fa5760603660031901126103fa5760043567ffffffffffffffff81116106ba5761092b903690600401614560565b6044359060243561093a614cab565b604051917ff1a91b13000000000000000000000000000000000000000000000000000000008352601f6004840152608060248401526020838061098160848201858a6147df565b856044830152876064830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af4928315610a605786936109f3575b507f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99360ff93926109ed92604051958695169785614800565b0390a280f35b909192506020813d602011610a58575b81610a1060209383614630565b81010312610a54577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99360ff93610a496109ed936146f7565b9450929150936109b4565b8580fd5b3d9150610a03565b6040513d88823e3d90fd5b50346103fa57806003193601126103fa57606060ff601f54166020546021549060405192835260208301526040820152f35b50346103fa5760603660031901126103fa57600435602435604435610ac0614cab565b8373__$d26c4b6c55cbf068c0037866f9978a3889$__803b156106ba5781608491604051928380927fa0be575c000000000000000000000000000000000000000000000000000000008252602460048301528960248301528860448301528760648301525af48015610b7a57610b66575b50507f2702951ec468d8fb7c1501e01af87b4bd50cda65a20463fc38ee59b954a777b09160409182519182526020820152a280f35b610b6f906145e4565b6108e2578338610b31565b6040513d84823e3d90fd5b50346103fa57806003193601126103fa576020602454604051908152f35b50346103fa5760403660031901126103fa57610bbd6144d0565b6040610bc76144e6565b926001600160a01b03809316815260016020522091166000526020526020604060002054604051908152f35b50346103fa57602090816003193601126103fa57610c0f6144d0565b6001600160a01b03604051917fed6de06000000000000000000000000000000000000000000000000000000000835260106004840152166024820152828160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156103ee5791610c7d575b50604051908152f35b90508181813d8311610ca3575b610c948183614630565b810103126103e2575138610c74565b503d610c8a565b5060203660031901126103fa57610cbf614940565b50610cc8614b56565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038116331491604051916355d2ad9160e01b8352600d6004840152346024840152600435604484015260c08360648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4928315610b7a578293610ee1575b5060608301805190918515610ea8575050610d68610d7391516080850151906148f0565b60a0840151906148f0565b90610d7e8233614cef565b6040830151918415610e9d5781945b15610e9357815b604051906370a0823160e01b8252336004830152602082602481305afa9182156108ee578492610e59575b50604080519586526020860193909352918401959095526060830152608082019390935260c09233917f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b908060a081015b0390a36001600955610e57604051809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b969150916020873d602011610e8b575b81610e7660209383614630565b810103126103e2579551909591610e10610dbf565b3d9150610e69565b60a0840151610d94565b608084015194610d8d565b610edc91939250610ed160808601610ec08151614e1b565b610eca8633614cef565b5130614cef565b60a085015190614cef565b610d7e565b90925060c03d60c011610f1b575b610ef98183614630565b81019060c081830312610f175790610f1091614824565b9138610d44565b8280fd5b503d610eef565b50346103fa57806003193601126103fa576040517f8c48d332000000000000000000000000000000000000000000000000000000008152601f6004820152818160248173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610b7a578291611014575b5060405190602092838301848452825180915260408401948060408360051b870101940192955b828710610fbe5785850386f35b909192938280600192603f19898203018552875190610fe660808351908084528301906144ab565b9183810151848301526040810151604083015260608091015115159101529601920196019592919092610fb1565b90503d8083833e6110258183614630565b810160209081838203126108e257825167ffffffffffffffff93848211610a5457019080601f830112156106b65781519061105f826146df565b9461106d6040519687614630565b828652848087019360051b8501019382851161111d57858101935b85851061109c575050505050505038610f8a565b84518381116111195782019060809081601f198488030112611115576040516110c481614614565b8984015193868511611111576111028b95946110e58a888098860101614721565b845260408301518685015260609283810151604086015201614899565b90820152815201940193611088565b8c80fd5b8a80fd5b8980fd5b8780fd5b5061112b36614652565b9091611135614940565b5061113e614b56565b604051917f04cac304000000000000000000000000000000000000000000000000000000008352600d6004840152836024840152604483015260c08260648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49182156114b857819261147b575b50476040830190815110156114515760808301916111c08351614e1b565b6060840151301561143957306000526020906000825260406000205481811061141157908060009230845283855203604083205580600254036002556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef833092a360a0850180516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660048201526024810191909152909390828160448187305af180156108ee576113dd575b50828080808451335af13d156113d8573d6112bb81614705565b906112c96040519283614630565b815284843d92013e5b1561139557519351925190604051906370a0823160e01b82523360048301528082602481305afa9384156103ee5793611361575b50509160c095610e107f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b936001956040519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b908094929350813d831161138e575b61137a8183614630565b810103126103e25791519085610e10611306565b503d611370565b606482604051907f08c379a0000000000000000000000000000000000000000000000000000000008252600482015260026024820152612a2360f11b6044820152fd5b6112d2565b8281813d831161140a575b6113f28183614630565b810103126108e25761140390614899565b50386112a1565b503d6113e8565b60405163391434e360e21b815230600482015260248101919091526044810191909152606490fd5b60248260405190634b637e8f60e11b82526004820152fd5b60046040517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90915060c03d60c0116114b1575b6114938183614630565b81019060c081830312610f1757906114aa91614824565b90386111a2565b503d611489565b50604051903d90823e3d90fd5b50346103fa5760e03660031901126103fa576114df6144d0565b906114e86144e6565b60443590606435936084359460ff861686036103e257804211611638576001600160a01b039081831696878752600760205260408720908154916001830190556040519260208401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528a6040860152858816606086015288608086015260a085015260c084015260c0835260e083019183831067ffffffffffffffff841117611622576115d4936115cb936040525190206115a4614b91565b906040519161190160f01b83526002830152602282015260c43591604260a43592206150b4565b90929192615138565b168581036115eb57506115e8939450614e7a565b80f35b60449086604051917f4b800e4600000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b634e487b7160e01b600052604160045260246000fd5b602490604051907f627913020000000000000000000000000000000000000000000000000000000082526004820152fd5b50346103fa57806003193601126103fa578073__$aee754128d0d1775ed250cc6ad74f33f25$__803b1561171b5781602491604051928380927f2ce9a45f000000000000000000000000000000000000000000000000000000008252601060048301525af48015610b7a57611707575b507f1f44ad0beffb1a0d2f012c4d508d4527dca5f9590e01f1d262b6cc4e65a7a18f6020604051338152a180f35b611710906145e4565b6103fa5780386116d9565b50fd5b50346103fa57806003193601126103fa5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346103fa5760203660031901126103fa5761177c6144d0565b611784614cab565b8173__$aee754128d0d1775ed250cc6ad74f33f25$__91823b156106ba57816001600160a01b03916044604051809481937fa9479ab10000000000000000000000000000000000000000000000000000000083526010600484015216968760248301525af48015610b7a5761181c575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b611825906145e4565b6106ba5781386117f4565b50346103fa57806003193601126103fa57604051907f77e7a4e700000000000000000000000000000000000000000000000000000000825260106004830152808260248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156114b857819261190f575b5090604051906020808301906020845282518092526020604085019301945b8281106118c55784840385f35b909192826080826119006001948a51606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b019601910194929190946118b8565b9091503d8083833e6119218183614630565b8101906020906020818403126108e25780519067ffffffffffffffff82116106b657019082601f830112156108e257815161195b816146df565b936119696040519586614630565b81855260208086019260071b850101938185116119b157602001915b8483106119985750505050509038611899565b836080916119a684866148fd565b815201920191611985565b8680fd5b50346103fa5760403660031901126103fa576119dc6119d26144d0565b6024359033614a61565b602060405160018152f35b50346103fa57806003193601126103fa5760105460115460125460408051938452602084019290925290820152606090f35b50346103fa5760203660031901126103fa57600435611a36614b56565b8173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__803b156106ba5781604491604051928380927f588f017e000000000000000000000000000000000000000000000000000000008252601760048301528760248301525af48015610b7a57611ad1575b50506040519081527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a2600160095580f35b611ada906145e4565b6106ba578138611a9b565b50346103fa57602090816003193601126103fa57611b016144d0565b6001600160a01b03604051917fabe9c58000000000000000000000000000000000000000000000000000000000835260176004840152166024820152828160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49182156103ee5791610c7d5750604051908152f35b50346103fa5760403660031901126103fa57611b886144fc565b906001600160a01b03611b996144e6565b606060a0604051611ba9816145c8565b8581528560208201528560408201528583820152856080820152015260ff604051947f70604404000000000000000000000000000000000000000000000000000000008652601f6004870152166024850152166044830152808260648173__$481ca34c951945c71f6bbcbbb91702f088$__5af49081156103ee578091611c41575b6040516020808252819061042f9082018561450c565b90503d8082843e611c528184614630565b8201916020818403126106ba5780519167ffffffffffffffff83116103fa575091611c819161042f9301614763565b38611c2b565b50346103fa5760203660031901126103fa57611ca16144d0565b611ca9614874565b506001600160a01b03604051917f73351a6d0000000000000000000000000000000000000000000000000000000083526017600484015216602482015260808160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4908115610b7a578291611d48575b608082610e576040518092606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b905060803d608011611d7f575b611d5f8183614630565b8101916080828403126103fa5750608091611d79916148fd565b38611d11565b503d611d55565b50346103fa57806003193601126103fa57604051600454600082611da98361458e565b9182825260209360019085600182169182600014611e49575050600114611dec575b50611dd892500383614630565b61042f6040519282849384528301906144ab565b84915060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b858310611e31575050611dd8935082010185611dcb565b80548389018501528794508693909201918101611e1a565b60ff191685820152611dd895151560051b8501019250879150611dcb9050565b50346103fa57806003193601126103fa57611e82614b56565b604051907faf5907fa0000000000000000000000000000000000000000000000000000000082526010600483015260208260248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49081156103ee5790611f23575b60408051338152602081810184905292917fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b3789190819081015b0390a16001600955604051908152f35b506020813d602011611f4e575b81611f3d60209383614630565b810103126103e25760209051611eda565b3d9150611f30565b50346103fa5760203660031901126103fa57611f70614874565b506040517fac362d7300000000000000000000000000000000000000000000000000000000815260246004820152600435602482015260808160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4908115610b7a5761042f9291612011575b506040519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b612033915060803d608011612039575b61202b8183614630565b8101906148a6565b38611fd4565b503d612021565b50346103fa5760403660031901126103fa5761205a6144d0565b602435612065614b56565b8273__$aee754128d0d1775ed250cc6ad74f33f25$__92833b156106ba57816001600160a01b03916064604051809481937ff351007e0000000000000000000000000000000000000000000000000000000083526010600484015216978860248301528760448301525af48015610b7a57612111575b50506040519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b61211a906145e4565b610f175782386120db565b50346103fa57806003193601126103fa5760206001600160a01b0360085416604051908152f35b50346103fa5760203660031901126103fa57600435612169614b56565b604051907f8b26588d00000000000000000000000000000000000000000000000000000000825260106004830152602c602483015280604483015260408260648173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4801561223f578392849161220a575b5060405192835260208301527faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc60403393a3600160095580f35b905061222f91925060403d604011612238575b6122278183614630565b8101906146b5565b919091386121d0565b503d61221d565b6040513d85823e3d90fd5b50346103fa57806003193601126103fa57604051907fcd985a9000000000000000000000000000000000000000000000000000000000825260106004830152602c6024830152808260448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156114b8578192612321575b509060405190602080830190808452825180925280604085019301945b8281106122e45784840385f35b855180518552808301516001600160a01b0316858401526040808201519086015260609081015190850152948101946080909301926001016122d7565b9091503d8083833e6123338183614630565b81019060209081818403126108e25780519067ffffffffffffffff82116106b657019082601f830112156108e257815161236c816146df565b9361237a6040519586614630565b818552828086019260071b850101938185116119b1578301915b8483106123a757505050505090386122ba565b6080838303126119b157836080916040516123c181614614565b855181526123d08387016146cb565b838201526040860151604082015260608087015190820152815201920191612394565b50346103fa5760203660031901126103fa5761240d6144d0565b8173__$aee754128d0d1775ed250cc6ad74f33f25$__91823b156106ba57816001600160a01b03916064604051809481937f03d9eb8400000000000000000000000000000000000000000000000000000000835260106004840152602e602484015216968760448301525af48015610b7a576124ae575b5050337f7b22c48ae06c79582ff5c89ab9ddff415a5ae48e866411fb60c66d75a60b561f8380a380f35b6124b7906145e4565b6106ba578138612484565b50346103fa57806003193601126103fa576124fc7f0000000000000000000000000000000000000000000000000000000000000000614edb565b906125267f0000000000000000000000000000000000000000000000000000000000000000614ff4565b9060405190602090602083019383851067ffffffffffffffff861117611622579284926020612585889661257798604052858552604051988998600f60f81b8a5260e0858b015260e08a01906144ab565b9088820360408a01526144ab565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106125b857505050500390f35b8351855286955093810193928101926001016125a9565b50346103fa57806003193601126103fa576001600160a01b03806008541690604051917ff044e081000000000000000000000000000000000000000000000000000000008352601f6004840152601060248401526024604484015260176064840152600d6084840152817f00000000000000000000000000000000000000000000000000000000000000001660a484015260c483015260408260e48173__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__5af4801561223f5783928491612712575b5060ff7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab9926126c260809330614cef565b6008541693604051947f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f30294702728780a260608552856060860152660746a52880000060208601528560408601521692a280f35b9250506040823d604011612777575b8161272e60409383614630565b81010312610f1757608060ff7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab9926126c2602061276a876146f7565b9601519350509250612691565b3d9150612721565b50346103fa57806003193601126103fa5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346103fa5760203660031901126103fa5760406020916001600160a01b036127e16144d0565b168152600783522054604051908152f35b50346103fa57806003193601126103fa57604051600a549060006128158361458e565b8083526020936001908181169081156128c4575060011461286a575b61285d848661284282870383614630565b600b54600c54906040519485946060865260608601906144ab565b9284015260408301520390f35b600a60009081529492507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8286106128b157509193830184019150612842905082612831565b8054858701850152948301948101612896565b60ff1916858701525050151560051b82018301905061284282612831565b50346103fa5760203660031901126103fa577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e88586020600435612922614b56565b61292e816010546148f0565b60105561293d81303330614d4d565b604051908152a1600160095580f35b50346103fa57602090816003193601126103fa576129686144d0565b6001600160a01b03604051917f223bb64200000000000000000000000000000000000000000000000000000000835260246004840152166024820152828160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49182156103ee5791610c7d5750604051908152f35b50346103fa57806003193601126103fa576129ee614cab565b60006001600160a01b0360085473ffffffffffffffffffffffffffffffffffffffff198116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103fa5760203660031901126103fa5760406020916001600160a01b03612a656144d0565b1681528083522054604051908152f35b50346103fa57806003193601126103fa57612a8e614b56565b604051907fe21c40c20000000000000000000000000000000000000000000000000000000082526017600483015260208260248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49081156103ee5790612b23575b60408051338152602081810184905292917fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e919081908101611f13565b506020813d602011612b4e575b81612b3d60209383614630565b810103126103e25760209051612ae6565b3d9150612b30565b50346103fa57806003193601126103fa57612b6f614b56565b604051907f5d82a6c20000000000000000000000000000000000000000000000000000000082526024600483015260208260248173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49081156103ee5790612c04575b60408051338152602081810184905292917fb829edcd2c5ee38b47b519f30efb6ea48a14b05bd1754f51a384ef422f14d357919081908101611f13565b506020813d602011612c2f575b81612c1e60209383614630565b810103126103e25760209051612bc7565b3d9150612c11565b50346103fa5760603660031901126103fa57612c516144fc565b90612ca66020612c5f6144e6565b60405163844899f160e01b815260ff90951660048601526001600160a01b0316602485015273__$481ca34c951945c71f6bbcbbb91702f088$__9391829081906044820190565b0381865af48015610b7a578290612d39575b6040915060648251809581937f6555463a000000000000000000000000000000000000000000000000000000008352601f6004840152602483015260443560448301525af480156114b8576040928291612d1a575b5082519182526020820152f35b9050612d339150823d8411612238576122278183614630565b38612d0d565b506020813d602011612d64575b81612d5360209383614630565b810103126103e25760409051612cb8565b3d9150612d46565b50346103fa57806003193601126103fa57604051907f3299ded100000000000000000000000000000000000000000000000000000000825260106004830152602e6024830152808260448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156114b8578192612e5a575b509060405190602080830190808452825180925280604085019301945b828110612e065784840385f35b855180516001600160a01b03908116865281840151168584015260408082015190860152606080820151908601526080808201519086015260a090810151908501529481019460c090930192600101612df9565b9091503d8083833e612e6c8183614630565b81019060209081818403126108e25780519067ffffffffffffffff82116106b6570182601f820112156108e257805191612ea5836146df565b93612eb36040519586614630565b838552818501908260c08096028501019381851161111d578301915b848310612ee3575050505050509038612ddc565b858383031261111d57838691604051612efb816145c8565b612f04866146cb565b8152612f118387016146cb565b8382015260408601516040820152606080870151908201526080808701519082015260a08087015190820152815201920191612ecf565b50346103fa5760203660031901126103fa57612f626144d0565b612f6a614874565b506001600160a01b03604051917f54ff42e40000000000000000000000000000000000000000000000000000000083526024600484015216602482015260808160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4908115610b7a5761042f929161201157506040519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b5060403660031901126103fa576130266144fc565b60243567ffffffffffffffff8111610f1757613046903690600401614560565b9161304f614b56565b6001341461323257604051906355d2ad9160e01b8252600d600483015234602483015284604483015260c08260648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49182156132275785926131ec575b5060608092016130b4815130614cef565b5160ff60405192633474241b60e01b8452601f6004850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216938460c484015261012060e484015283838061311461012482018a866147df565b85610104830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af493841561068057600093849085966131a4575b509461062d929161317a7f44500c7f248ef0d57227e196431b4b321743dceea2bbbc87731cac8c824649fc973390614972565b604051958695600187526020870152604086015284015260a06080840152339660a08401916147df565b80965082809495969392503d83116131e5575b6131c18183614630565b810103126103fa57508351602085015160409095015194909392919061062d613147565b503d6131b7565b90915060c03d60c011613220575b6132048183614630565b810160c082820312610a545761321991614824565b90386130a3565b503d6131fa565b6040513d87823e3d90fd5b60046040517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b50346103fa576020806003193601126106ba57818160405161327d816145f8565b8281520152604051907f0819334900000000000000000000000000000000000000000000000000000000825260246004830152600435602483015260408260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af491821561223f5783926132f5575b60408051845181528385015181850152f35b9091506040813d60401161333b575b8161331160409383614630565b81010312610f1757604092508183519161332a836145f8565b8051835201518282015290386132e3565b3d9150613304565b50346103fa5760803660031901126103fa5761335d6144d0565b6024356044356064358473__$aee754128d0d1775ed250cc6ad74f33f25$__94853b156106ba57816001600160a01b039160c4604051809481937f92bb151400000000000000000000000000000000000000000000000000000000835260106004840152602e602484015216998a60448301528960648301528860848301528760a48301525af48015610b7a5761342f575b50506040805193845260208401929092529082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190606090a380f35b613438906145e4565b6106b65784386133ef565b50346103fa57806003193601126103fa5760c0601754601854601954601a54601b5491601c5493604051958652602086015260408501526060840152608083015260a0820152f35b50346103fa5760a03660031901126103fa576134a56144fc565b60243567ffffffffffffffff8111610f17576134c5903690600401614560565b604435916064359285608435958615158097036106ba576134e4614cab565b73__$481ca34c951945c71f6bbcbbb91702f088$__803b15610f175760ff91839160405180809581947fa5ac5cd7000000000000000000000000000000000000000000000000000000008352601f6004840152169b8c602483015260c0604483015261355460c483018c8c6147df565b908960648401528c608484015260a483015203915af48015610b7a576135a9575b50507f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f936109ed9160405194859485614800565b6135b2906145e4565b610a54578538613575565b50346103fa5760403660031901126103fa5767ffffffffffffffff906004358281116106ba576135f1903690600401614560565b602435936135fd614cab565b811161379c5761360e600a5461458e565b601f8111613739575b508293601f8211600114613697578184957f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb8959161368c575b508260011b906000198460031b1c191617600a555b80600b556136806040519384936040855260408501916147df565b9060208301520390a180f35b905083013538613650565b600a8452601f198216947fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890855b8781106137215750837f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb8969710613707575b5050600182811b01600a55613665565b840135600019600385901b60f8161c1916905538806136f7565b909160206001819285890135815501930191016136c5565b600a84527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f830160051c81019160208410613792575b601f0160051c01905b8181106137875750613617565b84815560010161377a565b9091508190613771565b602483634e487b7160e01b81526041600452fd5b50346103fa5760403660031901126103fa576137ca6144fc565b6137d26144e6565b60405163844899f160e01b815260ff831660048201526001600160a01b038216602482015290919073__$481ca34c951945c71f6bbcbbb91702f088$__90602081604481855af480156132275785906138cc575b6040915060848251809481936362195e9f60e01b8352601f6004840152602480840152602a604484015260648301525af49081156108ee577f66b1fd337cea274cb38fa0696247bba4469e95f3be5ce7d9c9a974d9a11e4bd5926138978560209460ff9489916138ac575b50614972565b6001600160a01b03604051951685521692a280f35b6138c5915060403d604011612238576122278183614630565b5038613891565b506020813d6020116138f7575b816138e660209383614630565b810103126103e25760409051613826565b3d91506138d9565b50346103fa57806003193601126103fa576040517ffb1af52e000000000000000000000000000000000000000000000000000000008152601f6004820152602a6024820152818160448173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610b7a5782916139d1575b5060405190602092602083016020845282518091526040840194602060408360051b870101940192955b8287106139a55785850386f35b9091929382806139c1600193603f198a8203018652885161450c565b9601920196019592919092613998565b90503d8083833e6139e28183614630565b810160209081838203126108e257825167ffffffffffffffff93848211610a5457019080601f830112156106b657815190613a1c826146df565b94613a2a6040519687614630565b828652848087019360051b8501019382851161111d57858101935b858510613a5957505050505050503861396e565b8451838111611119578791613a7386848094870101614763565b815201940193613a45565b50346103fa5760403660031901126103fa57613a986144fc565b613aa0614b56565b60ff604051917fda4382fa000000000000000000000000000000000000000000000000000000008352601f6004840152602480840152602a604484015216806064830152602435608483015260808260a48173__$481ca34c951945c71f6bbcbbb91702f088$__5af4801561223f578392849385918693613b69575b5090613b4b7fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff98276993923390614972565b6040805195865260208601919091528401523392806060810161062d565b94505050506080823d608011613bad575b81613b8760809383614630565b81010312610f175781516020830151604084015160609094015190939091613b4b613b1c565b3d9150613b7a565b50346103fa57806003193601126103fa576020613bd0614b91565b604051908152f35b50346103fa57806003193601126103fa57602060405160128152f35b50346103fa5760203660031901126103fa57600435613c11614b56565b8173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__803b156106ba5781604491604051928380927f0189422a000000000000000000000000000000000000000000000000000000008252601760048301528760248301525af48015610b7a57613cac575b50506040519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a2600160095580f35b613cb5906145e4565b6106ba578138613c76565b50346103fa5760203660031901126103fa576004358173__$d26c4b6c55cbf068c0037866f9978a3889$__803b156106ba5781604491604051928380927fe64e5c2a000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a57613d6b575b50506040519081527ffcd5abced4a14fd82dd75efe917d75c414fce0581307a6c5616350e6d4cc86b360203392a280f35b613d74906145e4565b6106ba578138613d3a565b50346103fa5760203660031901126103fa576004358173__$d26c4b6c55cbf068c0037866f9978a3889$__803b156106ba5781604491604051928380927f0b7fb741000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a57613e2a575b50506040519081527fa580c6f3f2d7189dd4058538c62d03023016a7c3b7925688501462a6e39e345460203392a280f35b613e33906145e4565b6106ba578138613df9565b50346103fa5760603660031901126103fa57613e586144d0565b613e606144e6565b6044359160406001600160a01b0382169485815260016020522033600052602052604060002054936000198503613e9d575b506119dc9350614a61565b838510613f39578015613f08573315613ed7576119dc94849160005260016020526040600020336000526020520360406000205538613e92565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606490fd5b50346103fa57602090816003193601126103fa576040517faaa964aa000000000000000000000000000000000000000000000000000000008152602460048201526004356024820152828160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49182156103ee578092613ffe575b50506001600160a01b0360405191168152f35b9091508282813d831161402f575b6140168183614630565b810103126103fa5750614028906146cb565b3880613feb565b503d61400c565b50346103fa57806003193601126103fa576020600254604051908152f35b50346103fa5760203660031901126103fa576004359073__$d26c4b6c55cbf068c0037866f9978a3889$__803b156106ba5781604491604051928380927fe72267b6000000000000000000000000000000000000000000000000000000008252602460048301528760248301525af48015610b7a576140ff575b50906040519081527f5d20e16c575e19d37142327b2bb4d5017477cfa3a514b0523564afa605104c8060203392a280f35b614108906145e4565b386140ce565b50346103fa5760403660031901126103fa576119dc61412b6144d0565b6024359033614e7a565b50346103fa57806003193601126103fa57604051908082600354916141598361458e565b92838352602094600191866001821691826000146141e3575050600114614189575b5050611dd892500383614630565b90859250600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8583106141cb575050611dd89350820101388061417b565b805483890185015287945086939092019181016141b3565b9250935050611dd894915060ff191682840152151560051b820101388061417b565b50346103fa5760203660031901126103fa57602a54806080526020608001602a83527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d291835b8181106144725784614262607f1985016080614630565b608051815b8181106142a55760408051338152600435602082015284917f73c58cffa8ee146b206627c2c322e2d5bba6c275790dd2cb73f1afdd7fb0d76f91a180f35b6142b0816080614668565b51835260236020526040832090604051916142ca836145c8565b6001600160a01b03815460ff8116855260081c1660208401526001810154604084015260028101546060840152600381015460808401526040519081866004830154926143168461458e565b8084529360018116908115614450575060011461440c575b5061433b92500382614630565b60a0830152600435614351604084015142614692565b111561440357614362816080614668565b51604051906362195e9f60e01b8252601f6004830152602480830152602a6044830152606482015260408160848173__$481ca34c951945c71f6bbcbbb91702f088$__5af48015613227576001936143cf9287926143d5575b50602001516001600160a01b031690614972565b01614267565b6001600160a01b039192506143fa60209160403d604011612238576122278183614630565b509291506143bb565b600191506143cf565b6004018852505060208620869183915b818410614434575050602061433b928201018861432e565b602091925080600191548386880101520192019190839161441c565b90506020925061433b94915060ff191682840152151560051b8201018861432e565b835483526001938401936020909301920161424b565b60005b83811061449b5750506000910152565b818101518382015260200161448b565b906020916144c481518092818552858086019101614488565b601f01601f1916010190565b600435906001600160a01b03821682036103e257565b602435906001600160a01b03821682036103e257565b6004359060ff821682036103e257565b9060c060a061455d9360ff81511684526001600160a01b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151918160a082015201906144ab565b90565b9181601f840112156103e25782359167ffffffffffffffff83116103e257602083818601950101116103e257565b90600182811c921680156145be575b60208310146145a857565b634e487b7160e01b600052602260045260246000fd5b91607f169161459d565b60c0810190811067ffffffffffffffff82111761162257604052565b67ffffffffffffffff811161162257604052565b6040810190811067ffffffffffffffff82111761162257604052565b6080810190811067ffffffffffffffff82111761162257604052565b90601f8019910116810190811067ffffffffffffffff82111761162257604052565b60409060031901126103e2576004359060243590565b805182101561467c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161469f57565b634e487b7160e01b600052601160045260246000fd5b91908260409103126103e2576020825192015190565b51906001600160a01b03821682036103e257565b67ffffffffffffffff81116116225760051b60200190565b519060ff821682036103e257565b67ffffffffffffffff811161162257601f01601f191660200190565b81601f820112156103e257805161473781614705565b926147456040519485614630565b818452602082840101116103e25761455d9160208085019101614488565b919060c0838203126103e2576040519061477c826145c8565b8193614787816146f7565b8352614795602082016146cb565b602084015260408101516040840152606081015160608401526080810151608084015260a08101519167ffffffffffffffff83116103e25760a0926147da9201614721565b910152565b908060209392818452848401376000828201840152601f01601f1916010190565b9061481a90604093969594966060845260608401916147df565b9460208201520152565b91908260c09103126103e25760405161483c816145c8565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6040519061488182614614565b60006060838281528260208201528260408201520152565b519081151582036103e257565b908160809103126103e2576148e86060604051926148c384614614565b6148cc816146cb565b8452602081015160208501526040810151604085015201614899565b606082015290565b9190820180921161469f57565b91908260809103126103e25760405161491581614614565b6060808294614923816146cb565b845260208101516020850152604081015160408501520151910152565b6040519061494d826145c8565b8160a06000918281528260208201528260408201528260608201528260808201520152565b9073__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__91823b156103e25761012460009260405194859384927ffb7a2c50000000000000000000000000000000000000000000000000000000008452601f6004850152601060248501526024604485015260176064850152600a60848501526001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001660a48601527f000000000000000000000000000000000000000000000000000000000000000060c486015260e4850152166101048301525af4801561068057614a565750565b614a5f906145e4565b565b916001600160a01b03808416928315614b3e5716928315614b0d5760009083825281602052604082205490838210614adb575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6024604051634b637e8f60e11b815260006004820152fd5b600260095414614b67576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480614c82575b15614bec577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152614c7c816145c8565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614614bc3565b6001600160a01b03600854163303614cbf57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b6001600160a01b0316908115614b0d577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614d316000946002546148f0565b60025584845283825260408420818154019055604051908152a3565b92906040519160208301917f23b872dd0000000000000000000000000000000000000000000000000000000083526001600160a01b039485809216602486015216604484015260648301526064825260a082019082821067ffffffffffffffff83111761162257602092600092604052519082865af115610680576000513d614e1257508082163b155b614ddf575050565b60249250604051917f5274afe7000000000000000000000000000000000000000000000000000000008352166004820152fd5b60011415614dd7565b600b54601b5490919015614e6d5781810291818304148115171561469f57614e5d614e54670de0b6b3a7640000614e6894048093614692565b91601a546148f0565b601a556010546148f0565b601055565b614e6891506010546148f0565b6001600160a01b03809116918215613f085716918215613ed75760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60ff8114614f315760ff811690601f8211614f075760405191614efd836145f8565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614f448361458e565b80835292602090600190818116908115614fd05750600114614f6f575b505061455d92500382614630565b91509260056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0936000925b828410614fb8575061455d9450505081016020013880614f61565b85548785018301529485019486945092810192614f9d565b9150506020925061455d94915060ff191682840152151560051b8201013880614f61565b60ff81146150165760ff811690601f8211614f075760405191614efd836145f8565b506040516006548160006150298361458e565b80835292602090600190818116908115614fd0575060011461505357505061455d92500382614630565b91509260066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f936000925b82841061509c575061455d9450505081016020013880614f61565b85548785018301529485019486945092810192615081565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161512c57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156103ee5780516001600160a01b0381161561512357918190565b50809160019190565b50505060009160039190565b60048110156151f0578061514a575050565b6001810361517c5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b600281036151b557602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146151bf5750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212203b1a7ed2e9b9c5f0461d36e4257e3826c99cf1543dfc140b63a58fe5b8b7a2c364736f6c63430008160033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220d8ebecafd4876e32cf1b515b0281dcdce67cf4bc4bc1cc5da1139f64aa5888c664736f6c63430008160033",
  "libraries": {
    "Token": "0x7341A3Bd560F830AB179729763dA8329a4EaE65B",
    "Share": "0x8c86C104a2358dC47530378f11aeD5d90CD3bC5C",
    "Staking": "0x1f716bc526465101349273087367ea9850CdFC17",
    "Member": "0xF09abe8C2cbE0c6017CB4b50Cd62eb6CbCA84178",
    "Curation": "0xBf5a37cA460AbA8b319c645FED7eeE0Ac09ab69c",
    "SpaceHelper": "0xD80E170Cd13CFca2b4509157E455A6a762199e80"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}