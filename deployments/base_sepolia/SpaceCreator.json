{
  "address": "0x415c40Be74B1f4F25ae3b4727D327984C836bdB2",
  "abi": [],
  "transactionHash": "0xbcde2137d6397f549d89221169d8b899dd08b31d7e8494f9d27c7f5fce88b00b",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x415c40Be74B1f4F25ae3b4727D327984C836bdB2",
    "transactionIndex": 7,
    "gasUsed": "5337733",
    "logsBloom": "0x
    "blockHash": "0x242bb4b75408f825a58c499fa12bc866ce8f8eabecc272c6e6b95aaa815bda15",
    "transactionHash": "0xbcde2137d6397f549d89221169d8b899dd08b31d7e8494f9d27c7f5fce88b00b",
    "logs": [],
    "blockNumber": 16054535,
    "cumulativeGasUsed": "6275626",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9d3a85cc2e7236f15f84ebf7696f574d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceCreator.sol\":\"SpaceCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1450},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/TransferUtil.sol\\\";\\nimport \\\"./lib/Share.sol\\\";\\nimport \\\"./lib/Staking.sol\\\";\\nimport \\\"./lib/Member.sol\\\";\\nimport \\\"./lib/Token.sol\\\";\\nimport \\\"./lib/Curation.sol\\\";\\nimport \\\"./lib/SpaceHelper.sol\\\";\\nimport \\\"./lib/Events.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./interfaces/ISpace.sol\\\";\\nimport \\\"./interfaces/ISpaceFactory.sol\\\";\\n\\ncontract Space is ISpace, ERC20, ERC20Permit, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  address public immutable factory;\\n  uint256 public immutable appId;\\n\\n  Config public config;\\n\\n  /** Module state */\\n  Token.State public token;\\n  Share.State public share;\\n  Staking.State public staking;\\n  Member.State public member;\\n  Curation.State public curation;\\n\\n  /** Sets */\\n  EnumerableSet.Bytes32Set private subscriptionIds;\\n  EnumerableSet.UintSet private orderIds;\\n  EnumerableSet.AddressSet private vestingAddresses;\\n\\n  constructor(\\n    uint256 _appId,\\n    address _factory,\\n    address _founder,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) Ownable(_founder) {\\n    appId = _appId;\\n    factory = _factory;\\n    config = Config(_uri, 0.3 ether, 0.02 ether);\\n  }\\n\\n  fallback() external payable {}\\n\\n  receive() external payable {}\\n\\n  function initialize() external {\\n    (uint8 planId, uint256 premint) = SpaceHelper.initialize(member, share, curation, staking, token, factory, owner());\\n\\n    _mint(address(this), premint);\\n    emit Events.ContributorAdded(owner());\\n    emit Events.PlanCreated(planId, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, 0);\\n  }\\n\\n  function buy(uint256 minReturnAmount) external payable nonReentrant returns (BuyInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.buy(token, msg.value, minReturnAmount);\\n    uint256 tokenAmount = info.tokenAmountAfterFee;\\n    if (isSwap) {\\n      tokenAmount = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n      _mint(msg.sender, tokenAmount);\\n    } else {\\n      _distributeCreatorRevenue(info.creatorFee);\\n      _mint(msg.sender, tokenAmount);\\n      _mint(address(this), info.creatorFee);\\n      _mint(factory, info.protocolFee);\\n    }\\n\\n    emit Events.Trade(\\n      Events.TradeType.Buy,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      isSwap ? 0 : info.creatorFee,\\n      isSwap ? 0 : info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  function sell(\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external payable nonReentrant returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    _distributeCreatorRevenue(info.creatorFee);\\n    _burn(address(this), info.tokenAmountAfterFee);\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n\\n    emit Events.Trade(\\n      Events.TradeType.Sell,\\n      msg.sender,\\n      info.ethAmount,\\n      tokenAmount,\\n      info.creatorFee,\\n      info.protocolFee,\\n      IERC20(address(this)).balanceOf(msg.sender)\\n    );\\n  }\\n\\n  // ================Member======================\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external onlyOwner {\\n    uint8 id = Member.createPlan(member, _uri, price, minEthAmount);\\n    emit Events.PlanCreated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function updatePlan(\\n    uint8 id,\\n    string calldata _uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external onlyOwner {\\n    Member.updatePlan(member, id, _uri, price, minEthAmount, isActive);\\n    emit Events.PlanUpdated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function getPlans() external view returns (Plan[] memory) {\\n    return Member.getPlans(member);\\n  }\\n\\n  function subscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    _subscribe(planId, amount, false);\\n  }\\n\\n  function subscribeByEth(uint8 planId) external payable nonReentrant {\\n    uint256 ethAmount = msg.value;\\n    if (ethAmount == 1) revert Errors.EthAmountIsZero();\\n\\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\\n    _mint(address(this), info.tokenAmountAfterFee);\\n    _subscribe(planId, info.tokenAmountAfterFee, true);\\n  }\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribeDuration, uint256 remainingDuration) = Member\\n      .unsubscribe(member, curation, subscriptionIds, planId, amount);\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration, remainingDuration);\\n  }\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Subscription memory subscription = member.subscriptions[ids[i]];\\n\\n      if (block.timestamp - subscription.startTime <= mintPastDuration) {\\n        continue;\\n      }\\n\\n      (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, ids[i]);\\n      _processSubscriptionRevenue(consumedAmount, subscription.account);\\n    }\\n\\n    emit Events.DistributeSubscriptionRewards(msg.sender, mintPastDuration);\\n  }\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, id);\\n    _processSubscriptionRevenue(consumedAmount, account);\\n    emit Events.DistributeSingleSubscription(planId, account);\\n  }\\n\\n  function getSubscription(uint8 planId) external view returns (Subscription memory) {\\n    return Member.getSubscription(member, planId);\\n  }\\n\\n  function getSubscriptions() external view returns (Subscription[] memory) {\\n    return Member.getSubscriptions(member, subscriptionIds);\\n  }\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256) {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    return Member.calculateConsumedAmount(member, id, timestamp);\\n  }\\n\\n  //================Share=======================\\n\\n  function addContributor(address account) external onlyOwner {\\n    Share.addContributor(share, account);\\n    emit Events.ContributorAdded(account);\\n  }\\n\\n  function distributeShareRewards() external {\\n    Share.distribute(share);\\n    emit Events.ShareRewardsDistributed(msg.sender);\\n  }\\n\\n  function claimShareRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Share.claimRewards(share);\\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\\n  }\\n\\n  function transferShares(address to, uint256 amount) external nonReentrant {\\n    Share.transferShares(share, to, amount);\\n    emit Events.SharesTransferred(msg.sender, to, amount);\\n  }\\n\\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256 orderId) {\\n    orderId = Share.createShareOrder(share, orderIds, amount, price);\\n    emit Events.ShareOrderCreated(orderId, msg.sender, amount, price);\\n  }\\n\\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\\n    (uint256 amount, uint256 price) = Share.cancelShareOrder(share, orderIds, orderId);\\n    emit Events.ShareOrderCanceled(orderId, msg.sender, amount, price);\\n  }\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\\n  }\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory) {\\n    return Share.getShareOrders(share, orderIds);\\n  }\\n\\n  function getContributors() external view returns (Contributor[] memory) {\\n    return Share.getContributors(share);\\n  }\\n\\n  function currentContributorRewards(address account) external view returns (uint256) {\\n    return Share.currentContributorRewards(share, account);\\n  }\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external {\\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\\n  }\\n\\n  function claimVesting() external returns (uint256 amount) {\\n    amount = Share.claimVesting(share);\\n    emit Events.VestingClaimed(msg.sender, amount);\\n  }\\n\\n  function removeVesting(address beneficiary) external {\\n    Share.removeVesting(share, vestingAddresses, beneficiary);\\n    emit Events.VestingRemoved(msg.sender, beneficiary);\\n  }\\n\\n  function getVestings() external view returns (VestingInfo[] memory) {\\n    return Share.getVestings(share, vestingAddresses);\\n  }\\n\\n  //================Staking=======================\\n\\n  function currentUserRewards(address account) external view returns (uint256) {\\n    return Staking.currentUserRewards(staking, account);\\n  }\\n\\n  function getStaker(address account) external view returns (Staker memory) {\\n    return Staking.getStaker(staking, account);\\n  }\\n\\n  function stake(uint256 amount) external nonReentrant {\\n    Staking.stake(staking, amount);\\n    emit Events.Staked(msg.sender, amount);\\n  }\\n\\n  function unstake(uint256 amount) external nonReentrant {\\n    Staking.unstake(staking, amount);\\n    emit Events.Unstaked(msg.sender, amount);\\n  }\\n\\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Staking.claim(staking);\\n    emit Events.StakingClaimed(msg.sender, amount);\\n  }\\n\\n  //================Curation=======================\\n\\n  // create self invitation code\\n  function createCode(bytes32 _code) external {\\n    Curation.createCode(curation, _code);\\n    emit Events.CodeCreated(msg.sender, _code);\\n  }\\n\\n  // update self invitation code\\n  function updateCode(bytes32 _code) external {\\n    Curation.updateCode(curation, _code);\\n    emit Events.CodeUpdated(msg.sender, _code);\\n  }\\n\\n  function bindCode(bytes32 _code) external {\\n    Curation.bindCode(curation, _code);\\n    emit Events.CodeBound(msg.sender, _code);\\n  }\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory) {\\n    return Curation.getUser(curation, account);\\n  }\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory) {\\n    return Curation.getUserByCode(curation, code);\\n  }\\n\\n  function getCodeByCurator(address account) external view returns (bytes32) {\\n    return Curation.getCodeByCurator(curation, account);\\n  }\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address) {\\n    return Curation.getCuratorByCode(curation, code);\\n  }\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external onlyOwner {\\n    Curation.updateTier(curation, id, memberCountBreakpoint, rebateRate);\\n    emit Events.TierUpdated(id, memberCountBreakpoint, rebateRate);\\n  }\\n\\n  function getTier(uint256 id) external view returns (Tier memory) {\\n    return Curation.getTier(curation, id);\\n  }\\n\\n  function claimCurationRewards() external nonReentrant returns (uint256 rewards) {\\n    rewards = Curation.claimRewards(curation);\\n    emit Events.CurationRewardsClaimed(msg.sender, rewards);\\n  }\\n\\n  //============Others===================\\n\\n  function updateConfig(string calldata uri, uint256 stakingRevenuePercent) external onlyOwner {\\n    config.uri = uri;\\n    config.stakingRevenuePercent = stakingRevenuePercent;\\n    emit Events.SpaceConfigUpdated(uri, stakingRevenuePercent);\\n  }\\n\\n  /**\\n   * deposit space to for share holder\\n   * @param amount token amount\\n   */\\n  function depositSpaceToken(uint256 amount) external nonReentrant {\\n    share.daoRevenue += amount;\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Events.TokenDeposited(amount);\\n  }\\n\\n  function _subscribe(uint8 planId, uint256 amount, bool isUsingEth) internal {\\n    (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) = Member.subscribe(\\n      member,\\n      token,\\n      curation,\\n      subscriptionIds,\\n      planId,\\n      amount\\n    );\\n\\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\\n    emit Events.Subscribed(planId, isUsingEth, msg.sender, amount, increasingDuration, remainingDuration);\\n  }\\n\\n  function _distributeCreatorRevenue(uint256 creatorFee) internal {\\n    SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorFee);\\n  }\\n\\n  function _processSubscriptionRevenue(uint256 revenue, address account) internal {\\n    SpaceHelper.processSubscriptionRevenue(member, share, curation, staking, config, factory, appId, revenue, account);\\n  }\\n}\\n\",\"keccak256\":\"0x82ee41635a45819f3ee4b587163ee2bb4b0b69c64a5108dc182a5b1cfbc439ad\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount) external;\\n\\n  function subscribeByEth(uint8 planId) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x660eed820aba75b1483e6e3df81f84f55596d03ae7f5dcca12d9273f2e2e9b35\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\nstruct CreateSpaceInput {\\n  uint256 appId;\\n  string spaceName;\\n  string symbol;\\n  string uri;\\n  uint256 preBuyEthAmount;\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(CreateSpaceInput calldata input) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x327ec8357fe2744fcb2902c1dae18b867ab35fb21073b1084da13666ae44d4df\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0xe53b8f71c73cbeb044645cc7d6296501646674b96e3aa9f461c109be125f8cda\",\"license\":\"MIT\"},\"contracts/lib/Curation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Curation {\\n\\n\\n  struct State {\\n    uint256 curatorCount;\\n    mapping(address => CurationUser) users;\\n    // @dev mapping of referral code to curator\\n    mapping(bytes32 => address) curators;\\n    // @dev mapping of curator to referral code\\n    mapping(address => bytes32) codes;\\n    // link between user <> tier\\n    mapping(address => bool) isActives; // TODO:\\n    mapping(uint256 => Tier) tiers;\\n  }\\n\\n  // create self invitation code\\n  function createCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    address account = msg.sender;\\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\\n\\n    if (!self.users[account].registered) {\\n      self.users[account] = CurationUser(address(0), 0, 0, true);\\n      ++self.curatorCount;\\n    }\\n    self.codes[account] = code;\\n    self.curators[code] = account;\\n  }\\n\\n  // update self invitation code\\n  function updateCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\\n\\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\\n\\n    bytes32 prevCode = self.codes[msg.sender];\\n    self.curators[code] = msg.sender;\\n    self.codes[msg.sender] = code;\\n    delete self.curators[prevCode];\\n  }\\n\\n  // bind code\\n  function bindCode(State storage self, bytes32 code) external {\\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\\n      revert Errors.CannotInviteYourself();\\n    }\\n\\n    address curator = self.curators[code];\\n\\n    CurationUser storage me = self.users[msg.sender];\\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\\n\\n    if (!me.registered) {\\n      me.registered = true;\\n      ++self.curatorCount;\\n    }\\n    me.curator = curator;\\n  }\\n\\n  function increaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount += 1;\\n    }\\n  }\\n\\n  function decreaseMemberCount(State storage self, address invitee) external {\\n    CurationUser memory inviteeUser = self.users[invitee];\\n    if (inviteeUser.curator != address(0)) {\\n      self.users[inviteeUser.curator].memberCount -= 1;\\n    }\\n  }\\n\\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\\n    return self.users[account];\\n  }\\n\\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\\n    return self.users[self.curators[code]];\\n  }\\n\\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\\n    return self.codes[curator];\\n  }\\n\\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\\n    return self.curators[code];\\n  }\\n\\n  function initTiers(State storage self) external {\\n    self.tiers[0].memberCountBreakpoint = 10;\\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\\n\\n    self.tiers[1].memberCountBreakpoint = 20;\\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\\n\\n    self.tiers[2].memberCountBreakpoint = 40;\\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\\n  }\\n\\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\\n    self.tiers[id].rebateRate = rebateRate;\\n  }\\n\\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\\n    return self.tiers[id];\\n  }\\n\\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\\n    Tier memory tier0 = self.tiers[0];\\n    if (memberCount <= tier0.memberCountBreakpoint) {\\n      return tier0.rebateRate;\\n    }\\n\\n    Tier memory tier1 = self.tiers[1];\\n    if (memberCount <= tier1.memberCountBreakpoint) {\\n      return tier1.rebateRate;\\n    }\\n    return self.tiers[2].rebateRate;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 rewards) {\\n    CurationUser storage user = self.users[msg.sender];\\n    if (user.rewards > 0) {\\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\\n      rewards = user.rewards;\\n      user.rewards = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x45bb39227b3e42e8d050bdf65fa472d389840c2da0fe6ea0a01a4c96f52de2c5\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error InvalidAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xf2d247465c7668c8db648da5543962ad812df27351e22cf88dfbe391fd1d9930\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd113d7e7e933b2a721cd92f11806d05adbb3fc7eca38d25c64d05339a4a1ccbb\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8 planId) {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    planId = self.planIndex;\\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\\n    ++self.planIndex;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    if (price == 0) revert Errors.PriceIsZero();\\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    Token.State memory token,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\\n\\n    Plan memory plan = self.plans[planId];\\n    if (!plan.isActive) revert Errors.PlanNotActive();\\n\\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n\\n      Curation.increaseMemberCount(curation, msg.sender);\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    if (amount == 0) revert Errors.AmountIsZero();\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(\\n    State storage self,\\n    Curation.State storage curation,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    bytes32 id\\n  ) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    /** expired */\\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\\n      Curation.decreaseMemberCount(curation, subscription.account);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n    } else {\\n      subscription.startTime = block.timestamp;\\n      subscription.amount -= consumedAmount;\\n      subscription.duration = remainingDuration;\\n    }\\n\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscription(State storage self, uint8 planId) external view returns (Subscription memory) {\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    return self.subscriptions[id];\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function calculateIncreasingDuration(\\n    Token.State memory token,\\n    Plan memory plan,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint256 duration) {\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    duration = tokenAmount / info.tokenAmountAfterFee;\\n  }\\n\\n  function calculateMinimumSubscriptionTokens(\\n    Token.State memory token,\\n    Plan memory plan\\n  ) internal pure returns (uint256) {\\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0xbf18c382e8d413e4c6457907af26027a8735bce25860970470b29896f0880899\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct State {\\n    uint256 daoRevenue;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    Contributor memory contributor = self.contributors[msg.sender];\\n    if (contributor.account == address(0)) {\\n      revert Errors.OnlyContributor();\\n    }\\n    if (contributor.shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n    if (to == address(0) || msg.sender == to) {\\n      revert Errors.InvalidRecipient();\\n    }\\n\\n    if (self.contributors[to].account == address(0)) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256 orderId) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    orderId = self.orderIndex;\\n    self.orders[orderId] = Order(msg.sender, amount, price);\\n    orderIds.add(orderId);\\n    self.orderIndex++;\\n  }\\n\\n  function cancelShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId\\n  ) external returns (uint256 amount, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\\n    amount = order.amount;\\n    price = order.price;\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\\n    uint256 ethAmount = order.price * amount;\\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\\n    if (self.contributors[order.seller].shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (self.contributors[msg.sender].account == address(0)) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (OrderInfo[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    OrderInfo[] memory orders = new OrderInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Order memory order = self.orders[ids[i]];\\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    if (self.contributors[account].account != address(0)) {\\n      revert Errors.ContributorExisted();\\n    }\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(account, 0, 0, 0);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      info[i] = self.contributors[self.contributorAddresses[i]];\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\\n      revert Errors.InvalidBeneficiary();\\n    }\\n    if (vestingAddresses.contains(beneficiary)) {\\n      revert Errors.BeneficiaryExists();\\n    }\\n\\n    Contributor memory payer = self.contributors[msg.sender];\\n\\n    if (payer.shares < allocation) {\\n      revert Errors.AllocationTooLarge();\\n    }\\n\\n    if (self.contributors[beneficiary].account == address(0)) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external returns (uint256) {\\n    return _claimVesting(self, msg.sender);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n\\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      if (self.contributors[vesting.payer].shares <= releasable) {\\n        revert Errors.InsufficientShares();\\n      }\\n\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoRevenue = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0xc47ba77a2b439dce10896ccb0fa270b61de44be3a7e60b3b5f62c93ded0ab919\",\"license\":\"MIT\"},\"contracts/lib/SpaceCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../Space.sol\\\";\\n\\nlibrary SpaceCreator {\\n  function createSpace(CreateSpaceInput calldata input) external returns (address) {\\n    Space space = new Space(input.appId, address(this), msg.sender, input.spaceName, input.symbol, input.uri);\\n    space.initialize();\\n    return address(space);\\n  }\\n}\\n\",\"keccak256\":\"0x3d92a5fd8412d00e1479beedaa7441491fa0f14181fd584762e82d16293cce1c\",\"license\":\"MIT\"},\"contracts/lib/SpaceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Member.sol\\\";\\nimport \\\"./Share.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Curation.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceHelper {\\n  using SafeERC20 for IERC20;\\n\\n  function initialize(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Token.State storage token,\\n    address factory,\\n    address owner\\n  ) external returns (uint8 planId, uint256 premint) {\\n    if (msg.sender != factory) revert Errors.OnlyFactory();\\n\\n    Share.addContributor(share, owner);\\n\\n    share.contributors[owner].shares = SHARES_SUPPLY;\\n\\n    Curation.initTiers(curation);\\n\\n    planId = Member.createPlan(member, \\\"\\\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\\n\\n    token.x = Token.initialX;\\n    token.y = Token.initialY;\\n    token.k = Token.initialK;\\n\\n    BuyInfo memory info = Token.buy(token, PREMINT_ETH_AMOUNT, 0);\\n\\n    premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n  }\\n\\n  function swap(\\n    mapping(address => address) storage spaceToFounder,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount) {\\n    if (!isSpace(spaceToFounder, tokenIn) || !isSpace(spaceToFounder, tokenOut) || tokenIn == tokenOut) {\\n      revert Errors.InvalidTokens();\\n    }\\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\\n  }\\n\\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\\n    amount = address(this).balance;\\n    TransferUtil.safeTransferETH(feeReceiver, amount);\\n  }\\n\\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\\n    }\\n  }\\n\\n  function isSpace(\\n    mapping(address => address) storage spaceToFounder,\\n    address spaceAddress\\n  ) public view returns (bool) {\\n    return spaceToFounder[spaceAddress] != address(0);\\n  }\\n\\n  function sell(\\n    Token.State storage token,\\n    address factory,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    info = Token.sell(token, tokenAmount, minReturnAmount);\\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n  }\\n\\n  // deduct protocolFee and appFee\\n  function deductSubscriptionFees(\\n    Member.State storage member,\\n    address factory,\\n    uint256 appId,\\n    uint256 subscriptionFeePercent,\\n    uint256 revenue\\n  ) public returns (uint256 creatorRevenue) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n\\n    appFee = (revenue * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (revenue * subscriptionFeePercent) / 1 ether;\\n    creatorRevenue = revenue - protocolFee - appFee;\\n    member.subscriptionIncome += creatorRevenue;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n\\n  function distributeCreatorRevenue(\\n    Staking.State storage staking,\\n    Share.State storage share,\\n    uint256 stakingRevenuePercent,\\n    uint256 creatorRevenue\\n  ) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 stakingRevenue = (creatorRevenue * stakingRevenuePercent) / 1 ether;\\n      uint256 daoRevenue = creatorRevenue - stakingRevenue;\\n      staking.stakingRevenue += stakingRevenue;\\n      share.daoRevenue += daoRevenue;\\n    } else {\\n      share.daoRevenue += creatorRevenue;\\n    }\\n  }\\n\\n  function processSubscriptionRevenue(\\n    Member.State storage member,\\n    Share.State storage share,\\n    Curation.State storage curation,\\n    Staking.State storage staking,\\n    Config storage config,\\n    address factory,\\n    uint256 appId,\\n    uint256 revenue,\\n    address account\\n  ) external {\\n    if (revenue > 0) {\\n      uint256 creatorRevenue = deductSubscriptionFees(member, factory, appId, config.subscriptionFeePercent, revenue);\\n\\n      CurationUser memory user = curation.users[account];\\n\\n      if (user.curator != address(0)) {\\n        CurationUser storage curatorUser = curation.users[user.curator];\\n        uint256 rebateRate = Curation.getRebateRate(curation, curatorUser.memberCount);\\n\\n        uint256 rewards = (creatorRevenue * rebateRate) / 1 ether;\\n        curatorUser.rewards += rewards;\\n        creatorRevenue = creatorRevenue - rewards;\\n      }\\n\\n      SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorRevenue);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfae6e82e444e97dfec3bc468bdf1e71cd7a36f8d126a54e044dcdb5fc733df0d\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased; // released yield\\n    uint256 stakingRevenue; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n  }\\n\\n  function unstake(State storage self, uint256 amount) external {\\n    address account = msg.sender;\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    if (amount > self.userStaked[account]) revert Errors.AmountTooLarge();\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStaker(State storage self, address account) external view returns (Staker memory) {\\n    return\\n      Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 yieldReleasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self, yieldReleasable);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    }\\n\\n    return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    if (self.yieldReleased == self.yieldAmount) return;\\n\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable == 0) return;\\n    if (IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingRevenue += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(\\n    State storage self,\\n    uint256 yieldReleasable\\n  ) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 stakingRevenue = self.stakingRevenue + yieldReleasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingRevenue) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self, 0);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    if (isChanged) {\\n      self.stakingRevenue = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0xd9bea351e8b04421944179abeffd2b464d79147e5a121c4cfe644ffa3d1236e8\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\\n\\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\\n    info = getTokenAmount(self, ethAmount);\\n\\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(\\n    State storage self,\\n    uint256 tokenAmount,\\n    uint256 minReturnAmount\\n  ) external returns (SellInfo memory info) {\\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\\n    info = getEthAmount(self, tokenAmount);\\n\\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xc0229f0a7161fbf718e2e6dc51cdb2a7e33698c7b08b762c43e752e64dedd8f9\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f081dacc6f60dc0670c32219b4c58862a955232fcb0265e69dab4fd03f0670a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57615ffd90816100228239308160330152f35b600080fdfe6080604090808252600491823610156200001857600080fd5b600091823560e01c630fb1b31c146200003057600080fd5b307f000000000000000000000000000000000000000000000000000000000000000014620001fc5760031990602036830112620001f85767ffffffffffffffff918535838111620001f45760a0818801928236030112620001f4576200009a602482018362000200565b90916064620000bc620000b1604484018762000200565b929093018662000200565b949093615d6b96878901978989108b8a1117620001e0576200011f936200012e9896938b9a98969362000110936200025d8d393589523060208a01528d33908a015260c060608a015260c08901916200023b565b9186830360808801526200023b565b9260a08185039101526200023b565b039084f08015620001d45773ffffffffffffffffffffffffffffffffffffffff1692833b15620001d1578251917f8129fc1c0000000000000000000000000000000000000000000000000000000083528183878183895af18015620001c7576200019d575b6020858551908152f35b8211620001b4575060209350815238808062000193565b80604186634e487b7160e01b6024945252fd5b84513d84823e3d90fd5b80fd5b505051903d90823e3d90fd5b5060248c60418f634e487b7160e01b835252fd5b8580fd5b8380fd5b8280fd5b903590601e198136030182121562000236570180359067ffffffffffffffff821162000236576020019181360383136200023657565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe6101a08060405234620007525762005d6b803803809162000021828562000757565b833981019060c0818303126200075257805162000041602083016200077b565b6200004f604084016200077b565b60608401516001600160401b03811162000752578562000071918601620007b5565b60808501519094906001600160401b03811162000752578662000096918301620007b5565b60a08201519096906001600160401b0381116200075257620000b99201620007b5565b60408051969192919087016001600160401b03811188821017620004fe5760405260018752603160f81b602088015285516001600160401b038111620004fe57600354600181811c9116801562000747575b6020821014620004dd57601f8111620006dd575b50806020601f8211600114620006525760009162000646575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004fe5760045490600182811c921680156200063b575b6020831014620004dd5781601f849311620005c6575b50602090601f831160011462000537576000926200052b575b50508160011b916000199060031b1c1916176004555b620001c28562000810565b95610120968752620001d481620009b5565b9561014096875260208151910120908160e052602081519101209081610100524660a0526040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019082821060018060401b03831117620004fe576040829052825190206080523060c0526001600160a01b0392831691821562000514575050600880546001600160a01b03198116831790915560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955610180938452610160928352606081016001600160401b03811182821017620004fe5760405281815260406020820191670429d069189e00008352019166470de4df820000835280519060018060401b038211620004fe57600a5490600182811c92168015620004f3575b6020831014620004dd5781601f84931162000479575b50602090601f8311600114620003ff57600092620003f3575b50508160011b916000199060031b1c191617600a555b51600b5551600c556040519261523e948562000b0d863960805185614946015260a05185614a01015260c05185614917015260e05185614995015261010051856149bb01525184612295015251836122bf015251828181610af5015281816110d8015281816115e401528181612423015261518b01525181818161257b01526151b20152f35b01519050388062000357565b600a600090815260008051602062005d4b8339815191529350601f198516905b81811062000460575090846001959493921062000446575b505050811b01600a556200036d565b015160001960f88460031b161c1916905538808062000437565b929360206001819287860151815501950193016200041f565b600a60005290915060008051602062005d4b833981519152601f840160051c81019160208510620004d2575b90601f859493920160051c01905b818110620004c257506200033e565b60008155849350600101620004b3565b9091508190620004a5565b634e487b7160e01b600052602260045260246000fd5b91607f169162000328565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a1565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f1984168510620005aa576001945083601f1981161062000590575b505050811b01600455620001b7565b015160001960f88460031b161c1916905538808062000581565b8181015183556020948501946001909301929091019062000564565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101916020851062000630575b90601f859493920160051c01905b81811062000620575062000188565b6000815584935060010162000611565b909150819062000603565b91607f169162000172565b90508701513862000138565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8a828210620006c45750509083600194939210620006aa575b5050811b016003556200014d565b89015160001960f88460031b161c1916905538806200069c565b6001849560209395849301518155019401920162000683565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200073c575b601f0160051c01905b8181106200072f57506200011f565b6000815560010162000720565b909150819062000717565b90607f16906200010b565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004fe57604052565b51906001600160a01b03821682036200075257565b60005b838110620007a45750506000910152565b818101518382015260200162000793565b81601f82011215620007525780516001600160401b038111620004fe5760405192620007ec601f8301601f19166020018562000757565b8184526020828401011162000752576200080d916020808501910162000790565b90565b8051602091908281101562000890575090601f8251116200084e57808251920151908083106200083f57501790565b82600019910360031b1b161790565b604490620008829260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000790565b601f01601f19168101030190fd5b6001600160401b038111620004fe576005928354926001938481811c91168015620009aa575b83821014620004dd57601f811162000973575b5081601f8411600114620009095750928293918392600094620008fd575b50501b916000199060031b1c191617905560ff90565b015192503880620008e7565b919083601f1981168760005284600020946000905b888383106200095857505050106200093e575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000931565b8587015188559096019594850194879350908101906200091e565b8560005284601f846000209201871c820191601f8601881c015b8281106200099d575050620008c9565b600081550185906200098d565b90607f1690620008b6565b805160209081811015620009e25750601f8251116200084e57808251920151908083106200083f57501790565b906001600160401b038211620004fe57600654926001938481811c9116801562000b01575b83821014620004dd57601f811162000ac7575b5081601f841160011462000a5b575092829391839260009462000a4f575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a38565b919083601f198116600660005284600020946000905b8883831062000aac575050501062000a92575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a84565b85870151885590960195948501948793509081019062000a71565b600660005284601f84600020920160051c820191601f860160051c015b82811062000af457505062000a1a565b6000815501859062000ae4565b90607f169062000a0756fe608060409080825260049182361015610020575b505050361561001e57005b005b600091823560e01c908163012b3ced1461421a5750806306fdde0314614171578063095ea7b3146141485780630f5aa7f31461408357806318160ddd146140655780632026e37214613fa157806323b872dd14613e8f57806325e702d214613dd157806328bcf87914613d135780632e17de7814613c48578063313ce56714613c2d5780633644e51514613c0a578063368242d314613ad05780633a04bc0c146139645780633b47a9ac146137d85780633d203ce21461366b5780634479091d14613477578063485449ab146133405780634cf088d9146132f75780634cf518a1146131eb5780634f062c5a1461310e57806352f5213c14612f145780635f8b012814612e4e578063626a9b2614612c7f57806362bf342f14612b3757806363935f1c14612a5a57806368315754146129395780636b69e05b1461285c57806370a0823114612827578063715018a6146127be57806373b8740c1461273a578063752904d0146126d057806379502c55146125d45780637ecebe001461259e57806380afdea8146125645780638129fc1c146123b957806384b0196e1461227d5780638681d72f146121ab57806388d4a3e51461200f5780638d3ed7c414611ef75780638da5cb5b14611ed05780638fcb4e5b14611dec578063924d615314611cfa57806392fd9e8b14611c0857806395d89b4114611b20578063a23c44b114611a15578063a2dc057414611991578063a694fc3a146118c6578063a8d5fd6514611893578063a9059cbb14611863578063af157c19146116e2578063b579184f14611608578063c45a0155146115c5578063cd5c642614611507578063d505accf14611355578063d79875eb14610f9e578063d94a862b14610d5a578063d96a094a14610ad3578063dcb2a3f514610a1f578063dd62ed3e146109d4578063e16b6d5d146109b6578063e25a2a99146108d1578063e3f6b5441461089f578063eb2fd7351461072a578063eeb3e456146105df578063ef153e13146104e9578063f2fde38b14610435578063fc0c546a146103fb5763fedda89c0361001357346103f757816003193601126103f75760108151937f70d07b8200000000000000000000000000000000000000000000000000000000855284015260209283816024817307Be5FEF230C627aB7473e14740A2ab287c0E8035af49283156103ec57926103b8575b5080518281527f9fe9b7be9d151c7a8b6de49a1312ff27a15096d0d1d12999af85fe4310e0b125843392a251908152f35b9091508281813d83116103e5575b6103d0818361458a565b810103126103e057519038610387565b600080fd5b503d6103c6565b8251903d90823e3d90fd5b5080fd5b50903461043257806003193601126104325750600d54600e54600f54925191825260208201526040810191909152606090f35b0390f35b80fd5b5082346104e55760203660031901126104e55761045061444c565b906104596145c2565b6001600160a01b038092169283156104b65750506008548273ffffffffffffffffffffffffffffffffffffffff19821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b50346103f7576104f8366145ac565b610500614d17565b60108351957f1cfada88000000000000000000000000000000000000000000000000000000008752860152602c602486015281604486015280606486015260209485816084817307Be5FEF230C627aB7473e14740A2ab287c0E8035af49485156105d457946105a5575b50825191825284820152827ff0b6a2e9121a710dc8fe3532a5396d4dae643d9a666e7e0e768be1c0e9a40474833393a3600160095551908152f35b9093508481813d83116105cd575b6105bd818361458a565b810103126103e05751923861056a565b503d6105b3565b8451903d90823e3d90fd5b5082906105eb366145ac565b9290916105f6614d17565b60108151927ff9dc3251000000000000000000000000000000000000000000000000000000008452830152602c602483015282604483015283606483015280826084817307Be5FEF230C627aB7473e14740A2ab287c0E8035af490811561072157859286926106af575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160095580f35b809350818093503d831161071a575b6106c8818361458a565b8101031261071657816106a46001600160a01b039260206107097f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3596614f94565b9301519350919350610660565b8480fd5b503d6106be565b513d86823e3d90fd5b5082346104e55760603660031901126104e557803567ffffffffffffffff811161089b5761075b9036908301614488565b919092602435926044359161076e6145c2565b601f8151947ff1a91b1300000000000000000000000000000000000000000000000000000000865285015260806024850152602084806107b260848201868b614d5f565b8860448301528660648301520381731D9C14178451aBb824a03b8b8ee7b173754717dd5af4938415610891578794610823575b50917f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99461081d9260ff959451958695169785614d80565b0390a280f35b919350916020823d8211610889575b8161083f6020938361458a565b81010312610885577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99460ff9461087861081d94614c29565b95509250949290926107e5565b8680fd5b3d9150610832565b81513d89823e3d90fd5b8380fd5b50346103f757816003193601126103f75760609060ff601f541690602054906021549181519384526020840152820152f35b5082346104e55760603660031901126104e55780359160243584604435936108f76145c2565b73e26feaE5C55c5A5D75d879b51e6385117FE4440390813b156104e557602460848492875194859384927fa0be575c0000000000000000000000000000000000000000000000000000000084528301528a60248301528760448301528960648301525af480156109ac57610998575b50507f2702951ec468d8fb7c1501e01af87b4bd50cda65a20463fc38ee59b954a777b09282519182526020820152a280f35b6109a190614522565b610716578486610966565b84513d84823e3d90fd5b50346103f757816003193601126103f7576020906024549051908152f35b50346103f757806003193601126103f7576020916109f061444c565b826109f9614462565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b50346103f757602092836003193601126104e5576001600160a01b03610a4361444c565b60108451937fed6de06000000000000000000000000000000000000000000000000000000000855284015216602482015283816044817307Be5FEF230C627aB7473e14740A2ab287c0E8035af49283156103ec5792610aa4575b5051908152f35b9091508281813d8311610acc575b610abc818361458a565b810103126103e057519038610a9d565b503d610ab2565b50829060203660031901126104e557610aea614c95565b50610af3614d17565b7f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b0383163314938251936355d2ad9160e01b8552600d838601523460248601528235604486015260c0856064817387c9c3A2cbC1655239c50045B4f4feFce7B674975af49485156109ac578295610d1e575b5060608501805190918715610ce5575050610b91610b9c91516080870151906146fb565b60a0860151906146fb565b94610ba78633614c37565b84840151928115610cda5782915b15610cd057825b8551916370a0823160e01b83523390830152602082602481305afa918215610cc6578492610c86575b509160c097610c427f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9388979695610c8499519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b0390a3600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b959493929091506020863d8211610cbe575b81610ca56020938361458a565b810103126103e0579451939492939192919060c0610be5565b3d9150610c98565b86513d86823e3d90fd5b60a0860151610bbc565b608086015191610bb5565b610d1991979250610d0e60808801610cfd81516150ae565b610d078a33614c37565b5130614c37565b60a087015190614c37565b610ba7565b90945060c03d8111610d53575b610d35818361458a565b81019060c0818303126104e55790610d4c91614cc7565b9386610b6d565b503d610d2b565b5091346103f757816003193601126103f757601f8351917f8c48d3320000000000000000000000000000000000000000000000000000000083528201528181602481731D9C14178451aBb824a03b8b8ee7b173754717dd5af4908115610f94578291610e46575b50825191602080840190808552835180925285850181878460051b880101950193965b838810610df15786860387f35b90919293948380600192603f198a8203018652885190610e1982516080808452830190614427565b91838101518483015286810151878301526060809101511515910152970193019701969093929193610de4565b90503d8083833e610e57818361458a565b810190602090818184031261089b57805167ffffffffffffffff91828211610f9057019083601f8301121561071657815190610e9282614a27565b94610e9f8851968761458a565b828652848087019360051b85010193818511610f8c57858101935b858510610ece575050505050505038610dc1565b8451848111610f88578201608080601f198387030112610f84578b5191610ef48361456e565b89810151878111610f8057810186603f82011215610f80578a8101518e9188610f1c83614c0d565b93610f298151958661458a565b8385528383010111610f7c57938f929384610f528f999794610f6d95878c809c9a019101614404565b85528381015187860152606093848201519086015201614d52565b90820152815201940193610eba565b8e80fd5b8c80fd5b8a80fd5b8980fd5b8780fd5b8580fd5b83513d84823e3d90fd5b508290610faa366145ac565b9290610fb4614c95565b50610fbd614d17565b8251937f04cac304000000000000000000000000000000000000000000000000000000008552600d83860152816024860152604485015260c0846064817387c9c3A2cbC1655239c50045B4f4feFce7B674975af493841561134b578594611311575b50479483850195865110156112e957608085019261103d84516150ae565b60608601519030156112d357306000526020916000835286600020548181106112a75790806000923084528386520388832055806002540360025587519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843092a360a0870197611115838a518951809381927fa9059cbb0000000000000000000000000000000000000000000000000000000083527f0000000000000000000000000000000000000000000000000000000000000000888401602090939291936001600160a01b0360408201951681520152565b038188305af1801561129d57611269575b50838080808451335af1611138614e84565b501561120d575194519751918651916370a0823160e01b835233908301528082602481305afa93841561120257936111c8575b865186815260208101869052604081018a9052606081018490526080810185905260c0908990610c84908a9033906001907f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b908060a08101610c42565b9080935081969594963d83116111fb575b6111e3818361458a565b810103126103e0579051929391929086610c8461116b565b503d6111d9565b8751903d90823e3d90fd5b506064918651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152fd5b8381813d8311611296575b61127e818361458a565b810103126107165761128f90614d52565b5089611126565b503d611274565b88513d87823e3d90fd5b875163391434e360e21b8152308185019081526020810192909252604082018390529081906060010390fd5b60249083875191634b637e8f60e11b8352820152fd5b8284517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90935060c03d8111611344575b611328818361458a565b810160c082820312610f905761133d91614cc7565b928561101f565b503d61131e565b83513d87823e3d90fd5b5091346103f75760e03660031901126103f75761137061444c565b611378614462565b906044359260643560843560ff811681036103e0578142116114d8576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176114c3578b525190206114789161146f9161142e61490d565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a43592206147af565b9092919261483f565b1681810361148f578661148c87878761471e565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b508183346103f757816003193601126103f7577307Be5FEF230C627aB7473e14740A2ab287c0E80390813b156104e557601060248492865194859384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af480156115b8576115a4575b507f1f44ad0beffb1a0d2f012c4d508d4527dca5f9590e01f1d262b6cc4e65a7a18f60208351338152a180f35b6115ad90614522565b6103f7578183611577565b50505051903d90823e3d90fd5b50346103f757816003193601126103f757602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50818391346103f75760203660031901126103f75761162561444c565b9061162e6145c2565b7307Be5FEF230C627aB7473e14740A2ab287c0E80393843b1561089b576010604485926001600160a01b03855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156116d957506116c5575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b6116ce90614522565b6103f757818361169d565b513d84823e3d90fd5b50346103f757816003193601126103f75760108151937f77e7a4e700000000000000000000000000000000000000000000000000000000855284015281836024817307Be5FEF230C627aB7473e14740A2ab287c0E8035af49283156118585782936117ba575b50909181519160208080850192818652845180945285019301945b8281106117705784840385f35b909192826080826117ab6001948a51606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b01960191019492919094611763565b9092503d8083833e6117cc818361458a565b810190602090818184031261089b5780519067ffffffffffffffff821161071657019082601f8301121561089b57815161180581614a27565b936118128751958661458a565b818552828086019260071b85010193818511610885578301915b84831061183f5750505050509138611748565b8360809161184d8486614ffc565b81520192019161182c565b5051903d90823e3d90fd5b50346103f757806003193601126103f75760209061188c61188261444c565b6024359033614606565b5160018152f35b50903461043257806003193601126104325750601054601154601254925191825260208201526040810191909152606090f35b508290346104e55760203660031901126104e557828235926118e6614d17565b73b12a939E3D67aa5663823441f5702ad07FC5176190813b156104e557601760448492865194859384927f588f017e0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f945761197d575b5050519081527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a2600160095580f35b61198690614522565b6104e5578284611949565b50346103f757602092836003193601126104e5576001600160a01b036119b561444c565b60178451937fabe9c580000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173b12a939E3D67aa5663823441f5702ad07FC517615af49283156103ec5792610aa4575051908152f35b509034610432576020366003190112610432576001600160a01b03611a3861444c565b611a4061503f565b5060178451957f73351a6d00000000000000000000000000000000000000000000000000000000875286015216602484015260808360448173b12a939E3D67aa5663823441f5702ad07FC517615af4928315611b14578193611ad3575b608084610c8485518092606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b90925060803d8111611b0d575b611aea818361458a565b8101926080828503126104325750611b07608093610c8492614ffc565b92611a9d565b503d611ae0565b509051903d90823e3d90fd5b509034610432578060031936011261043257508051906000928054611b44816144b6565b80855291600191808316908115611be05750600114611b82575b505050611b708261042e94038361458a565b51918291602083526020830190614427565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610611bc857505050611b7082602061042e9582010194611b5e565b80546020878701810191909152909501948101611bab565b61042e975086935060209250611b7094915060ff191682840152151560051b82010194611b5e565b50346103f757816003193601126103f757611c21614d17565b60108151937faf5907fa0000000000000000000000000000000000000000000000000000000085528401526020836024817307Be5FEF230C627aB7473e14740A2ab287c0E8035af4918215611cef5791611cbb575b8051338152602081810184905293507fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b3789080604081015b0390a1600160095551908152f35b90506020823d8211611ce7575b81611cd56020938361458a565b810103126103e0576020915190611c76565b3d9150611cc8565b9051903d90823e3d90fd5b508290346104e55760203660031901126104e557611d1661503f565b508051917fac362d7300000000000000000000000000000000000000000000000000000000835260248184015235602483015260808260448173e26feaE5C55c5A5D75d879b51e6385117FE444035af4918215611de25761042e9392611db2575b50519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b611dd491925060803d8111611ddb575b611dcc818361458a565b810190615064565b9083611d77565b503d611dc2565b81513d85823e3d90fd5b508290346104e557806003193601126104e557611e0761444c565b908360243592611e15614d17565b7307Be5FEF230C627aB7473e14740A2ab287c0E80394853b156104e5576010606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015610f9457611ebc575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b611ec590614522565b61089b578385611e88565b50346103f757816003193601126103f7576020906001600160a01b03600854169051908152f35b508290346104e55760203660031901126104e557813590611f16614d17565b60108151937f8b26588d000000000000000000000000000000000000000000000000000000008552840152602c602484015281604484015280836064817307Be5FEF230C627aB7473e14740A2ab287c0E8035af480156120055784938591611fb2575b50907faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc91815194855260208501523393a3600160095580f35b827faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc939550611ff692503d8611611ffe575b611fee818361458a565b810190614f7e565b909391611f79565b503d611fe4565b81513d86823e3d90fd5b5091346103f757816003193601126103f75760108351917fcd985a90000000000000000000000000000000000000000000000000000000008352820152602c602482015281816044817307Be5FEF230C627aB7473e14740A2ab287c0E8035af4908115610f945782916120df575b508251916020808401908085528351809252808686019401925b8281106120a45785850386f35b835180518652808301516001600160a01b03168684015287810151888701526060908101519086015260809094019392810192600101612097565b90503d8083833e6120f0818361458a565b810190602090818184031261089b5780519067ffffffffffffffff821161071657019082601f8301121561089b57815161212981614a27565b936121368751958661458a565b818552828086019260071b85010193818511610885578301915b8483106121625750505050503861207d565b6080838303126108855783608091895161217b8161456e565b8551815261218a838701614f94565b838201528a8601518b82015260608087015190820152815201920191612150565b50818391346103f75760203660031901126103f7576121c861444c565b907307Be5FEF230C627aB7473e14740A2ab287c0E80393843b1561089b576010606485926001600160a01b03855196879485937f03d9eb84000000000000000000000000000000000000000000000000000000008552840152602e602484015216978860448301525af49081156116d95750612269575b5050337f7b22c48ae06c79582ff5c89ab9ddff415a5ae48e866411fb60c66d75a60b561f8380a380f35b61227290614522565b6103f757818361223f565b508290346104e557826003193601126104e5576122b97f0000000000000000000000000000000000000000000000000000000000000000614a3f565b926122e37f0000000000000000000000000000000000000000000000000000000000000000614b53565b908251926020928385019585871067ffffffffffffffff8811176123a45750928061235a83889661234d998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b0190614427565b91898303908a0152614427565b924660608801523060808801528460a088015286840360c088015251928381520193925b82811061238d57505050500390f35b83518552869550938101939281019260010161237e565b604190634e487b7160e01b6000525260246000fd5b5082346104e557826003193601126104e557826001600160a01b038060085416601f8551947ff044e081000000000000000000000000000000000000000000000000000000008652850152601060248501526024604485015260176064850152600d6084850152817f00000000000000000000000000000000000000000000000000000000000000001660a485015260c4840152838360e48173649688Bf2E056F0A991534d4A8B1DD49C206Fb9b5af480156109ac57829383916124f7575b509260809260ff926124ab7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99630614c37565b60085416958051967f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f30294702728380a260608752816060880152660746a52880000060208801528601521692a280f35b809450858092503d831161255d575b612510818361458a565b810103126103f7578260809260ff926124ab602061254e7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab998614c29565b94015193965050925092612478565b503d612506565b50346103f757816003193601126103f757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346103f75760203660031901126103f757806020926001600160a01b036125c461444c565b1681526007845220549051908152f35b509034610432578060031936011261043257508051600091600a546125f8816144b6565b808452906001908181169081156126a8575060011461264b575b50506126238261263e94038361458a565b600b5490600c54908051948594606086526060860190614427565b9260208501528301520390f35b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b828610612690575050509181016020019161262382612612565b80546020878701810191909152909501948101612676565b61263e965085925060209150926126239360ff191682840152151560051b8201019450612612565b5082346104e55760203660031901126104e5577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e8858916020913590612712614d17565b61271e826010546146fb565b60105561272d82303330614da4565b51908152a1600160095580f35b50346103f757602092836003193601126104e5576001600160a01b0361275e61444c565b60248451937f223bb642000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173e26feaE5C55c5A5D75d879b51e6385117FE444035af49283156103ec5792610aa4575051908152f35b82346104325780600319360112610432576127d76145c2565b60006001600160a01b0360085473ffffffffffffffffffffffffffffffffffffffff198116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103f75760203660031901126103f757806020926001600160a01b0361284d61444c565b16815280845220549051908152f35b50346103f757816003193601126103f757612875614d17565b60178151937fe21c40c200000000000000000000000000000000000000000000000000000000855284015260208360248173b12a939E3D67aa5663823441f5702ad07FC517615af4918215611cef5791612905575b8051338152602081810184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e908060408101611cad565b90506020823d8211612931575b8161291f6020938361458a565b810103126103e05760209151906128ca565b3d9150612912565b5090346104325760203660031901126104325760ff612956614478565b8260808551612964816144f0565b82815282602082015282878201528260608201520152601f8451957fe7a1945b00000000000000000000000000000000000000000000000000000000875286015216602484015260a083604481731D9C14178451aBb824a03b8b8ee7b173754717dd5af4928315611b14578193612a19575b60a084610c84855180926080809160ff81511684526001600160a01b03602082015116602085015260408101516040850152606081015160608501520151910152565b90925060a03d8111612a53575b612a30818361458a565b81019260a0828503126104325750612a4d60a093610c8492614fa8565b926129d6565b503d612a26565b50346103f757816003193601126103f757612a73614d17565b60248151937f5d82a6c200000000000000000000000000000000000000000000000000000000855284015260208360248173e26feaE5C55c5A5D75d879b51e6385117FE444035af4918215611cef5791612b03575b8051338152602081810184905293507fb829edcd2c5ee38b47b519f30efb6ea48a14b05bd1754f51a384ef422f14d357908060408101611cad565b90506020823d8211612b2f575b81612b1d6020938361458a565b810103126103e0576020915190612ac8565b3d9150612b10565b5091346103f75760603660031901126103f757612ba890612b56614478565b6020612b60614462565b731D9C14178451aBb824a03b8b8ee7b173754717dd928751958692839263844899f160e01b84528784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af4928315612c7557908592918594612c3c575b50601f91606491845195869485937f6555463a000000000000000000000000000000000000000000000000000000008552840152602483015260443560448301525af4908115610f94578291612c1d575b5082519182526020820152f35b9050612c369150823d8411611ffe57611fee818361458a565b38612c10565b925092506020823d8211612c6d575b81612c586020938361458a565b810103126103e057905191849190601f612bbf565b3d9150612c4b565b85513d86823e3d90fd5b5091346103f757816003193601126103f75760108351917f3299ded1000000000000000000000000000000000000000000000000000000008352820152602e602482015281816044817307Be5FEF230C627aB7473e14740A2ab287c0E8035af4908115610f94578291612d66575b508251916020808401908085528351809252808686019401925b828110612d145785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101612d07565b90503d8083833e612d77818361458a565b810190602090818184031261089b5780519067ffffffffffffffff8211610716570182601f8201121561089b57805191612db083614a27565b93612dbd8751958661458a565b838552818501908260c080960285010193818511610f8c578301915b848310612dec5750505050505038612ced565b8583830312610f8c578386918a51612e0381614552565b612e0c86614f94565b8152612e19838701614f94565b838201528b8601518c820152606080870151908201526080808701519082015260a08087015190820152815201920191612dd9565b508290346104e55760203660031901126104e5576001600160a01b03612e7261444c565b612e7a61503f565b5060248351947f54ff42e400000000000000000000000000000000000000000000000000000000865285015216602483015260808260448173e26feaE5C55c5A5D75d879b51e6385117FE444035af4918215611de25761042e9392611db25750519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b508260203660031901126104e557612f2a614478565b91612f33614d17565b600134146130e85780516355d2ad9160e01b8152600d8382015234602482015284604482015260c0816064817387c9c3A2cbC1655239c50045B4f4feFce7B674975af49081156130de5785916130a6575b5060ff6060809201612f97815130614c37565b5194601f84519563e4dc80c560e01b8752860152600d546024860152600e546044860152600f54606486015260246084860152602a60a486015216928360c48201528460e4820152818161010481731D9C14178451aBb824a03b8b8ee7b173754717dd5af492831561309c576000918290839561305b575b5061301b90339061510d565b8051956001875260208701528501528301527f6b9f4d0716e726442811cfa5eed3c51dd6e8c8f354b722f5a6ab3804c2d6880460803393a3600160095580f35b8093929550848092503d8311613095575b613076818361458a565b810103126104325750805160208201519184015193909161301b61300f565b503d61306c565b513d6000823e3d90fd5b905060c03d81116130d7575b6130bc818361458a565b810160c082820312610f90576130d191614cc7565b85612f84565b503d6130b2565b82513d87823e3d90fd5b517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b5091346103f757602090816003193601126104e5578282855161313081614536565b82815201528351907f08193349000000000000000000000000000000000000000000000000000000008252602481830152356024820152838160448173e26feaE5C55c5A5D75d879b51e6385117FE444035af49283156105d45780936131a3575b50508083519280518452015190820152f35b909192508382813d83116131e4575b6131bc818361458a565b810103126104325750818351916131d283614536565b80518352015182820152903880613191565b503d6131b2565b508290346104e55760803660031901126104e55761320761444c565b906024359160443585606435927307Be5FEF230C627aB7473e14740A2ab287c0E80396873b156104e557601060c484926001600160a01b03895195869485937f92bb1514000000000000000000000000000000000000000000000000000000008552840152602e6024840152169a8b60448301528a60648301528760848301528860a48301525af480156132ed576132d9575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190606090a380f35b6132e290614522565b610f9057858761329a565b85513d84823e3d90fd5b50346103f757816003193601126103f75760c0906017549060185490601954601a5490601b5492601c5494815196875260208701528501526060840152608083015260a0820152f35b508290346104e55760a03660031901126104e55761335c614478565b60243567ffffffffffffffff81116107165761337b9036908501614488565b91604435938660643592608435978815158099036104e55761339b6145c2565b731D9C14178451aBb824a03b8b8ee7b173754717dd91823b1561089b5760ff92601f85938751958694859384937fa5ac5cd7000000000000000000000000000000000000000000000000000000008552840152169c8d602483015260c0604483015261340b60c483018d8d614d5f565b908d60648401528a608484015260a483015203915af48015610f945761345f575b5050907f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f9461081d925194859485614d80565b61346b90939293614522565b6108855790868861342c565b50346103f757806003193601126103f75767ffffffffffffffff90833582811161089b576134a89036908601614488565b929094602435916134b76145c2565b841161365857506134c9600a546144b6565b601f81116135f5575b5083601f841160011461354e57849584613537927f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89791613543575b508560011b906000198760031b1c191617600a555b82600b558351948486958652850191614d5f565b9060208301520390a180f35b90508101353861350e565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890601f198516865b8181106135dd5750917f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89697918661353794106135c3575b5050600185811b01600a55613523565b820135600019600388901b60f8161c1916905538806135b3565b9192602060018192868c01358155019401920161357b565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f850160051c8101916020861061364e575b601f0160051c01905b81811061364357506134d2565b858155600101613636565b909150819061362d565b846041602492634e487b7160e01b835252fd5b508290346104e557806003193601126104e557613686614478565b9061368f614462565b92731D9C14178451aBb824a03b8b8ee7b173754717dd9082519163844899f160e01b8352602083806136dd89898784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af49283156137ce57908492918894613795575b50601f91608491845195869485936362195e9f60e01b8552840152602480840152602a604484015260648301525af49081156130de57926001600160a01b0360209361376c8760ff957f66b1fd337cea274cb38fa0696247bba4469e95f3be5ce7d9c9a974d9a11e4bd5988b91613777575b5061510d565b51951685521692a280f35b61378e9150843d8611611ffe57611fee818361458a565b508b613766565b925092506020823d82116137c6575b816137b16020938361458a565b810103126103e057905191839190601f6136f4565b3d91506137a4565b84513d89823e3d90fd5b50346103f757816003193601126103f757601f8151937ffb1af52e000000000000000000000000000000000000000000000000000000008552840152602a60248401528183604481731D9C14178451aBb824a03b8b8ee7b173754717dd5af49283156118585782936138c4575b50909181519160208080850192818652845180945285019301945b82811061386d5784840385f35b9091928260a0826138b56001948a516080809160ff81511684526001600160a01b03602082015116602085015260408101516040850152606081015160608501520151910152565b01960191019492919094613860565b9092503d8083833e6138d6818361458a565b810190602090818184031261089b5780519067ffffffffffffffff8211610716570182601f8201121561089b5780519161390f83614a27565b9361391c8751958661458a565b838552818501908260a080960285010193818511610f8c578301915b84831061394c575050505050509138613845565b8386916139598486614fa8565b815201920191613938565b5082346104e557816003193601126104e55761397e614478565b916024359261398b614d17565b8315613aa95760ff906139a085303330614da4565b601f83519463e4dc80c560e01b8652850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216918260c48201528360e482015260608161010481731D9C14178451aBb824a03b8b8ee7b173754717dd5af491821561309c5760009182908394613a65575b50613a2390339061510d565b80519460008652602086015284015260608301527f6b9f4d0716e726442811cfa5eed3c51dd6e8c8f354b722f5a6ab3804c2d6880460803393a3600160095580f35b92919350506060823d8211613aa1575b81613a826060938361458a565b8101031261043257508051602082015191830151929091613a23613a17565b3d9150613a75565b50517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b5082346104e557816003193601126104e55760ff613aec614478565b613af4614d17565b601f8451937fda4382fa000000000000000000000000000000000000000000000000000000008552840152602480840152602a60448401521690816064820152602435608482015260808160a481731D9C14178451aBb824a03b8b8ee7b173754717dd5af49081156115b8578493859486928794613bbd575b507fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff982769939291613ba06106a492339061510d565b519283923397846040919493926060820195825260208201520152565b9550509150506080833d8211613c02575b81613bdb6080938361458a565b8101031261089b5782516020840151848301516060909501519094909290916106a4613b6d565b3d9150613bce565b50346103f757816003193601126103f757602090613c2661490d565b9051908152f35b50346103f757816003193601126103f7576020905160128152f35b508290346104e55760203660031901126104e55782823592613c68614d17565b73b12a939E3D67aa5663823441f5702ad07FC5176190813b156104e557601760448492865194859384927f0189422a0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613cff575b5050519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a2600160095580f35b613d0890614522565b6104e5578284613ccb565b508290346104e55760203660031901126104e5578282359273e26feaE5C55c5A5D75d879b51e6385117FE4440390813b156104e557602460448492865194859384927fe64e5c2a0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613dbd575b5050519081527ffcd5abced4a14fd82dd75efe917d75c414fce0581307a6c5616350e6d4cc86b360203392a280f35b613dc690614522565b6104e5578284613d8e565b508290346104e55760203660031901126104e5578282359273e26feaE5C55c5A5D75d879b51e6385117FE4440390813b156104e557602460448492865194859384927f0b7fb7410000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613e7b575b5050519081527fa580c6f3f2d7189dd4058538c62d03023016a7c3b7925688501462a6e39e345460203392a280f35b613e8490614522565b6104e5578284613e4c565b5091346103f75760603660031901126103f757613eaa61444c565b613eb2614462565b9160443593856001600160a01b03841691828152600160205220336000526020528560002054916000198303613ef1575b60208761188c888888614606565b858310613f5c578115613f45573315613f2e575060009081526001602090815286822033835281529086902091859003909155829061188c613ee3565b6024906000885191634a1406b160e11b8352820152fd5b602490600088519163e602df0560e01b8352820152fd5b86517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018690528291506060010390fd5b50346103f757602092836003193601126104e5578151907faaa964aa000000000000000000000000000000000000000000000000000000008252602481830152356024820152838160448173e26feaE5C55c5A5D75d879b51e6385117FE444035af49283156103ec578093614023575b50506001600160a01b03905191168152f35b909192508382813d831161405e575b61403c818361458a565b8101031261043257506140566001600160a01b0391614f94565b919038614011565b503d614032565b50346103f757816003193601126103f7576020906002549051908152f35b508290346104e55760203660031901126104e5578135918373e26feaE5C55c5A5D75d879b51e6385117FE4440391823b156103f7576044602491855194859384927fe72267b60000000000000000000000000000000000000000000000000000000084528301528760248301525af4801561413e5761412b575b50519081527f5d20e16c575e19d37142327b2bb4d5017477cfa3a514b0523564afa605104c8060203392a280f35b61413790939193614522565b91836140fd565b82513d86823e3d90fd5b50346103f757806003193601126103f75760209061188c61416761444c565b602435903361471e565b50346103f757816003193601126103f75780519082600354614192816144b6565b80855291600191808316908115611be057506001146141bd57505050611b708261042e94038361458a565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82861061420257505050611b7082602061042e9582010194611b5e565b805460208787018101919091529095019481016141e5565b83858492346104e5576020918260031936011261089b57809291923592602a928354808352818301908588527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d290885b8181106143f0575050508261428091038361458a565b815193731D9C14178451aBb824a03b8b8ee7b173754717dd92875b8681106142d95789513381526020810189905289907f73c58cffa8ee146b206627c2c322e2d5bba6c275790dd2cb73f1afdd7fb0d76f90604090a180f35b6142e38183614f47565b518952602384528989208a516142f8816144f0565b8961433d8d84549360ff85168152608060038b8301976001600160a01b03809860081c1689526001810154809585015260028101546060850152015491015242614f71565b11156143e95761434d8385614f47565b51918c51926362195e9f60e01b8452601f8a85015260248085015286604485015260648401528c836084818b5af49283156143df579061439b9392918e8e946143bf575b505051169061510d565b60001981146143ac5760010161429b565b602489601188634e487b7160e01b835252fd5b6143d6929450803d10611ffe57611fee818361458a565b50918e8e614391565b8d513d8e823e3d90fd5b505061439b565b82548452928401926001928301920161426a565b60005b8381106144175750506000910152565b8181015183820152602001614407565b9060209161444081518092818552858086019101614404565b601f01601f1916010190565b600435906001600160a01b03821682036103e057565b602435906001600160a01b03821682036103e057565b6004359060ff821682036103e057565b9181601f840112156103e05782359167ffffffffffffffff83116103e057602083818601950101116103e057565b90600182811c921680156144e6575b60208310146144d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916144c5565b60a0810190811067ffffffffffffffff82111761450c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161450c57604052565b6040810190811067ffffffffffffffff82111761450c57604052565b60c0810190811067ffffffffffffffff82111761450c57604052565b6080810190811067ffffffffffffffff82111761450c57604052565b90601f8019910116810190811067ffffffffffffffff82111761450c57604052565b60409060031901126103e0576004359060243590565b6001600160a01b036008541633036145d657565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b916001600160a01b038084169283156146e357169283156146b25760009083825281602052604082205490838210614680575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6024604051634b637e8f60e11b815260006004820152fd5b9190820180921161470857565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03809116918215614797571691821561477f5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b6024604051634a1406b160e11b815260006004820152fd5b602460405163e602df0560e01b815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161483357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156148275780516001600160a01b0381161561481e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b60048110156148f75780614851575050565b600181036148835760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b600281036148bc57602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146148c65750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163014806149fe575b15614968577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a081526149f881614552565b51902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461493f565b67ffffffffffffffff811161450c5760051b60200190565b60ff8114614a955760ff811690601f8211614a6b5760405191614a6183614536565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614aa8836144b6565b80835292600190818116908115614b315750600114614ad2575b50614acf9250038261458a565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310614b165750614acf935050810160200138614ac2565b81935090816020925483858901015201910190918492614afd565b905060209250614acf94915060ff191682840152151560051b82010138614ac2565b60ff8114614b755760ff811690601f8211614a6b5760405191614a6183614536565b50604051600654816000614b88836144b6565b80835292600190818116908115614b315750600114614bae5750614acf9250038261458a565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b848310614bf25750614acf935050810160200138614ac2565b81935090816020925483858901015201910190918492614bd9565b67ffffffffffffffff811161450c57601f01601f191660200190565b519060ff821682036103e057565b6001600160a01b03169081156146b2577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614c796000946002546146fb565b60025584845283825260408420818154019055604051908152a3565b60405190614ca282614552565b8160a06000918281528260208201528260408201528260608201528260808201520152565b91908260c09103126103e057604051614cdf81614552565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b600260095414614d28576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b519081151582036103e057565b908060209392818452848401376000828201840152601f01601f1916010190565b90614d9a9060409396959496606084526060840191614d5f565b9460208201520152565b600091614e1a9383926040519660208801937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248b0152166044890152606488015260648752614e03876144f0565b1694519082865af1614e13614e84565b9083614eb4565b8051908115159182614e61575b5050614e305750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b81925090602091810103126103e0576020614e7c9101614d52565b153880614e27565b3d15614eaf573d90614e9582614c0d565b91614ea3604051938461458a565b82523d6000602084013e565b606090565b90614ef35750805115614ec957805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580614f3e575b614f04575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15614efc565b8051821015614f5b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161470857565b91908260409103126103e0576020825192015190565b51906001600160a01b03821682036103e057565b91908260a09103126103e057604051614fc0816144f0565b6080808294614fce81614c29565b8452614fdc60208201614f94565b602085015260408101516040850152606081015160608501520151910152565b91908260809103126103e0576040516150148161456e565b606080829461502281614f94565b845260208101516020850152604081015160408501520151910152565b6040519061504c8261456e565b60006060838281528260208201528260408201520152565b908160809103126103e0576150a66060604051926150818461456e565b61508a81614f94565b8452602081015160208501526040810151604085015201614d52565b606082015290565b600b54601b549091901561510057818102918183041481151715614708576150f06150e7670de0b6b3a76400006150fb94048093614f71565b91601a546146fb565b601a556010546146fb565b601055565b6150fb91506010546146fb565b9073649688Bf2E056F0A991534d4A8B1DD49C206Fb9b91823b156103e05761012460009260405194859384927ffb7a2c50000000000000000000000000000000000000000000000000000000008452601f6004850152601060248501526024604485015260176064850152600a60848501526001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001660a48601527f000000000000000000000000000000000000000000000000000000000000000060c486015260e4850152166101048301525af480156151fc576151f15750565b6151fa90614522565b565b6040513d6000823e3d90fdfea2646970667358221220066f481dfed543753b445ab7cc3a9cd31136c93aa8b7aa6287d15388e69587fb64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a264697066735822122017905715ae2e9f14a495e2d5ad502d429ba51ba416fa8d26605e1c466c5047de64736f6c63430008140033",
  "deployedBytecode": "0x6080604090808252600491823610156200001857600080fd5b600091823560e01c630fb1b31c146200003057600080fd5b307f000000000000000000000000000000000000000000000000000000000000000014620001fc5760031990602036830112620001f85767ffffffffffffffff918535838111620001f45760a0818801928236030112620001f4576200009a602482018362000200565b90916064620000bc620000b1604484018762000200565b929093018662000200565b949093615d6b96878901978989108b8a1117620001e0576200011f936200012e9896938b9a98969362000110936200025d8d393589523060208a01528d33908a015260c060608a015260c08901916200023b565b9186830360808801526200023b565b9260a08185039101526200023b565b039084f08015620001d45773ffffffffffffffffffffffffffffffffffffffff1692833b15620001d1578251917f8129fc1c0000000000000000000000000000000000000000000000000000000083528183878183895af18015620001c7576200019d575b6020858551908152f35b8211620001b4575060209350815238808062000193565b80604186634e487b7160e01b6024945252fd5b84513d84823e3d90fd5b80fd5b505051903d90823e3d90fd5b5060248c60418f634e487b7160e01b835252fd5b8580fd5b8380fd5b8280fd5b903590601e198136030182121562000236570180359067ffffffffffffffff821162000236576020019181360383136200023657565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe6101a08060405234620007525762005d6b803803809162000021828562000757565b833981019060c0818303126200075257805162000041602083016200077b565b6200004f604084016200077b565b60608401516001600160401b03811162000752578562000071918601620007b5565b60808501519094906001600160401b03811162000752578662000096918301620007b5565b60a08201519096906001600160401b0381116200075257620000b99201620007b5565b60408051969192919087016001600160401b03811188821017620004fe5760405260018752603160f81b602088015285516001600160401b038111620004fe57600354600181811c9116801562000747575b6020821014620004dd57601f8111620006dd575b50806020601f8211600114620006525760009162000646575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004fe5760045490600182811c921680156200063b575b6020831014620004dd5781601f849311620005c6575b50602090601f831160011462000537576000926200052b575b50508160011b916000199060031b1c1916176004555b620001c28562000810565b95610120968752620001d481620009b5565b9561014096875260208151910120908160e052602081519101209081610100524660a0526040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019082821060018060401b03831117620004fe576040829052825190206080523060c0526001600160a01b0392831691821562000514575050600880546001600160a01b03198116831790915560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955610180938452610160928352606081016001600160401b03811182821017620004fe5760405281815260406020820191670429d069189e00008352019166470de4df820000835280519060018060401b038211620004fe57600a5490600182811c92168015620004f3575b6020831014620004dd5781601f84931162000479575b50602090601f8311600114620003ff57600092620003f3575b50508160011b916000199060031b1c191617600a555b51600b5551600c556040519261523e948562000b0d863960805185614946015260a05185614a01015260c05185614917015260e05185614995015261010051856149bb01525184612295015251836122bf015251828181610af5015281816110d8015281816115e401528181612423015261518b01525181818161257b01526151b20152f35b01519050388062000357565b600a600090815260008051602062005d4b8339815191529350601f198516905b81811062000460575090846001959493921062000446575b505050811b01600a556200036d565b015160001960f88460031b161c1916905538808062000437565b929360206001819287860151815501950193016200041f565b600a60005290915060008051602062005d4b833981519152601f840160051c81019160208510620004d2575b90601f859493920160051c01905b818110620004c257506200033e565b60008155849350600101620004b3565b9091508190620004a5565b634e487b7160e01b600052602260045260246000fd5b91607f169162000328565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a1565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f1984168510620005aa576001945083601f1981161062000590575b505050811b01600455620001b7565b015160001960f88460031b161c1916905538808062000581565b8181015183556020948501946001909301929091019062000564565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101916020851062000630575b90601f859493920160051c01905b81811062000620575062000188565b6000815584935060010162000611565b909150819062000603565b91607f169162000172565b90508701513862000138565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8a828210620006c45750509083600194939210620006aa575b5050811b016003556200014d565b89015160001960f88460031b161c1916905538806200069c565b6001849560209395849301518155019401920162000683565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200073c575b601f0160051c01905b8181106200072f57506200011f565b6000815560010162000720565b909150819062000717565b90607f16906200010b565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004fe57604052565b51906001600160a01b03821682036200075257565b60005b838110620007a45750506000910152565b818101518382015260200162000793565b81601f82011215620007525780516001600160401b038111620004fe5760405192620007ec601f8301601f19166020018562000757565b8184526020828401011162000752576200080d916020808501910162000790565b90565b8051602091908281101562000890575090601f8251116200084e57808251920151908083106200083f57501790565b82600019910360031b1b161790565b604490620008829260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000790565b601f01601f19168101030190fd5b6001600160401b038111620004fe576005928354926001938481811c91168015620009aa575b83821014620004dd57601f811162000973575b5081601f8411600114620009095750928293918392600094620008fd575b50501b916000199060031b1c191617905560ff90565b015192503880620008e7565b919083601f1981168760005284600020946000905b888383106200095857505050106200093e575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000931565b8587015188559096019594850194879350908101906200091e565b8560005284601f846000209201871c820191601f8601881c015b8281106200099d575050620008c9565b600081550185906200098d565b90607f1690620008b6565b805160209081811015620009e25750601f8251116200084e57808251920151908083106200083f57501790565b906001600160401b038211620004fe57600654926001938481811c9116801562000b01575b83821014620004dd57601f811162000ac7575b5081601f841160011462000a5b575092829391839260009462000a4f575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a38565b919083601f198116600660005284600020946000905b8883831062000aac575050501062000a92575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a84565b85870151885590960195948501948793509081019062000a71565b600660005284601f84600020920160051c820191601f860160051c015b82811062000af457505062000a1a565b6000815501859062000ae4565b90607f169062000a0756fe608060409080825260049182361015610020575b505050361561001e57005b005b600091823560e01c908163012b3ced1461421a5750806306fdde0314614171578063095ea7b3146141485780630f5aa7f31461408357806318160ddd146140655780632026e37214613fa157806323b872dd14613e8f57806325e702d214613dd157806328bcf87914613d135780632e17de7814613c48578063313ce56714613c2d5780633644e51514613c0a578063368242d314613ad05780633a04bc0c146139645780633b47a9ac146137d85780633d203ce21461366b5780634479091d14613477578063485449ab146133405780634cf088d9146132f75780634cf518a1146131eb5780634f062c5a1461310e57806352f5213c14612f145780635f8b012814612e4e578063626a9b2614612c7f57806362bf342f14612b3757806363935f1c14612a5a57806368315754146129395780636b69e05b1461285c57806370a0823114612827578063715018a6146127be57806373b8740c1461273a578063752904d0146126d057806379502c55146125d45780637ecebe001461259e57806380afdea8146125645780638129fc1c146123b957806384b0196e1461227d5780638681d72f146121ab57806388d4a3e51461200f5780638d3ed7c414611ef75780638da5cb5b14611ed05780638fcb4e5b14611dec578063924d615314611cfa57806392fd9e8b14611c0857806395d89b4114611b20578063a23c44b114611a15578063a2dc057414611991578063a694fc3a146118c6578063a8d5fd6514611893578063a9059cbb14611863578063af157c19146116e2578063b579184f14611608578063c45a0155146115c5578063cd5c642614611507578063d505accf14611355578063d79875eb14610f9e578063d94a862b14610d5a578063d96a094a14610ad3578063dcb2a3f514610a1f578063dd62ed3e146109d4578063e16b6d5d146109b6578063e25a2a99146108d1578063e3f6b5441461089f578063eb2fd7351461072a578063eeb3e456146105df578063ef153e13146104e9578063f2fde38b14610435578063fc0c546a146103fb5763fedda89c0361001357346103f757816003193601126103f75760108151937f70d07b82000000000000000000000000000000000000000000000000000000008552840152602092838160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49283156103ec57926103b8575b5080518281527f9fe9b7be9d151c7a8b6de49a1312ff27a15096d0d1d12999af85fe4310e0b125843392a251908152f35b9091508281813d83116103e5575b6103d0818361458a565b810103126103e057519038610387565b600080fd5b503d6103c6565b8251903d90823e3d90fd5b5080fd5b50903461043257806003193601126104325750600d54600e54600f54925191825260208201526040810191909152606090f35b0390f35b80fd5b5082346104e55760203660031901126104e55761045061444c565b906104596145c2565b6001600160a01b038092169283156104b65750506008548273ffffffffffffffffffffffffffffffffffffffff19821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b50346103f7576104f8366145ac565b610500614d17565b60108351957f1cfada88000000000000000000000000000000000000000000000000000000008752860152602c6024860152816044860152806064860152602094858160848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49485156105d457946105a5575b50825191825284820152827ff0b6a2e9121a710dc8fe3532a5396d4dae643d9a666e7e0e768be1c0e9a40474833393a3600160095551908152f35b9093508481813d83116105cd575b6105bd818361458a565b810103126103e05751923861056a565b503d6105b3565b8451903d90823e3d90fd5b5082906105eb366145ac565b9290916105f6614d17565b60108151927ff9dc3251000000000000000000000000000000000000000000000000000000008452830152602c6024830152826044830152836064830152808260848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af490811561072157859286926106af575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160095580f35b809350818093503d831161071a575b6106c8818361458a565b8101031261071657816106a46001600160a01b039260206107097f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3596614f94565b9301519350919350610660565b8480fd5b503d6106be565b513d86823e3d90fd5b5082346104e55760603660031901126104e557803567ffffffffffffffff811161089b5761075b9036908301614488565b919092602435926044359161076e6145c2565b601f8151947ff1a91b1300000000000000000000000000000000000000000000000000000000865285015260806024850152602084806107b260848201868b614d5f565b886044830152866064830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af4938415610891578794610823575b50917f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99461081d9260ff959451958695169785614d80565b0390a280f35b919350916020823d8211610889575b8161083f6020938361458a565b81010312610885577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99460ff9461087861081d94614c29565b95509250949290926107e5565b8680fd5b3d9150610832565b81513d89823e3d90fd5b8380fd5b50346103f757816003193601126103f75760609060ff601f541690602054906021549181519384526020840152820152f35b5082346104e55760603660031901126104e55780359160243584604435936108f76145c2565b73__$d26c4b6c55cbf068c0037866f9978a3889$__90813b156104e557602460848492875194859384927fa0be575c0000000000000000000000000000000000000000000000000000000084528301528a60248301528760448301528960648301525af480156109ac57610998575b50507f2702951ec468d8fb7c1501e01af87b4bd50cda65a20463fc38ee59b954a777b09282519182526020820152a280f35b6109a190614522565b610716578486610966565b84513d84823e3d90fd5b50346103f757816003193601126103f7576020906024549051908152f35b50346103f757806003193601126103f7576020916109f061444c565b826109f9614462565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b50346103f757602092836003193601126104e5576001600160a01b03610a4361444c565b60108451937fed6de060000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49283156103ec5792610aa4575b5051908152f35b9091508281813d8311610acc575b610abc818361458a565b810103126103e057519038610a9d565b503d610ab2565b50829060203660031901126104e557610aea614c95565b50610af3614d17565b7f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b0383163314938251936355d2ad9160e01b8552600d838601523460248601528235604486015260c08560648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49485156109ac578295610d1e575b5060608501805190918715610ce5575050610b91610b9c91516080870151906146fb565b60a0860151906146fb565b94610ba78633614c37565b84840151928115610cda5782915b15610cd057825b8551916370a0823160e01b83523390830152602082602481305afa918215610cc6578492610c86575b509160c097610c427f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9388979695610c8499519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b0390a3600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b959493929091506020863d8211610cbe575b81610ca56020938361458a565b810103126103e0579451939492939192919060c0610be5565b3d9150610c98565b86513d86823e3d90fd5b60a0860151610bbc565b608086015191610bb5565b610d1991979250610d0e60808801610cfd81516150ae565b610d078a33614c37565b5130614c37565b60a087015190614c37565b610ba7565b90945060c03d8111610d53575b610d35818361458a565b81019060c0818303126104e55790610d4c91614cc7565b9386610b6d565b503d610d2b565b5091346103f757816003193601126103f757601f8351917f8c48d332000000000000000000000000000000000000000000000000000000008352820152818160248173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610f94578291610e46575b50825191602080840190808552835180925285850181878460051b880101950193965b838810610df15786860387f35b90919293948380600192603f198a8203018652885190610e1982516080808452830190614427565b91838101518483015286810151878301526060809101511515910152970193019701969093929193610de4565b90503d8083833e610e57818361458a565b810190602090818184031261089b57805167ffffffffffffffff91828211610f9057019083601f8301121561071657815190610e9282614a27565b94610e9f8851968761458a565b828652848087019360051b85010193818511610f8c57858101935b858510610ece575050505050505038610dc1565b8451848111610f88578201608080601f198387030112610f84578b5191610ef48361456e565b89810151878111610f8057810186603f82011215610f80578a8101518e9188610f1c83614c0d565b93610f298151958661458a565b8385528383010111610f7c57938f929384610f528f999794610f6d95878c809c9a019101614404565b85528381015187860152606093848201519086015201614d52565b90820152815201940193610eba565b8e80fd5b8c80fd5b8a80fd5b8980fd5b8780fd5b8580fd5b83513d84823e3d90fd5b508290610faa366145ac565b9290610fb4614c95565b50610fbd614d17565b8251937f04cac304000000000000000000000000000000000000000000000000000000008552600d83860152816024860152604485015260c08460648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af493841561134b578594611311575b50479483850195865110156112e957608085019261103d84516150ae565b60608601519030156112d357306000526020916000835286600020548181106112a75790806000923084528386520388832055806002540360025587519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843092a360a0870197611115838a518951809381927fa9059cbb0000000000000000000000000000000000000000000000000000000083527f0000000000000000000000000000000000000000000000000000000000000000888401602090939291936001600160a01b0360408201951681520152565b038188305af1801561129d57611269575b50838080808451335af1611138614e84565b501561120d575194519751918651916370a0823160e01b835233908301528082602481305afa93841561120257936111c8575b865186815260208101869052604081018a9052606081018490526080810185905260c0908990610c84908a9033906001907f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b908060a08101610c42565b9080935081969594963d83116111fb575b6111e3818361458a565b810103126103e0579051929391929086610c8461116b565b503d6111d9565b8751903d90823e3d90fd5b506064918651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600260248201527f54460000000000000000000000000000000000000000000000000000000000006044820152fd5b8381813d8311611296575b61127e818361458a565b810103126107165761128f90614d52565b5089611126565b503d611274565b88513d87823e3d90fd5b875163391434e360e21b8152308185019081526020810192909252604082018390529081906060010390fd5b60249083875191634b637e8f60e11b8352820152fd5b8284517fa73f7d46000000000000000000000000000000000000000000000000000000008152fd5b90935060c03d8111611344575b611328818361458a565b810160c082820312610f905761133d91614cc7565b928561101f565b503d61131e565b83513d87823e3d90fd5b5091346103f75760e03660031901126103f75761137061444c565b611378614462565b906044359260643560843560ff811681036103e0578142116114d8576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176114c3578b525190206114789161146f9161142e61490d565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a43592206147af565b9092919261483f565b1681810361148f578661148c87878761471e565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b508183346103f757816003193601126103f75773__$aee754128d0d1775ed250cc6ad74f33f25$__90813b156104e557601060248492865194859384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af480156115b8576115a4575b507f1f44ad0beffb1a0d2f012c4d508d4527dca5f9590e01f1d262b6cc4e65a7a18f60208351338152a180f35b6115ad90614522565b6103f7578183611577565b50505051903d90823e3d90fd5b50346103f757816003193601126103f757602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50818391346103f75760203660031901126103f75761162561444c565b9061162e6145c2565b73__$aee754128d0d1775ed250cc6ad74f33f25$__93843b1561089b576010604485926001600160a01b03855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156116d957506116c5575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b6116ce90614522565b6103f757818361169d565b513d84823e3d90fd5b50346103f757816003193601126103f75760108151937f77e7a4e7000000000000000000000000000000000000000000000000000000008552840152818360248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49283156118585782936117ba575b50909181519160208080850192818652845180945285019301945b8281106117705784840385f35b909192826080826117ab6001948a51606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b01960191019492919094611763565b9092503d8083833e6117cc818361458a565b810190602090818184031261089b5780519067ffffffffffffffff821161071657019082601f8301121561089b57815161180581614a27565b936118128751958661458a565b818552828086019260071b85010193818511610885578301915b84831061183f5750505050509138611748565b8360809161184d8486614ffc565b81520192019161182c565b5051903d90823e3d90fd5b50346103f757806003193601126103f75760209061188c61188261444c565b6024359033614606565b5160018152f35b50903461043257806003193601126104325750601054601154601254925191825260208201526040810191909152606090f35b508290346104e55760203660031901126104e557828235926118e6614d17565b73__$b2fda0c84abdf24a5bde0680bf090c8e0e$__90813b156104e557601760448492865194859384927f588f017e0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f945761197d575b5050519081527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a2600160095580f35b61198690614522565b6104e5578284611949565b50346103f757602092836003193601126104e5576001600160a01b036119b561444c565b60178451937fabe9c580000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49283156103ec5792610aa4575051908152f35b509034610432576020366003190112610432576001600160a01b03611a3861444c565b611a4061503f565b5060178451957f73351a6d00000000000000000000000000000000000000000000000000000000875286015216602484015260808360448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4928315611b14578193611ad3575b608084610c8485518092606080916001600160a01b03815116845260208101516020850152604081015160408501520151910152565b90925060803d8111611b0d575b611aea818361458a565b8101926080828503126104325750611b07608093610c8492614ffc565b92611a9d565b503d611ae0565b509051903d90823e3d90fd5b509034610432578060031936011261043257508051906000928054611b44816144b6565b80855291600191808316908115611be05750600114611b82575b505050611b708261042e94038361458a565b51918291602083526020830190614427565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610611bc857505050611b7082602061042e9582010194611b5e565b80546020878701810191909152909501948101611bab565b61042e975086935060209250611b7094915060ff191682840152151560051b82010194611b5e565b50346103f757816003193601126103f757611c21614d17565b60108151937faf5907fa00000000000000000000000000000000000000000000000000000000855284015260208360248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4918215611cef5791611cbb575b8051338152602081810184905293507fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b3789080604081015b0390a1600160095551908152f35b90506020823d8211611ce7575b81611cd56020938361458a565b810103126103e0576020915190611c76565b3d9150611cc8565b9051903d90823e3d90fd5b508290346104e55760203660031901126104e557611d1661503f565b508051917fac362d7300000000000000000000000000000000000000000000000000000000835260248184015235602483015260808260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611de25761042e9392611db2575b50519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b611dd491925060803d8111611ddb575b611dcc818361458a565b810190615064565b9083611d77565b503d611dc2565b81513d85823e3d90fd5b508290346104e557806003193601126104e557611e0761444c565b908360243592611e15614d17565b73__$aee754128d0d1775ed250cc6ad74f33f25$__94853b156104e5576010606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015610f9457611ebc575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b611ec590614522565b61089b578385611e88565b50346103f757816003193601126103f7576020906001600160a01b03600854169051908152f35b508290346104e55760203660031901126104e557813590611f16614d17565b60108151937f8b26588d000000000000000000000000000000000000000000000000000000008552840152602c6024840152816044840152808360648173__$aee754128d0d1775ed250cc6ad74f33f25$__5af480156120055784938591611fb2575b50907faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc91815194855260208501523393a3600160095580f35b827faf3cfa4248014b38859ca72c706b9e871354311c22dc12e0efdf1869b79468dc939550611ff692503d8611611ffe575b611fee818361458a565b810190614f7e565b909391611f79565b503d611fe4565b81513d86823e3d90fd5b5091346103f757816003193601126103f75760108351917fcd985a90000000000000000000000000000000000000000000000000000000008352820152602c6024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610f945782916120df575b508251916020808401908085528351809252808686019401925b8281106120a45785850386f35b835180518652808301516001600160a01b03168684015287810151888701526060908101519086015260809094019392810192600101612097565b90503d8083833e6120f0818361458a565b810190602090818184031261089b5780519067ffffffffffffffff821161071657019082601f8301121561089b57815161212981614a27565b936121368751958661458a565b818552828086019260071b85010193818511610885578301915b8483106121625750505050503861207d565b6080838303126108855783608091895161217b8161456e565b8551815261218a838701614f94565b838201528a8601518b82015260608087015190820152815201920191612150565b50818391346103f75760203660031901126103f7576121c861444c565b9073__$aee754128d0d1775ed250cc6ad74f33f25$__93843b1561089b576010606485926001600160a01b03855196879485937f03d9eb84000000000000000000000000000000000000000000000000000000008552840152602e602484015216978860448301525af49081156116d95750612269575b5050337f7b22c48ae06c79582ff5c89ab9ddff415a5ae48e866411fb60c66d75a60b561f8380a380f35b61227290614522565b6103f757818361223f565b508290346104e557826003193601126104e5576122b97f0000000000000000000000000000000000000000000000000000000000000000614a3f565b926122e37f0000000000000000000000000000000000000000000000000000000000000000614b53565b908251926020928385019585871067ffffffffffffffff8811176123a45750928061235a83889661234d998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b0190614427565b91898303908a0152614427565b924660608801523060808801528460a088015286840360c088015251928381520193925b82811061238d57505050500390f35b83518552869550938101939281019260010161237e565b604190634e487b7160e01b6000525260246000fd5b5082346104e557826003193601126104e557826001600160a01b038060085416601f8551947ff044e081000000000000000000000000000000000000000000000000000000008652850152601060248501526024604485015260176064850152600d6084850152817f00000000000000000000000000000000000000000000000000000000000000001660a485015260c4840152838360e48173__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__5af480156109ac57829383916124f7575b509260809260ff926124ab7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99630614c37565b60085416958051967f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f30294702728380a260608752816060880152660746a52880000060208801528601521692a280f35b809450858092503d831161255d575b612510818361458a565b810103126103f7578260809260ff926124ab602061254e7f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab998614c29565b94015193965050925092612478565b503d612506565b50346103f757816003193601126103f757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346103f75760203660031901126103f757806020926001600160a01b036125c461444c565b1681526007845220549051908152f35b509034610432578060031936011261043257508051600091600a546125f8816144b6565b808452906001908181169081156126a8575060011461264b575b50506126238261263e94038361458a565b600b5490600c54908051948594606086526060860190614427565b9260208501528301520390f35b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b828610612690575050509181016020019161262382612612565b80546020878701810191909152909501948101612676565b61263e965085925060209150926126239360ff191682840152151560051b8201019450612612565b5082346104e55760203660031901126104e5577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e8858916020913590612712614d17565b61271e826010546146fb565b60105561272d82303330614da4565b51908152a1600160095580f35b50346103f757602092836003193601126104e5576001600160a01b0361275e61444c565b60248451937f223bb642000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156103ec5792610aa4575051908152f35b82346104325780600319360112610432576127d76145c2565b60006001600160a01b0360085473ffffffffffffffffffffffffffffffffffffffff198116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103f75760203660031901126103f757806020926001600160a01b0361284d61444c565b16815280845220549051908152f35b50346103f757816003193601126103f757612875614d17565b60178151937fe21c40c200000000000000000000000000000000000000000000000000000000855284015260208360248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4918215611cef5791612905575b8051338152602081810184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e908060408101611cad565b90506020823d8211612931575b8161291f6020938361458a565b810103126103e05760209151906128ca565b3d9150612912565b5090346104325760203660031901126104325760ff612956614478565b8260808551612964816144f0565b82815282602082015282878201528260608201520152601f8451957fe7a1945b00000000000000000000000000000000000000000000000000000000875286015216602484015260a08360448173__$481ca34c951945c71f6bbcbbb91702f088$__5af4928315611b14578193612a19575b60a084610c84855180926080809160ff81511684526001600160a01b03602082015116602085015260408101516040850152606081015160608501520151910152565b90925060a03d8111612a53575b612a30818361458a565b81019260a0828503126104325750612a4d60a093610c8492614fa8565b926129d6565b503d612a26565b50346103f757816003193601126103f757612a73614d17565b60248151937f5d82a6c200000000000000000000000000000000000000000000000000000000855284015260208360248173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611cef5791612b03575b8051338152602081810184905293507fb829edcd2c5ee38b47b519f30efb6ea48a14b05bd1754f51a384ef422f14d357908060408101611cad565b90506020823d8211612b2f575b81612b1d6020938361458a565b810103126103e0576020915190612ac8565b3d9150612b10565b5091346103f75760603660031901126103f757612ba890612b56614478565b6020612b60614462565b73__$481ca34c951945c71f6bbcbbb91702f088$__928751958692839263844899f160e01b84528784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af4928315612c7557908592918594612c3c575b50601f91606491845195869485937f6555463a000000000000000000000000000000000000000000000000000000008552840152602483015260443560448301525af4908115610f94578291612c1d575b5082519182526020820152f35b9050612c369150823d8411611ffe57611fee818361458a565b38612c10565b925092506020823d8211612c6d575b81612c586020938361458a565b810103126103e057905191849190601f612bbf565b3d9150612c4b565b85513d86823e3d90fd5b5091346103f757816003193601126103f75760108351917f3299ded1000000000000000000000000000000000000000000000000000000008352820152602e6024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610f94578291612d66575b508251916020808401908085528351809252808686019401925b828110612d145785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101612d07565b90503d8083833e612d77818361458a565b810190602090818184031261089b5780519067ffffffffffffffff8211610716570182601f8201121561089b57805191612db083614a27565b93612dbd8751958661458a565b838552818501908260c080960285010193818511610f8c578301915b848310612dec5750505050505038612ced565b8583830312610f8c578386918a51612e0381614552565b612e0c86614f94565b8152612e19838701614f94565b838201528b8601518c820152606080870151908201526080808701519082015260a08087015190820152815201920191612dd9565b508290346104e55760203660031901126104e5576001600160a01b03612e7261444c565b612e7a61503f565b5060248351947f54ff42e400000000000000000000000000000000000000000000000000000000865285015216602483015260808260448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af4918215611de25761042e9392611db25750519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b508260203660031901126104e557612f2a614478565b91612f33614d17565b600134146130e85780516355d2ad9160e01b8152600d8382015234602482015284604482015260c08160648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49081156130de5785916130a6575b5060ff6060809201612f97815130614c37565b5194601f84519563e4dc80c560e01b8752860152600d546024860152600e546044860152600f54606486015260246084860152602a60a486015216928360c48201528460e482015281816101048173__$481ca34c951945c71f6bbcbbb91702f088$__5af492831561309c576000918290839561305b575b5061301b90339061510d565b8051956001875260208701528501528301527f6b9f4d0716e726442811cfa5eed3c51dd6e8c8f354b722f5a6ab3804c2d6880460803393a3600160095580f35b8093929550848092503d8311613095575b613076818361458a565b810103126104325750805160208201519184015193909161301b61300f565b503d61306c565b513d6000823e3d90fd5b905060c03d81116130d7575b6130bc818361458a565b810160c082820312610f90576130d191614cc7565b85612f84565b503d6130b2565b82513d87823e3d90fd5b517fc8e50334000000000000000000000000000000000000000000000000000000008152fd5b5091346103f757602090816003193601126104e5578282855161313081614536565b82815201528351907f08193349000000000000000000000000000000000000000000000000000000008252602481830152356024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156105d45780936131a3575b50508083519280518452015190820152f35b909192508382813d83116131e4575b6131bc818361458a565b810103126104325750818351916131d283614536565b80518352015182820152903880613191565b503d6131b2565b508290346104e55760803660031901126104e55761320761444c565b9060243591604435856064359273__$aee754128d0d1775ed250cc6ad74f33f25$__96873b156104e557601060c484926001600160a01b03895195869485937f92bb1514000000000000000000000000000000000000000000000000000000008552840152602e6024840152169a8b60448301528a60648301528760848301528860a48301525af480156132ed576132d9575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190606090a380f35b6132e290614522565b610f9057858761329a565b85513d84823e3d90fd5b50346103f757816003193601126103f75760c0906017549060185490601954601a5490601b5492601c5494815196875260208701528501526060840152608083015260a0820152f35b508290346104e55760a03660031901126104e55761335c614478565b60243567ffffffffffffffff81116107165761337b9036908501614488565b91604435938660643592608435978815158099036104e55761339b6145c2565b73__$481ca34c951945c71f6bbcbbb91702f088$__91823b1561089b5760ff92601f85938751958694859384937fa5ac5cd7000000000000000000000000000000000000000000000000000000008552840152169c8d602483015260c0604483015261340b60c483018d8d614d5f565b908d60648401528a608484015260a483015203915af48015610f945761345f575b5050907f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f9461081d925194859485614d80565b61346b90939293614522565b6108855790868861342c565b50346103f757806003193601126103f75767ffffffffffffffff90833582811161089b576134a89036908601614488565b929094602435916134b76145c2565b841161365857506134c9600a546144b6565b601f81116135f5575b5083601f841160011461354e57849584613537927f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89791613543575b508560011b906000198760031b1c191617600a555b82600b558351948486958652850191614d5f565b9060208301520390a180f35b90508101353861350e565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890601f198516865b8181106135dd5750917f72a2d256d2e21d182a2e64f3ed5e476e12d90f1243b89f17ed8d9bd164d18bb89697918661353794106135c3575b5050600185811b01600a55613523565b820135600019600388901b60f8161c1916905538806135b3565b9192602060018192868c01358155019401920161357b565b600a85527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f850160051c8101916020861061364e575b601f0160051c01905b81811061364357506134d2565b858155600101613636565b909150819061362d565b846041602492634e487b7160e01b835252fd5b508290346104e557806003193601126104e557613686614478565b9061368f614462565b9273__$481ca34c951945c71f6bbcbbb91702f088$__9082519163844899f160e01b8352602083806136dd89898784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af49283156137ce57908492918894613795575b50601f91608491845195869485936362195e9f60e01b8552840152602480840152602a604484015260648301525af49081156130de57926001600160a01b0360209361376c8760ff957f66b1fd337cea274cb38fa0696247bba4469e95f3be5ce7d9c9a974d9a11e4bd5988b91613777575b5061510d565b51951685521692a280f35b61378e9150843d8611611ffe57611fee818361458a565b508b613766565b925092506020823d82116137c6575b816137b16020938361458a565b810103126103e057905191839190601f6136f4565b3d91506137a4565b84513d89823e3d90fd5b50346103f757816003193601126103f757601f8151937ffb1af52e000000000000000000000000000000000000000000000000000000008552840152602a6024840152818360448173__$481ca34c951945c71f6bbcbbb91702f088$__5af49283156118585782936138c4575b50909181519160208080850192818652845180945285019301945b82811061386d5784840385f35b9091928260a0826138b56001948a516080809160ff81511684526001600160a01b03602082015116602085015260408101516040850152606081015160608501520151910152565b01960191019492919094613860565b9092503d8083833e6138d6818361458a565b810190602090818184031261089b5780519067ffffffffffffffff8211610716570182601f8201121561089b5780519161390f83614a27565b9361391c8751958661458a565b838552818501908260a080960285010193818511610f8c578301915b84831061394c575050505050509138613845565b8386916139598486614fa8565b815201920191613938565b5082346104e557816003193601126104e55761397e614478565b916024359261398b614d17565b8315613aa95760ff906139a085303330614da4565b601f83519463e4dc80c560e01b8652850152600d546024850152600e546044850152600f54606485015260246084850152602a60a485015216918260c48201528360e48201526060816101048173__$481ca34c951945c71f6bbcbbb91702f088$__5af491821561309c5760009182908394613a65575b50613a2390339061510d565b80519460008652602086015284015260608301527f6b9f4d0716e726442811cfa5eed3c51dd6e8c8f354b722f5a6ab3804c2d6880460803393a3600160095580f35b92919350506060823d8211613aa1575b81613a826060938361458a565b8101031261043257508051602082015191830151929091613a23613a17565b3d9150613a75565b50517f43ad20fc000000000000000000000000000000000000000000000000000000008152fd5b5082346104e557816003193601126104e55760ff613aec614478565b613af4614d17565b601f8451937fda4382fa000000000000000000000000000000000000000000000000000000008552840152602480840152602a60448401521690816064820152602435608482015260808160a48173__$481ca34c951945c71f6bbcbbb91702f088$__5af49081156115b8578493859486928794613bbd575b507fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff982769939291613ba06106a492339061510d565b519283923397846040919493926060820195825260208201520152565b9550509150506080833d8211613c02575b81613bdb6080938361458a565b8101031261089b5782516020840151848301516060909501519094909290916106a4613b6d565b3d9150613bce565b50346103f757816003193601126103f757602090613c2661490d565b9051908152f35b50346103f757816003193601126103f7576020905160128152f35b508290346104e55760203660031901126104e55782823592613c68614d17565b73__$b2fda0c84abdf24a5bde0680bf090c8e0e$__90813b156104e557601760448492865194859384927f0189422a0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613cff575b5050519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a2600160095580f35b613d0890614522565b6104e5578284613ccb565b508290346104e55760203660031901126104e5578282359273__$d26c4b6c55cbf068c0037866f9978a3889$__90813b156104e557602460448492865194859384927fe64e5c2a0000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613dbd575b5050519081527ffcd5abced4a14fd82dd75efe917d75c414fce0581307a6c5616350e6d4cc86b360203392a280f35b613dc690614522565b6104e5578284613d8e565b508290346104e55760203660031901126104e5578282359273__$d26c4b6c55cbf068c0037866f9978a3889$__90813b156104e557602460448492865194859384927f0b7fb7410000000000000000000000000000000000000000000000000000000084528301528860248301525af48015610f9457613e7b575b5050519081527fa580c6f3f2d7189dd4058538c62d03023016a7c3b7925688501462a6e39e345460203392a280f35b613e8490614522565b6104e5578284613e4c565b5091346103f75760603660031901126103f757613eaa61444c565b613eb2614462565b9160443593856001600160a01b03841691828152600160205220336000526020528560002054916000198303613ef1575b60208761188c888888614606565b858310613f5c578115613f45573315613f2e575060009081526001602090815286822033835281529086902091859003909155829061188c613ee3565b6024906000885191634a1406b160e11b8352820152fd5b602490600088519163e602df0560e01b8352820152fd5b86517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018690528291506060010390fd5b50346103f757602092836003193601126104e5578151907faaa964aa000000000000000000000000000000000000000000000000000000008252602481830152356024820152838160448173__$d26c4b6c55cbf068c0037866f9978a3889$__5af49283156103ec578093614023575b50506001600160a01b03905191168152f35b909192508382813d831161405e575b61403c818361458a565b8101031261043257506140566001600160a01b0391614f94565b919038614011565b503d614032565b50346103f757816003193601126103f7576020906002549051908152f35b508290346104e55760203660031901126104e5578135918373__$d26c4b6c55cbf068c0037866f9978a3889$__91823b156103f7576044602491855194859384927fe72267b60000000000000000000000000000000000000000000000000000000084528301528760248301525af4801561413e5761412b575b50519081527f5d20e16c575e19d37142327b2bb4d5017477cfa3a514b0523564afa605104c8060203392a280f35b61413790939193614522565b91836140fd565b82513d86823e3d90fd5b50346103f757806003193601126103f75760209061188c61416761444c565b602435903361471e565b50346103f757816003193601126103f75780519082600354614192816144b6565b80855291600191808316908115611be057506001146141bd57505050611b708261042e94038361458a565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82861061420257505050611b7082602061042e9582010194611b5e565b805460208787018101919091529095019481016141e5565b83858492346104e5576020918260031936011261089b57809291923592602a928354808352818301908588527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d290885b8181106143f0575050508261428091038361458a565b81519373__$481ca34c951945c71f6bbcbbb91702f088$__92875b8681106142d95789513381526020810189905289907f73c58cffa8ee146b206627c2c322e2d5bba6c275790dd2cb73f1afdd7fb0d76f90604090a180f35b6142e38183614f47565b518952602384528989208a516142f8816144f0565b8961433d8d84549360ff85168152608060038b8301976001600160a01b03809860081c1689526001810154809585015260028101546060850152015491015242614f71565b11156143e95761434d8385614f47565b51918c51926362195e9f60e01b8452601f8a85015260248085015286604485015260648401528c836084818b5af49283156143df579061439b9392918e8e946143bf575b505051169061510d565b60001981146143ac5760010161429b565b602489601188634e487b7160e01b835252fd5b6143d6929450803d10611ffe57611fee818361458a565b50918e8e614391565b8d513d8e823e3d90fd5b505061439b565b82548452928401926001928301920161426a565b60005b8381106144175750506000910152565b8181015183820152602001614407565b9060209161444081518092818552858086019101614404565b601f01601f1916010190565b600435906001600160a01b03821682036103e057565b602435906001600160a01b03821682036103e057565b6004359060ff821682036103e057565b9181601f840112156103e05782359167ffffffffffffffff83116103e057602083818601950101116103e057565b90600182811c921680156144e6575b60208310146144d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916144c5565b60a0810190811067ffffffffffffffff82111761450c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161450c57604052565b6040810190811067ffffffffffffffff82111761450c57604052565b60c0810190811067ffffffffffffffff82111761450c57604052565b6080810190811067ffffffffffffffff82111761450c57604052565b90601f8019910116810190811067ffffffffffffffff82111761450c57604052565b60409060031901126103e0576004359060243590565b6001600160a01b036008541633036145d657565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b916001600160a01b038084169283156146e357169283156146b25760009083825281602052604082205490838210614680575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6024604051634b637e8f60e11b815260006004820152fd5b9190820180921161470857565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03809116918215614797571691821561477f5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b6024604051634a1406b160e11b815260006004820152fd5b602460405163e602df0560e01b815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161483357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156148275780516001600160a01b0381161561481e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b60048110156148f75780614851575050565b600181036148835760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b600281036148bc57602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146148c65750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163014806149fe575b15614968577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a081526149f881614552565b51902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461493f565b67ffffffffffffffff811161450c5760051b60200190565b60ff8114614a955760ff811690601f8211614a6b5760405191614a6183614536565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614aa8836144b6565b80835292600190818116908115614b315750600114614ad2575b50614acf9250038261458a565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310614b165750614acf935050810160200138614ac2565b81935090816020925483858901015201910190918492614afd565b905060209250614acf94915060ff191682840152151560051b82010138614ac2565b60ff8114614b755760ff811690601f8211614a6b5760405191614a6183614536565b50604051600654816000614b88836144b6565b80835292600190818116908115614b315750600114614bae5750614acf9250038261458a565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b848310614bf25750614acf935050810160200138614ac2565b81935090816020925483858901015201910190918492614bd9565b67ffffffffffffffff811161450c57601f01601f191660200190565b519060ff821682036103e057565b6001600160a01b03169081156146b2577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614c796000946002546146fb565b60025584845283825260408420818154019055604051908152a3565b60405190614ca282614552565b8160a06000918281528260208201528260408201528260608201528260808201520152565b91908260c09103126103e057604051614cdf81614552565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b600260095414614d28576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b519081151582036103e057565b908060209392818452848401376000828201840152601f01601f1916010190565b90614d9a9060409396959496606084526060840191614d5f565b9460208201520152565b600091614e1a9383926040519660208801937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248b0152166044890152606488015260648752614e03876144f0565b1694519082865af1614e13614e84565b9083614eb4565b8051908115159182614e61575b5050614e305750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b81925090602091810103126103e0576020614e7c9101614d52565b153880614e27565b3d15614eaf573d90614e9582614c0d565b91614ea3604051938461458a565b82523d6000602084013e565b606090565b90614ef35750805115614ec957805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580614f3e575b614f04575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15614efc565b8051821015614f5b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161470857565b91908260409103126103e0576020825192015190565b51906001600160a01b03821682036103e057565b91908260a09103126103e057604051614fc0816144f0565b6080808294614fce81614c29565b8452614fdc60208201614f94565b602085015260408101516040850152606081015160608501520151910152565b91908260809103126103e0576040516150148161456e565b606080829461502281614f94565b845260208101516020850152604081015160408501520151910152565b6040519061504c8261456e565b60006060838281528260208201528260408201520152565b908160809103126103e0576150a66060604051926150818461456e565b61508a81614f94565b8452602081015160208501526040810151604085015201614d52565b606082015290565b600b54601b549091901561510057818102918183041481151715614708576150f06150e7670de0b6b3a76400006150fb94048093614f71565b91601a546146fb565b601a556010546146fb565b601055565b6150fb91506010546146fb565b9073__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__91823b156103e05761012460009260405194859384927ffb7a2c50000000000000000000000000000000000000000000000000000000008452601f6004850152601060248501526024604485015260176064850152600a60848501526001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001660a48601527f000000000000000000000000000000000000000000000000000000000000000060c486015260e4850152166101048301525af480156151fc576151f15750565b6151fa90614522565b565b6040513d6000823e3d90fdfea2646970667358221220066f481dfed543753b445ab7cc3a9cd31136c93aa8b7aa6287d15388e69587fb64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a264697066735822122017905715ae2e9f14a495e2d5ad502d429ba51ba416fa8d26605e1c466c5047de64736f6c63430008140033",
  "libraries": {
    "Token": "0x87c9c3A2cbC1655239c50045B4f4feFce7B67497",
    "Share": "0x07Be5FEF230C627aB7473e14740A2ab287c0E803",
    "Staking": "0xb12a939E3D67aa5663823441f5702ad07FC51761",
    "Member": "0x1D9C14178451aBb824a03b8b8ee7b173754717dd",
    "Curation": "0xe26feaE5C55c5A5D75d879b51e6385117FE44403",
    "SpaceHelper": "0x649688Bf2E056F0A991534d4A8B1DD49C206Fb9b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}