{
  "address": "0x32B028c8fE91a5b5771Cf060CD533f6C0Adc6943",
  "abi": [
    {
      "inputs": [],
      "name": "AllocationTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeneficiaryExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeneficiaryNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContributorExisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedOrderAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBeneficiary",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyContributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySeller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accumulated",
          "type": "uint256"
        }
      ],
      "name": "RewardsPerShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VestingReleased",
      "type": "event"
    }
  ],
  "transactionHash": "0x919260bd76eed85e66dcf5b7e334b49e78cebdb60f2df3d311d06c3aa11d661c",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x32B028c8fE91a5b5771Cf060CD533f6C0Adc6943",
    "transactionIndex": 5,
    "gasUsed": "1275556",
    "logsBloom": "0x
    "blockHash": "0x998c869f72dd63a9aeaf49fc1fa95d50b71818aaef1fe62b3b7e322e1d701dc2",
    "transactionHash": "0x919260bd76eed85e66dcf5b7e334b49e78cebdb60f2df3d311d06c3aa11d661c",
    "logs": [],
    "blockNumber": 16267835,
    "cumulativeGasUsed": "1414167",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "d531e3eabe5d53f3e13e1b53bf2e8842",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AllocationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeneficiaryExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeneficiaryNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContributorExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedOrderAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBeneficiary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyContributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"name\":\"RewardsPerShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingReleased\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"common \"}],\"OnlyContributor()\":[{\"notice\":\"Share \"}]},\"events\":{\"RewardsPerShareUpdated(uint256)\":{\"notice\":\"Share events \"}},\"kind\":\"user\",\"methods\":{\"addContributor(Share.State storage,address)\":{\"notice\":\"--- contributor --- \"},\"addVesting(Share.State storage,EnumerableSet.AddressSet storage,address,uint256,uint256,uint256)\":{\"notice\":\"----- Vesting ------ \"},\"transferShares(Share.State storage,address,uint256)\":{\"notice\":\"--- share --- \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Share.sol\":\"Share\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Token\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\n// Member\\nstruct Plan {\\n  string uri;\\n  uint256 price;\\n  uint256 minEthAmount;\\n  bool isActive;\\n}\\n\\nstruct Subscription {\\n  uint8 planId;\\n  address account;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 amount;\\n  string uri;\\n}\\n\\n// Share\\nstruct OrderInfo {\\n  uint256 orderId;\\n  address seller;\\n  uint256 amount;\\n  uint256 price;\\n}\\n\\nstruct Contributor {\\n  address account;\\n  uint256 shares;\\n  uint256 rewards;\\n  uint256 checkpoint;\\n}\\n\\nstruct VestingInfo {\\n  address beneficiary;\\n  address payer;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 allocation;\\n  uint256 released;\\n}\\n\\n// Staking\\nstruct Staker {\\n  address account;\\n  uint256 staked;\\n  uint256 realized;\\n  uint256 checkpoint;\\n}\\n\\n// Curator\\nstruct CurationUser {\\n  address curator; // your curator\\n  uint256 rewards;\\n  uint256 memberCount;\\n  bool registered;\\n}\\n\\nstruct Tier {\\n  uint256 memberCountBreakpoint;\\n  uint256 rebateRate;\\n}\\n\\nstruct Config {\\n  string uri;\\n  uint256 stakingRevenuePercent;\\n  uint256 subscriptionFeePercent;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\\n\\n  // Member\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\\n\\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\\n\\n  function getPlans() external view returns (Plan[] memory);\\n\\n  function subscribe(uint8 planId, uint256 amount, string calldata uri) external;\\n\\n  function subscribeByEth(uint8 planId, string calldata uri) external payable;\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external;\\n\\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external;\\n\\n  function getSubscription(uint8 planId, address account) external view returns (Subscription memory);\\n\\n  function getSubscriptions() external view returns (Subscription[] memory);\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256);\\n\\n  // Share\\n\\n  function addContributor(address account) external;\\n\\n  function distributeShareRewards() external;\\n\\n  function claimShareRewards() external returns (uint256 amount);\\n\\n  function transferShares(address to, uint256 amount) external;\\n\\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\\n\\n  function cancelShareOrder(uint256 orderId) external;\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\\n\\n  function getShareOrders() external view returns (OrderInfo[] memory);\\n\\n  function getContributors() external view returns (Contributor[] memory);\\n\\n  function currentContributorRewards(address account) external view returns (uint256);\\n\\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\\n\\n  function claimVesting() external returns (uint256 amount);\\n\\n  function removeVesting(address beneficiary) external;\\n\\n  function getVestings() external view returns (VestingInfo[] memory);\\n\\n  // Staking\\n\\n  function currentUserRewards(address account) external view returns (uint256);\\n\\n  function getStaker(address account) external view returns (Staker memory);\\n\\n  function stake(uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n\\n  function claimStakingRewards() external returns (uint256 amount);\\n\\n  // Curation\\n\\n  function createCode(bytes32 _code) external;\\n\\n  function updateCode(bytes32 _code) external;\\n\\n  function bindCode(bytes32 _code) external;\\n\\n  function getCurationUser(address account) external view returns (CurationUser memory);\\n\\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\\n\\n  function getCodeByCurator(address account) external view returns (bytes32);\\n\\n  function getCuratorByCode(bytes32 code) external view returns (address);\\n\\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\\n\\n  function getTier(uint256 id) external view returns (Tier memory);\\n\\n  function claimCurationRewards() external returns (uint256 rewards);\\n\\n  // Others\\n\\n  function updateConfig(string calldata uri, uint256 percent) external;\\n\\n  function depositSpaceToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8a943d3d116b7ed53dabbf9a56dfaf52246253e00a11d674defc22afbd53c794\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\\n\",\"keccak256\":\"0xe53b8f71c73cbeb044645cc7d6296501646674b96e3aa9f461c109be125f8cda\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n  /** common */\\n  error AmountIsZero();\\n  error AmountTooLarge();\\n  error PriceIsZero();\\n  error EthAmountIsZero();\\n  error InsufficientPayment();\\n  error OnlyCreator();\\n  error InvalidAddress();\\n\\n  /** CreationFactory */\\n  error URIIsEmpty();\\n  error CreationNotFound();\\n  error InvalidFeePercent();\\n\\n  /** SpaceFactory */\\n  error InvalidAppId();\\n  error AppNotFound();\\n  error InvalidFeeReceiver();\\n  // appFeePercent must be <= 20%\\n  error InvalidAppFeePercent();\\n  error InvalidTokens();\\n\\n  /** Space */\\n  error OnlyFactory();\\n  error TokenAmountTooLarge();\\n  // Staking revenue percent must be >= 10% And <= 100%\\n  error InvalidStakingRevenuePercent();\\n\\n  /** Token */\\n  error SlippageTooHigh();\\n\\n  /** Member */\\n  error PlanNotExisted();\\n  error PlanNotActive();\\n  error SubscribeAmountTooSmall();\\n  error ContributorExisted();\\n\\n  /** Share */\\n  error OnlyContributor();\\n  error InsufficientShares();\\n  error InvalidRecipient();\\n  error OrderNotFound();\\n  error OnlySeller();\\n  error OnlyPayer();\\n  error ExceedOrderAmount();\\n  error InvalidBeneficiary();\\n  error BeneficiaryExists();\\n  error BeneficiaryNotFound();\\n  error AllocationTooLarge();\\n\\n  /** curation */\\n  error CodeIsEmpty();\\n  error CodeAlreadyExists();\\n  error ShouldCreateCodeFirstly();\\n  error CodeIsUsed();\\n  error CodeNotExists();\\n  error CannotInviteYourself();\\n  error UserIsInvited();\\n  error SubscriptionNotFound();\\n}\\n\",\"keccak256\":\"0xf2d247465c7668c8db648da5543962ad812df27351e22cf88dfbe391fd1d9930\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event SpaceConfigUpdated(string uri, uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event Staked(address indexed account, uint256 amount);\\n  event Unstaked(address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    bool isUsingEth,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration,\\n    string uri\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event ShareRewardsDistributed(address account);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\\n\\n  /** Curation events */\\n  event CodeCreated(address indexed account, bytes32 _code);\\n  event CodeUpdated(address indexed account, bytes32 _code);\\n  event CodeBound(address indexed account, bytes32 _code);\\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\\n  event CurationRewardsClaimed(address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9288baf2e557fbe11c5f5d94e5d8914393d8ca86ead770becd5630d8bf0129df\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct State {\\n    uint256 daoRevenue;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    Contributor memory contributor = self.contributors[msg.sender];\\n    if (contributor.account == address(0)) {\\n      revert Errors.OnlyContributor();\\n    }\\n    if (contributor.shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n    if (to == address(0) || msg.sender == to) {\\n      revert Errors.InvalidRecipient();\\n    }\\n\\n    if (self.contributors[to].account == address(0)) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256 orderId) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\\n    if (amount == 0) revert Errors.AmountIsZero();\\n    orderId = self.orderIndex;\\n    self.orders[orderId] = Order(msg.sender, amount, price);\\n    orderIds.add(orderId);\\n    self.orderIndex++;\\n  }\\n\\n  function cancelShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId\\n  ) external returns (uint256 amount, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\\n    amount = order.amount;\\n    price = order.price;\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\\n    uint256 ethAmount = order.price * amount;\\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\\n    if (self.contributors[order.seller].shares < amount) {\\n      revert Errors.InsufficientShares();\\n    }\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (self.contributors[msg.sender].account == address(0)) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (OrderInfo[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    OrderInfo[] memory orders = new OrderInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Order memory order = self.orders[ids[i]];\\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    if (self.contributors[account].account != address(0)) {\\n      revert Errors.ContributorExisted();\\n    }\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(account, 0, 0, 0);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      info[i] = self.contributors[self.contributorAddresses[i]];\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\\n      revert Errors.InvalidBeneficiary();\\n    }\\n    if (vestingAddresses.contains(beneficiary)) {\\n      revert Errors.BeneficiaryExists();\\n    }\\n\\n    Contributor memory payer = self.contributors[msg.sender];\\n\\n    if (payer.shares < allocation) {\\n      revert Errors.AllocationTooLarge();\\n    }\\n\\n    if (self.contributors[beneficiary].account == address(0)) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external returns (uint256) {\\n    return _claimVesting(self, msg.sender);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n\\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      if (self.contributors[vesting.payer].shares <= releasable) {\\n        revert Errors.InsufficientShares();\\n      }\\n\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoRevenue = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0xc47ba77a2b439dce10896ccb0fa270b61de44be3a7e60b3b5f62c93ded0ab919\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TF\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f081dacc6f60dc0670c32219b4c58862a955232fcb0265e69dab4fd03f0670a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761161890816100228239308160090152f35b600080fdfe60806040818152307f0000000000000000000000000000000000000000000000000000000000000000146004908136101561003957600080fd5b600093843560e01c90816303d9eb8414610db8575080631cfada8814610cf45780632ce9a45f14610cd75780633299ded114610ad057806370d07b8214610aad57806377e7a4e7146109645780638b26588d146108d057806392bb1514146107655780639dc96a3a14610750578063a9479ab114610728578063af5907fa14610660578063cd985a90146104af578063ed6de06014610411578063f351007e146102f65763f9dc3251146100ec57600080fd5b6102f2576100f936610ec0565b9492959184870191808452602091838352858520966001600160a01b03808954169889156102e257600181019283548c116102d457600282019a61013e8d8d54611180565b908134106102c457908892918f8f908e8e600360019301809886835252200154106102b4578b80809381935af13d156102af573d67ffffffffffffffff811161029c578c5190610197601f8201601f19168c0183610f8e565b81528b8a3d92013e5b1561027457506102479a9b9c338a52818852838b8b20541615610263575b508282541689528087528c6101da60018c8c2001918254610fb0565b905533895286526001898920016101f28d8254610fd3565b90555416985499815480821460001461024b575050508161021291611090565b50835252600282822082815582600182015501555b5192839283602090939291936001600160a01b0360408201951681520152565b0390f35b9350935094505061025c9250610fb0565b9055610227565b61026e9033906111e4565b386101be565b8a5162461bcd60e51b815290810188905260026024820152612a2360f11b6044820152606490fd5b634e487b7160e01b8c526041835260248cfd5b6101a0565b8c51633999656760e01b81528390fd5b8b5163cd1c886760e01b81528390fd5b89516358ee643f60e01b8152fd5b885163d36d896560e01b81528390fd5b8280fd5b509190916102f25761030736610ede565b93909160038101923387528360205284872085519061032582610f72565b6001600160a01b03918282541690818152606060036001850154946020840195865260028101548c85015201549101521561040157879051106103f15780821693841580156103e8575b6103da5750918391600195936103c597958a5284602052858a205416156000146103ca5761039c916111e4565b3387528160205283838820016103b3878254610fb0565b90558652602052842001918254610fd3565b905580f35b506103d490611564565b5061039c565b8651634e46966960e11b8152fd5b5084331461036f565b8551633999656760e01b81528490fd5b86516345e88c4f60e11b81528590fd5b5050816003193601126102f257602092670de0b6b3a76400006104a16104a893359261049b866001600160a01b039283610449610eaa565b168152600387018a522087519261045f84610f72565b815416835261048f6001820154968a8501978852606060036002850154948c8801958652015495019485526115b3565b90519551925190610fb0565b90611180565b0490610fd3565b9051908152f35b5050828260031936011261065d57906024359183519283908054808652602080960191845285842090845b878282106106495750505050816104f2910382610f8e565b8051906104fe82611193565b9361050b87519586610f8e565b828552601f1961051a84611193565b0186855b82811061062d57505050803501835b8381106105975750505050835192808401908085528351809252808686019401925b82811061055c5785850386f35b835180518652808301516001600160a01b0316868401528781015188870152606090810151908601526080909401939281019260010161054f565b806105a561062892856111d0565b5186528288528886208951906105ba82610f3a565b6001600160a01b0380825416835260026001830154928c85019384520154908c84019182526105e985896111d0565b5193511691519051918c51936105fe85610f72565b84528b8401528b830152606082015261061782896111d0565b5261062281886111d0565b50610fe0565b61052d565b6106389593956111ab565b82828a01015201879094929461051e565b8354855290930192600192830192016104da565b80fd5b5082849161071357602092836003193601126102f2576106ce8482600386943561068981611564565b50610694338261149d565b33808752910183528585206002018054979055855163a9059cbb60e01b815291820190815260208101879052909283918291604090910190565b038185305af1801561071e576106e7575b505051908152f35b8481813d8311610717575b6106fc8183610f8e565b8101031261071357518015150361065d57806106df565b5080fd5b503d6106f2565b83513d84823e3d90fd5b509190916102f2573660031901126107135761074d90610746610eaa565b90356111e4565b80f35b6020846104a861075f36610ede565b916113de565b509291926107135760c03660031901126107135780359260243590610788610e8f565b9260a4356001600160a01b039283861695861580156108c7575b6108b75760008781526001870160205260409020546108a757600389013389528060205283838a2084516107d581610f72565b888254168152606060036001840154938460208501526002810154898501520154910152106108975791889991899493896108839b5260205286828620541615610887575b5080519561082787610f08565b33875260208701916064358352600681890194608435865260608a019687528b60808b0198808a5252016020528b209651166001600160a01b03198754161786555160018601555160028501555160038401555191015561101d565b5080f35b61089190836111e4565b3861081a565b8251639fab5d0f60e01b81528590fd5b8151637ffebe8360e01b81528490fd5b8151631559b7d760e21b81528490fd5b503387146107a2565b50839061065d57606036600319011261065d57604435908280350182825280602052848220936001600160a01b0385541680156109555733036109475750600260018501549401549261092581602435611090565b5082526020526002848220828155826001820155015582519182526020820152f35b85516342e8fb9360e11b8152fd5b50855163d36d896560e01b8152fd5b505082602091826003193601126107135735906005820180549061098782611193565b9361099487519586610f8e565b828552601f196109a384611193565b0186855b828110610a9157505050600390810191845b848110610a24575050505050835192808401908085528351809252808686019401925b8281106109e95785850386f35b835180516001600160a01b031686528083015186840152878101518887015260609081015190860152608090940193928101926001016109dc565b80610a32610a8c9284610fef565b906001600160a01b039182915490871b1c168852858a52848b89208c5192610a5984610f72565b815416835260018101548c84015260028101548d84015201546060820152610a81828a6111d0565b5261062281896111d0565b6109b9565b610a9c9594956111ab565b82828a0101520187909493946109a7565b5092909261065d57602036600319011261065d57506104a86020923390356112cd565b5050828260031936011261065d5760243590835192839283815491828752602080970190855286852092855b88828210610cc157505050610b1392500384610f8e565b825190610b1f82611193565b93610b2c87519586610f8e565b828552601f19610b3b84611193565b0186855b828110610c8357505050813560060191845b848110610bd3575050505050835192808401908085528351809252808686019401925b828110610b815785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101610b74565b610c7e906001600160a01b0380610bea83876111d0565b51168852858a5289858c86818c208251958693610c0685610f08565b818354168552600183015487860190815260028401549282870193845280610c478c600388015498606098898c019a8b5201549a6080809b019b8c526111d0565b5116995116905192519451965197825199610c618b610f56565b8a5289015287015285015283015260a0820152610a81828a6111d0565b610b51565b8995949551610c9181610f56565b8781528783820152878b8201528760608201528760808201528760a082015282828a010152018790949394610b3f565b8554845260019586019589955093019201610afc565b848383610713576020366003190112610713576108839035611564565b5082849161071357610d0536610ec0565b92909233865260038201602052836001868820015410610da8578315610d985791816002610d85948160209a9501966001600160a01b038989549b8c98825197610d4e89610f3a565b3389528f89019586528389019687528a8352018e52209451166001600160a01b03198554161784555160018401555191015561101d565b50610d908154610fe0565b905551908152f35b84516310eb483f60e21b81528790fd5b8451633999656760e01b81528790fd5b858486856102f25760603660031901126102f2578135610dd6610e8f565b9460068201916001600160a01b038088169283885284602052858820610dfb82610f08565b82815416825287600182015491826020850152600281015489850152600381015460608501520154608083015215610e7f5751163303610e6f578596610e40916112cd565b50610e4d81602435611090565b5084526020528220828155826001820155826002820155826003820155015580f35b505050516309f9fa4f60e21b8152fd5b855163694f351f60e01b81528790fd5b604435906001600160a01b0382168203610ea557565b600080fd5b602435906001600160a01b0382168203610ea557565b6080906003190112610ea55760043590602435906044359060643590565b6060906003190112610ea557600435906024356001600160a01b0381168103610ea5579060443590565b60a0810190811067ffffffffffffffff821117610f2457604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610f2457604052565b60c0810190811067ffffffffffffffff821117610f2457604052565b6080810190811067ffffffffffffffff821117610f2457604052565b90601f8019910116810190811067ffffffffffffffff821117610f2457604052565b91908203918211610fbd57565b634e487b7160e01b600052601160045260246000fd5b91908201809211610fbd57565b6000198114610fbd5760010190565b80548210156110075760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60008281526001820160205260409020546110895780549068010000000000000000821015610f24578261107261105b846001809601855584610fef565b819391549060031b91821b91600019901b19161790565b905580549260005201602052604060002055600190565b5050600090565b906001820190600092818452826020526040842054908115156000146111795760001991808301818111611165578254908482019182116111515781810361111c575b50505080548015611108578201916110eb8383610fef565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b61113c61112c61105b9386610fef565b90549060031b1c92839286610fef565b905586528460205260408620553880806110d3565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b5050505090565b81810292918115918404141715610fbd57565b67ffffffffffffffff8111610f245760051b60200190565b604051906111b882610f72565b60006060838281528260208201528260408201520152565b80518210156110075760209160051b010190565b60038101906001600160a01b038093169160009183835281602052846040842054166112bb5760059161121682611564565b5060036040519161122683610f72565b868352602083018681526040840190878252606085019288845289895260205289604089209551166001600160a01b03198654161785555160018501555160028401555191015501805491680100000000000000008310156112a757509061129391600182018155610fef565b909283549160031b92831b921b1916179055565b634e487b7160e01b81526041600452602490fd5b604051633b0f774360e11b8152600490fd5b916001600160a01b0380831660009080825260068601602052604092838320956001870154156113cd57611303904290896113de565b956004810161131481548099610fb0565b9788611327575b50505050505050909150565b90611336896003959493610fd3565b905554169682887fc800dba4e4ee938f9d72daf6b9a44b6e148a9dabe80a5e295e585cca791a5449602088518b8152a3019086835281602052856001858520015411156113bc5760019495968352816020528484842001611398888254610fb0565b9055825260205220016113ac838254610fd3565b905581903880808080808061131b565b8351633999656760e01b8152600490fd5b845163694f351f60e01b8152600490fd5b6006906001600160a01b03809316600052016020526040600020916040519161140683610f08565b83541682526001830154906020830191808352600285015460408501948186526080600460038901549860608401998a52015491015281831060001461145157505050505050600090565b61145a91610fd3565b811115611468575050505190565b61049b9061147a939451925190610fb0565b9051908115611487570490565b634e487b7160e01b600052601260045260246000fd5b60038101906001600160a01b038093168060005282602052604060002090604051946114c886610f72565b8083541686526001830154946020870192868452600360028601549560408a019687520154600160608a019782895201549081811461155857670de0b6b3a764000061151d60039a61049b6115259486610fb0565b048751610fd3565b8652865260005260205260406000209551166001600160a01b031986541617855551600185015551600284015551910155565b50505050505050505050565b9061156e826115b3565b826001829401908282540361158257505050565b60009055557fee6950fa914047f22a73cfd1d28ca7684f4ab6fd927d35598326a759e3ea6dde6020604051848152a1565b6001810154905490670de0b6b3a76400009180830292830403610fbd57620f42406115df920490610fd3565b9056fea2646970667358221220c43ab9e97cafe97f242e3e0a6e53ccd989cc8764f7f8f32d5854f8bec5d6208264736f6c63430008140033",
  "deployedBytecode": "0x60806040818152307f0000000000000000000000000000000000000000000000000000000000000000146004908136101561003957600080fd5b600093843560e01c90816303d9eb8414610db8575080631cfada8814610cf45780632ce9a45f14610cd75780633299ded114610ad057806370d07b8214610aad57806377e7a4e7146109645780638b26588d146108d057806392bb1514146107655780639dc96a3a14610750578063a9479ab114610728578063af5907fa14610660578063cd985a90146104af578063ed6de06014610411578063f351007e146102f65763f9dc3251146100ec57600080fd5b6102f2576100f936610ec0565b9492959184870191808452602091838352858520966001600160a01b03808954169889156102e257600181019283548c116102d457600282019a61013e8d8d54611180565b908134106102c457908892918f8f908e8e600360019301809886835252200154106102b4578b80809381935af13d156102af573d67ffffffffffffffff811161029c578c5190610197601f8201601f19168c0183610f8e565b81528b8a3d92013e5b1561027457506102479a9b9c338a52818852838b8b20541615610263575b508282541689528087528c6101da60018c8c2001918254610fb0565b905533895286526001898920016101f28d8254610fd3565b90555416985499815480821460001461024b575050508161021291611090565b50835252600282822082815582600182015501555b5192839283602090939291936001600160a01b0360408201951681520152565b0390f35b9350935094505061025c9250610fb0565b9055610227565b61026e9033906111e4565b386101be565b8a5162461bcd60e51b815290810188905260026024820152612a2360f11b6044820152606490fd5b634e487b7160e01b8c526041835260248cfd5b6101a0565b8c51633999656760e01b81528390fd5b8b5163cd1c886760e01b81528390fd5b89516358ee643f60e01b8152fd5b885163d36d896560e01b81528390fd5b8280fd5b509190916102f25761030736610ede565b93909160038101923387528360205284872085519061032582610f72565b6001600160a01b03918282541690818152606060036001850154946020840195865260028101548c85015201549101521561040157879051106103f15780821693841580156103e8575b6103da5750918391600195936103c597958a5284602052858a205416156000146103ca5761039c916111e4565b3387528160205283838820016103b3878254610fb0565b90558652602052842001918254610fd3565b905580f35b506103d490611564565b5061039c565b8651634e46966960e11b8152fd5b5084331461036f565b8551633999656760e01b81528490fd5b86516345e88c4f60e11b81528590fd5b5050816003193601126102f257602092670de0b6b3a76400006104a16104a893359261049b866001600160a01b039283610449610eaa565b168152600387018a522087519261045f84610f72565b815416835261048f6001820154968a8501978852606060036002850154948c8801958652015495019485526115b3565b90519551925190610fb0565b90611180565b0490610fd3565b9051908152f35b5050828260031936011261065d57906024359183519283908054808652602080960191845285842090845b878282106106495750505050816104f2910382610f8e565b8051906104fe82611193565b9361050b87519586610f8e565b828552601f1961051a84611193565b0186855b82811061062d57505050803501835b8381106105975750505050835192808401908085528351809252808686019401925b82811061055c5785850386f35b835180518652808301516001600160a01b0316868401528781015188870152606090810151908601526080909401939281019260010161054f565b806105a561062892856111d0565b5186528288528886208951906105ba82610f3a565b6001600160a01b0380825416835260026001830154928c85019384520154908c84019182526105e985896111d0565b5193511691519051918c51936105fe85610f72565b84528b8401528b830152606082015261061782896111d0565b5261062281886111d0565b50610fe0565b61052d565b6106389593956111ab565b82828a01015201879094929461051e565b8354855290930192600192830192016104da565b80fd5b5082849161071357602092836003193601126102f2576106ce8482600386943561068981611564565b50610694338261149d565b33808752910183528585206002018054979055855163a9059cbb60e01b815291820190815260208101879052909283918291604090910190565b038185305af1801561071e576106e7575b505051908152f35b8481813d8311610717575b6106fc8183610f8e565b8101031261071357518015150361065d57806106df565b5080fd5b503d6106f2565b83513d84823e3d90fd5b509190916102f2573660031901126107135761074d90610746610eaa565b90356111e4565b80f35b6020846104a861075f36610ede565b916113de565b509291926107135760c03660031901126107135780359260243590610788610e8f565b9260a4356001600160a01b039283861695861580156108c7575b6108b75760008781526001870160205260409020546108a757600389013389528060205283838a2084516107d581610f72565b888254168152606060036001840154938460208501526002810154898501520154910152106108975791889991899493896108839b5260205286828620541615610887575b5080519561082787610f08565b33875260208701916064358352600681890194608435865260608a019687528b60808b0198808a5252016020528b209651166001600160a01b03198754161786555160018601555160028501555160038401555191015561101d565b5080f35b61089190836111e4565b3861081a565b8251639fab5d0f60e01b81528590fd5b8151637ffebe8360e01b81528490fd5b8151631559b7d760e21b81528490fd5b503387146107a2565b50839061065d57606036600319011261065d57604435908280350182825280602052848220936001600160a01b0385541680156109555733036109475750600260018501549401549261092581602435611090565b5082526020526002848220828155826001820155015582519182526020820152f35b85516342e8fb9360e11b8152fd5b50855163d36d896560e01b8152fd5b505082602091826003193601126107135735906005820180549061098782611193565b9361099487519586610f8e565b828552601f196109a384611193565b0186855b828110610a9157505050600390810191845b848110610a24575050505050835192808401908085528351809252808686019401925b8281106109e95785850386f35b835180516001600160a01b031686528083015186840152878101518887015260609081015190860152608090940193928101926001016109dc565b80610a32610a8c9284610fef565b906001600160a01b039182915490871b1c168852858a52848b89208c5192610a5984610f72565b815416835260018101548c84015260028101548d84015201546060820152610a81828a6111d0565b5261062281896111d0565b6109b9565b610a9c9594956111ab565b82828a0101520187909493946109a7565b5092909261065d57602036600319011261065d57506104a86020923390356112cd565b5050828260031936011261065d5760243590835192839283815491828752602080970190855286852092855b88828210610cc157505050610b1392500384610f8e565b825190610b1f82611193565b93610b2c87519586610f8e565b828552601f19610b3b84611193565b0186855b828110610c8357505050813560060191845b848110610bd3575050505050835192808401908085528351809252808686019401925b828110610b815785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101610b74565b610c7e906001600160a01b0380610bea83876111d0565b51168852858a5289858c86818c208251958693610c0685610f08565b818354168552600183015487860190815260028401549282870193845280610c478c600388015498606098898c019a8b5201549a6080809b019b8c526111d0565b5116995116905192519451965197825199610c618b610f56565b8a5289015287015285015283015260a0820152610a81828a6111d0565b610b51565b8995949551610c9181610f56565b8781528783820152878b8201528760608201528760808201528760a082015282828a010152018790949394610b3f565b8554845260019586019589955093019201610afc565b848383610713576020366003190112610713576108839035611564565b5082849161071357610d0536610ec0565b92909233865260038201602052836001868820015410610da8578315610d985791816002610d85948160209a9501966001600160a01b038989549b8c98825197610d4e89610f3a565b3389528f89019586528389019687528a8352018e52209451166001600160a01b03198554161784555160018401555191015561101d565b50610d908154610fe0565b905551908152f35b84516310eb483f60e21b81528790fd5b8451633999656760e01b81528790fd5b858486856102f25760603660031901126102f2578135610dd6610e8f565b9460068201916001600160a01b038088169283885284602052858820610dfb82610f08565b82815416825287600182015491826020850152600281015489850152600381015460608501520154608083015215610e7f5751163303610e6f578596610e40916112cd565b50610e4d81602435611090565b5084526020528220828155826001820155826002820155826003820155015580f35b505050516309f9fa4f60e21b8152fd5b855163694f351f60e01b81528790fd5b604435906001600160a01b0382168203610ea557565b600080fd5b602435906001600160a01b0382168203610ea557565b6080906003190112610ea55760043590602435906044359060643590565b6060906003190112610ea557600435906024356001600160a01b0381168103610ea5579060443590565b60a0810190811067ffffffffffffffff821117610f2457604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610f2457604052565b60c0810190811067ffffffffffffffff821117610f2457604052565b6080810190811067ffffffffffffffff821117610f2457604052565b90601f8019910116810190811067ffffffffffffffff821117610f2457604052565b91908203918211610fbd57565b634e487b7160e01b600052601160045260246000fd5b91908201809211610fbd57565b6000198114610fbd5760010190565b80548210156110075760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60008281526001820160205260409020546110895780549068010000000000000000821015610f24578261107261105b846001809601855584610fef565b819391549060031b91821b91600019901b19161790565b905580549260005201602052604060002055600190565b5050600090565b906001820190600092818452826020526040842054908115156000146111795760001991808301818111611165578254908482019182116111515781810361111c575b50505080548015611108578201916110eb8383610fef565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b61113c61112c61105b9386610fef565b90549060031b1c92839286610fef565b905586528460205260408620553880806110d3565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b5050505090565b81810292918115918404141715610fbd57565b67ffffffffffffffff8111610f245760051b60200190565b604051906111b882610f72565b60006060838281528260208201528260408201520152565b80518210156110075760209160051b010190565b60038101906001600160a01b038093169160009183835281602052846040842054166112bb5760059161121682611564565b5060036040519161122683610f72565b868352602083018681526040840190878252606085019288845289895260205289604089209551166001600160a01b03198654161785555160018501555160028401555191015501805491680100000000000000008310156112a757509061129391600182018155610fef565b909283549160031b92831b921b1916179055565b634e487b7160e01b81526041600452602490fd5b604051633b0f774360e11b8152600490fd5b916001600160a01b0380831660009080825260068601602052604092838320956001870154156113cd57611303904290896113de565b956004810161131481548099610fb0565b9788611327575b50505050505050909150565b90611336896003959493610fd3565b905554169682887fc800dba4e4ee938f9d72daf6b9a44b6e148a9dabe80a5e295e585cca791a5449602088518b8152a3019086835281602052856001858520015411156113bc5760019495968352816020528484842001611398888254610fb0565b9055825260205220016113ac838254610fd3565b905581903880808080808061131b565b8351633999656760e01b8152600490fd5b845163694f351f60e01b8152600490fd5b6006906001600160a01b03809316600052016020526040600020916040519161140683610f08565b83541682526001830154906020830191808352600285015460408501948186526080600460038901549860608401998a52015491015281831060001461145157505050505050600090565b61145a91610fd3565b811115611468575050505190565b61049b9061147a939451925190610fb0565b9051908115611487570490565b634e487b7160e01b600052601260045260246000fd5b60038101906001600160a01b038093168060005282602052604060002090604051946114c886610f72565b8083541686526001830154946020870192868452600360028601549560408a019687520154600160608a019782895201549081811461155857670de0b6b3a764000061151d60039a61049b6115259486610fb0565b048751610fd3565b8652865260005260205260406000209551166001600160a01b031986541617855551600185015551600284015551910155565b50505050505050505050565b9061156e826115b3565b826001829401908282540361158257505050565b60009055557fee6950fa914047f22a73cfd1d28ca7684f4ab6fd927d35598326a759e3ea6dde6020604051848152a1565b6001810154905490670de0b6b3a76400009180830292830403610fbd57620f42406115df920490610fd3565b9056fea2646970667358221220c43ab9e97cafe97f242e3e0a6e53ccd989cc8764f7f8f32d5854f8bec5d6208264736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountIsZero()": [
        {
          "notice": "common "
        }
      ],
      "OnlyContributor()": [
        {
          "notice": "Share "
        }
      ]
    },
    "events": {
      "RewardsPerShareUpdated(uint256)": {
        "notice": "Share events "
      }
    },
    "kind": "user",
    "methods": {
      "addContributor(Share.State storage,address)": {
        "notice": "--- contributor --- "
      },
      "addVesting(Share.State storage,EnumerableSet.AddressSet storage,address,uint256,uint256,uint256)": {
        "notice": "----- Vesting ------ "
      },
      "transferShares(Share.State storage,address,uint256)": {
        "notice": "--- share --- "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}