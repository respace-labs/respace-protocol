{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport { IAccessControl } from \"./IAccessControl.sol\";\nimport { Context } from \"../utils/Context.sol\";\nimport { ERC165 } from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account => bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role => RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 id => uint256) private _totalSupply;\n    uint256 private _totalSupplyAll;\n\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids[i]] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids[i]] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Nonces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/CreationFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./lib/TransferUtil.sol\";\nimport \"./lib/Errors.sol\";\nimport \"./interfaces/ICreationFactory.sol\";\n\ncontract CreationFactory is ICreationFactory, Ownable, ERC1155, ERC1155Supply, ReentrancyGuard {\n  uint256 public creatorFeePercent = 0.5 ether; // 50%\n  uint256 public curatorFeePercent = 0.25 ether; // 25%\n  uint256 public protocolFeePercent = 0.25 ether; // 25%\n\n  uint256 public creationIndex;\n  uint256 public ethAmount;\n  address public protocolFeeTo;\n\n  mapping(uint256 => Creation) public creations;\n  mapping(address => uint256[]) public userCreations;\n  mapping(bytes32 id => bool) public minted;\n\n  event Created(uint256 creationId, address indexed creator, string uri, uint256 price);\n  event Minted(uint256 indexed creationId, address indexed minter, address curator, uint256 amount, string mark);\n  event CreationUpdated(uint256 indexed creationId, address indexed creator, string uri, uint256 price);\n  event ProtocolFeeToUpdated(address indexed previousFeeTo, address indexed newFeeTo);\n  event FeePercentUpdated(uint256 creatorFeePercent, uint256 curatorFeePercent, uint256 protocolFeePercent);\n\n  constructor(address initialOwner) ERC1155(\"\") Ownable(initialOwner) {\n    protocolFeeTo = initialOwner;\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  function create(address creator, string calldata uri, uint256 price) public returns (uint256 creationId) {\n    if (price == 0) revert Errors.PriceIsZero();\n    if (bytes(uri).length == 0) revert Errors.URIIsEmpty();\n    creationId = creationIndex;\n    creations[creationId] = Creation(creationId, creator, uri, price);\n    userCreations[creator].push(creationId);\n    creationIndex++;\n    emit Created(creationId, creator, uri, price);\n  }\n\n  function mint(\n    uint256 creationId,\n    uint32 amount,\n    address curator,\n    string calldata mark\n  ) public payable nonReentrant returns (uint256 creatorFee, uint256 protocolFee, uint256 curatorFee) {\n    if (amount == 0) revert Errors.AmountIsZero();\n    if (creationId >= creationIndex) revert Errors.CreationNotFound();\n    Creation memory creation = creations[creationId];\n    uint256 mintFee = creation.price * amount;\n    if (msg.value < mintFee) revert Errors.InsufficientPayment();\n\n    bool isValidCurator = curator != address(0) && minted[keccak256(abi.encode(creationId, curator))];\n\n    protocolFee = (mintFee * protocolFeePercent) / 1 ether;\n    curatorFee = isValidCurator ? (mintFee * curatorFeePercent) / 1 ether : 0;\n    creatorFee = mintFee - protocolFee - curatorFee;\n\n    bytes32 mintedId = keccak256(abi.encode(creationId, msg.sender));\n    if (!minted[mintedId]) minted[mintedId] = true;\n\n    TransferUtil.safeTransferETH(creation.creator, creatorFee);\n    TransferUtil.safeTransferETH(protocolFeeTo, protocolFee);\n\n    if (curatorFee > 0) {\n      TransferUtil.safeTransferETH(curator, curatorFee);\n    }\n\n    ethAmount += mintFee;\n    _mint(msg.sender, creationId, amount, \"\");\n\n    uint256 refundAmount = msg.value - mintFee;\n    if (refundAmount > 0) {\n      TransferUtil.safeTransferETH(msg.sender, refundAmount);\n    }\n\n    emit Minted(creationId, msg.sender, curator, amount, mark);\n  }\n\n  function createAndMint(\n    address creator,\n    string calldata uri,\n    uint256 price,\n    uint32 amount,\n    string calldata mark\n  ) external payable returns (uint256 creationId) {\n    creationId = create(creator, uri, price);\n    mint(creationId, amount, address(0), mark);\n  }\n\n  function updateCreation(uint256 id, string calldata uri, uint256 price) external {\n    Creation storage creation = creations[id];\n    if (creation.creator == address(0)) revert Errors.CreationNotFound();\n    if (creation.creator != msg.sender) revert Errors.OnlyCreator();\n    creation.uri = uri;\n    creation.price = price;\n    emit CreationUpdated(creation.id, creation.creator, uri, price);\n  }\n\n  function setProtocolFeeTo(address _feeTo) external onlyOwner {\n    protocolFeeTo = _feeTo;\n    emit ProtocolFeeToUpdated(protocolFeeTo, _feeTo);\n  }\n\n  function setFeePercent(\n    uint256 _creatorFeePercent,\n    uint256 _curatorFeePercent,\n    uint256 _protocolFeePercent\n  ) external onlyOwner {\n    if (_creatorFeePercent + _curatorFeePercent + _protocolFeePercent != 1 ether) {\n      revert Errors.InvalidFeePercent();\n    }\n\n    creatorFeePercent = _creatorFeePercent;\n    curatorFeePercent = _curatorFeePercent;\n    protocolFeePercent = _protocolFeePercent;\n\n    emit FeePercentUpdated(creatorFeePercent, curatorFeePercent, protocolFeePercent);\n  }\n\n  function getUserCreations(address creator) external view returns (uint256[] memory) {\n    return userCreations[creator];\n  }\n\n  function creationSupply(uint256 id) external view returns (uint256) {\n    return totalSupply(id);\n  }\n\n  function getUserLatestCreation(address creator) external view returns (Creation memory creation) {\n    uint256[] memory creationIds = userCreations[creator];\n    if (creationIds.length > 0) {\n      creation = creations[creationIds[creationIds.length - 1]];\n    }\n  }\n\n  function _update(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory values\n  ) internal override(ERC1155, ERC1155Supply) {\n    super._update(from, to, ids, values);\n  }\n}\n"
    },
    "contracts/interfaces/ICreationFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nstruct Creation {\n  uint256 id;\n  address creator;\n  string uri;\n  uint256 price;\n}\n\ninterface ICreationFactory {\n  function create(address creator, string calldata uri, uint256 price) external returns (uint256 creationId);\n\n  function mint(\n    uint256 creationId,\n    uint32 amount,\n    address curator,\n    string calldata mark\n  ) external payable returns (uint256 creatorFee, uint256 protocolFee, uint256 curatorFee);\n\n  function getUserCreations(address creator) external view returns (uint256[] memory);\n\n  function getUserLatestCreation(address creator) external view returns (Creation memory creation);\n\n  function creationSupply(uint256 id) external view returns (uint256);\n\n  function setProtocolFeeTo(address _feeTo) external;\n\n  function setFeePercent(uint256 _creatorFeePercent, uint256 _curatorFeePercent, uint256 _protocolFeePercent) external;\n\n  function updateCreation(uint256 id, string calldata uri, uint256 price) external;\n}\n"
    },
    "contracts/interfaces/ISpace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Token\nstruct BuyInfo {\n  uint256 newX;\n  uint256 newY;\n  uint256 ethAmount;\n  uint256 tokenAmountAfterFee;\n  uint256 creatorFee;\n  uint256 protocolFee;\n}\n\nstruct SellInfo {\n  uint256 newX;\n  uint256 newY;\n  uint256 ethAmount;\n  uint256 tokenAmountAfterFee;\n  uint256 creatorFee;\n  uint256 protocolFee;\n}\n\n// Member\nstruct Plan {\n  string uri;\n  uint256 price;\n  uint256 minEthAmount;\n  bool isActive;\n}\n\nstruct Subscription {\n  uint8 planId;\n  address account;\n  uint256 startTime;\n  uint256 duration;\n  uint256 amount;\n}\n\n// Share\nstruct OrderInfo {\n  uint256 orderId;\n  address seller;\n  uint256 amount;\n  uint256 price;\n}\n\nstruct Contributor {\n  address account;\n  uint256 shares;\n  uint256 rewards;\n  uint256 checkpoint;\n}\n\nstruct VestingInfo {\n  address beneficiary;\n  address payer;\n  uint256 start;\n  uint256 duration;\n  uint256 allocation;\n  uint256 released;\n}\n\n// Staking\nstruct Staker {\n  address account;\n  uint256 staked;\n  uint256 realized;\n  uint256 checkpoint;\n}\n\n// Curator\nstruct CurationUser {\n  address curator; // your curator\n  uint256 rewards;\n  uint256 memberCount;\n  bool registered;\n}\n\nstruct Tier {\n  uint256 memberCountBreakpoint;\n  uint256 rebateRate;\n}\n\nstruct Config {\n  string uri;\n  uint256 stakingRevenuePercent;\n  uint256 subscriptionFeePercent;\n}\n\ninterface ISpace {\n  function buy(uint256 minReturnAmount) external payable returns (BuyInfo memory);\n\n  function sell(uint256 tokenAmount, uint256 minReturnAmount) external payable returns (SellInfo memory);\n\n  // Member\n\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external;\n\n  function updatePlan(uint8 id, string calldata _uri, uint256 price, uint256 minEthAmount, bool isActive) external;\n\n  function getPlans() external view returns (Plan[] memory);\n\n  function subscribe(uint8 planId, uint256 amount) external;\n\n  function subscribeByEth(uint8 planId) external payable;\n\n  function unsubscribe(uint8 planId, uint256 amount) external;\n\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external;\n\n  function distributeSingleSubscription(uint8 planId, address account) external;\n\n  function getSubscriptions() external view returns (Subscription[] memory);\n\n  function calculateConsumedAmount(\n    uint8 planId,\n    address account,\n    uint256 timestamp\n  ) external view returns (uint256, uint256);\n\n  // Share\n\n  function addContributor(address account) external;\n\n  function distributeShareRewards() external;\n\n  function claimShareRewards() external returns (uint256 amount);\n\n  function transferShares(address to, uint256 amount) external;\n\n  function createShareOrder(uint256 amount, uint256 price) external returns (uint256 orderId);\n\n  function cancelShareOrder(uint256 orderId) external;\n\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable;\n\n  function getShareOrders() external view returns (OrderInfo[] memory);\n\n  function getContributors() external view returns (Contributor[] memory);\n\n  function currentContributorRewards(address account) external view returns (uint256);\n\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external;\n\n  function claimVesting() external returns (uint256 amount);\n\n  function removeVesting(address beneficiary) external;\n\n  function getVestings() external view returns (VestingInfo[] memory);\n\n  // Staking\n\n  function currentUserRewards(address account) external view returns (uint256);\n\n  function getStaker(address account) external view returns (Staker memory);\n\n  function stake(uint256 amount) external;\n\n  function unstake(uint256 amount) external;\n\n  function claimStakingRewards() external returns (uint256 amount);\n\n  // Curation\n\n  function createCode(bytes32 _code) external;\n\n  function updateCode(bytes32 _code) external;\n\n  function bindCode(bytes32 _code) external;\n\n  function getCurationUser(address account) external view returns (CurationUser memory);\n\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory);\n\n  function getCodeByCurator(address account) external view returns (bytes32);\n\n  function getCuratorByCode(bytes32 code) external view returns (address);\n\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external;\n\n  function getTier(uint256 id) external view returns (Tier memory);\n\n  function claimCurationRewards() external returns (uint256 rewards);\n\n  // Others\n\n  function updateConfig(string calldata uri, uint256 percent) external;\n\n  function depositSpaceToken(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/ISpaceFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nstruct App {\n  address creator;\n  string uri;\n  address feeReceiver;\n  uint256 feePercent; // subscription percent\n}\n\nstruct CreateSpaceInput {\n  uint256 appId;\n  string spaceName;\n  string symbol;\n  string uri;\n  uint256 preBuyEthAmount;\n}\n\ninterface ISpaceFactory {\n  function setPrice(uint256 _price) external;\n\n  function setFeeReceiver(address _receiver) external;\n\n  function createSpace(CreateSpaceInput calldata input) external payable;\n\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\n\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\n\n  function getApp(uint256 id) external view returns (App memory);\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minTokenAmount\n  ) external returns (uint256 returnAmount);\n\n  function getUserSpaces(address account) external view returns (address[] memory);\n\n  function isSpace(address spaceAddress) external view returns (bool);\n}\n"
    },
    "contracts/lib/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// 30 days\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\n\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\n\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\n\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\n\nuint256 constant SHARES_SUPPLY = 1_000_000;\n\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\n\n// two years\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\n\nuint256 constant PREMINT_ETH_AMOUNT = 3.3333 ether;\n"
    },
    "contracts/lib/Curation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Events.sol\";\nimport \"./Errors.sol\";\nimport \"./TransferUtil.sol\";\nimport \"../interfaces/ISpace.sol\";\n\nlibrary Curation {\n\n\n  struct State {\n    uint256 curatorCount;\n    mapping(address => CurationUser) users;\n    // @dev mapping of referral code to curator\n    mapping(bytes32 => address) curators;\n    // @dev mapping of curator to referral code\n    mapping(address => bytes32) codes;\n    // link between user <> tier\n    mapping(address => bool) isActives; // TODO:\n    mapping(uint256 => Tier) tiers;\n  }\n\n  // create self invitation code\n  function createCode(State storage self, bytes32 code) external {\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\n    address account = msg.sender;\n    if (self.codes[account] != bytes32(0)) revert Errors.CodeAlreadyExists();\n\n    if (!self.users[account].registered) {\n      self.users[account] = CurationUser(address(0), 0, 0, true);\n      ++self.curatorCount;\n    }\n    self.codes[account] = code;\n    self.curators[code] = account;\n  }\n\n  // update self invitation code\n  function updateCode(State storage self, bytes32 code) external {\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\n    if (self.codes[msg.sender] == bytes32(0)) revert Errors.ShouldCreateCodeFirstly();\n\n    if (self.curators[code] != address(0)) revert Errors.CodeIsUsed();\n\n    bytes32 prevCode = self.codes[msg.sender];\n    self.curators[code] = msg.sender;\n    self.codes[msg.sender] = code;\n    delete self.curators[prevCode];\n  }\n\n  // bind code\n  function bindCode(State storage self, bytes32 code) external {\n    if (code == bytes32(0)) revert Errors.CodeIsEmpty();\n    if (self.curators[code] == address(0)) revert Errors.CodeNotExists();\n    if (self.codes[msg.sender] == code || self.curators[code] == msg.sender) {\n      revert Errors.CannotInviteYourself();\n    }\n\n    address curator = self.curators[code];\n\n    CurationUser storage me = self.users[msg.sender];\n    if (me.curator != address(0)) revert Errors.UserIsInvited();\n\n    if (!me.registered) {\n      me.registered = true;\n      ++self.curatorCount;\n    }\n    me.curator = curator;\n  }\n\n  function increaseMemberCount(State storage self, address invitee) external {\n    CurationUser memory inviteeUser = self.users[invitee];\n    if (inviteeUser.curator != address(0)) {\n      self.users[inviteeUser.curator].memberCount += 1;\n    }\n  }\n\n  function decreaseMemberCount(State storage self, address invitee) external {\n    CurationUser memory inviteeUser = self.users[invitee];\n    if (inviteeUser.curator != address(0)) {\n      self.users[inviteeUser.curator].memberCount -= 1;\n    }\n  }\n\n  function getUser(State storage self, address account) external view returns (CurationUser memory) {\n    return self.users[account];\n  }\n\n  function getUserByCode(State storage self, bytes32 code) external view returns (CurationUser memory) {\n    return self.users[self.curators[code]];\n  }\n\n  function getCodeByCurator(State storage self, address curator) external view returns (bytes32) {\n    return self.codes[curator];\n  }\n\n  function getCuratorByCode(State storage self, bytes32 code) external view returns (address) {\n    return self.curators[code];\n  }\n\n  function initTiers(State storage self) external {\n    self.tiers[0].memberCountBreakpoint = 10;\n    self.tiers[0].rebateRate = 0.1 ether; // 10%\n\n    self.tiers[1].memberCountBreakpoint = 20;\n    self.tiers[1].rebateRate = 0.2 ether; // 20%\n\n    self.tiers[2].memberCountBreakpoint = 40;\n    self.tiers[2].rebateRate = 0.4 ether; // 40%\n  }\n\n  function updateTier(State storage self, uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external {\n    self.tiers[id].memberCountBreakpoint = memberCountBreakpoint;\n    self.tiers[id].rebateRate = rebateRate;\n  }\n\n  function getTier(State storage self, uint256 id) external view returns (Tier memory) {\n    return self.tiers[id];\n  }\n\n  function getRebateRate(State storage self, uint256 memberCount) external view returns (uint256) {\n    Tier memory tier0 = self.tiers[0];\n    if (memberCount <= tier0.memberCountBreakpoint) {\n      return tier0.rebateRate;\n    }\n\n    Tier memory tier1 = self.tiers[1];\n    if (memberCount <= tier1.memberCountBreakpoint) {\n      return tier1.rebateRate;\n    }\n    return self.tiers[2].rebateRate;\n  }\n\n  function claimRewards(State storage self) external returns (uint256 rewards) {\n    CurationUser storage user = self.users[msg.sender];\n    if (user.rewards > 0) {\n      IERC20(address(this)).transfer(msg.sender, user.rewards);\n      rewards = user.rewards;\n      user.rewards = 0;\n    }\n  }\n}\n"
    },
    "contracts/lib/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary Errors {\n  /** common */\n  error AmountIsZero();\n  error AmountTooLarge();\n  error PriceIsZero();\n  error EthAmountIsZero();\n  error InsufficientPayment();\n  error OnlyCreator();\n  error InvalidAddress();\n\n  /** CreationFactory */\n  error URIIsEmpty();\n  error CreationNotFound();\n  error InvalidFeePercent();\n\n  /** SpaceFactory */\n  error InvalidAppId();\n  error AppNotFound();\n  error InvalidFeeReceiver();\n  // appFeePercent must be <= 20%\n  error InvalidAppFeePercent();\n  error InvalidTokens();\n\n  /** Space */\n  error OnlyFactory();\n  error TokenAmountTooLarge();\n  // Staking revenue percent must be >= 10% And <= 100%\n  error InvalidStakingRevenuePercent();\n\n  /** Token */\n  error SlippageTooHigh();\n\n  /** Member */\n  error PlanNotExisted();\n  error PlanNotActive();\n  error SubscribeAmountTooSmall();\n  error ContributorExisted();\n\n  /** Share */\n  error OnlyContributor();\n  error InsufficientShares();\n  error InvalidRecipient();\n  error OrderNotFound();\n  error OnlySeller();\n  error OnlyPayer();\n  error ExceedOrderAmount();\n  error InvalidBeneficiary();\n  error BeneficiaryExists();\n  error BeneficiaryNotFound();\n  error AllocationTooLarge();\n\n  /** curation */\n  error CodeIsEmpty();\n  error CodeAlreadyExists();\n  error ShouldCreateCodeFirstly();\n  error CodeIsUsed();\n  error CodeNotExists();\n  error CannotInviteYourself();\n  error UserIsInvited();\n  error SubscriptionNotFound();\n}\n"
    },
    "contracts/lib/Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary Events {\n  /** SpaceFactory events */\n  event SpaceCreated(\n    uint256 indexed spaceId,\n    address spaceAddress,\n    address founder,\n    string spaceName,\n    string symbol,\n    string uri,\n    uint256 preBuyEthAmount\n  );\n  event PriceUpdated(uint256 price);\n  event FeeReceiverUpdated(address receiver);\n  event WithdrawEther(address indexed to, uint256 amount);\n  event WithdrawToken(address indexed to, address token, uint256 amount);\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\n\n  /** App events */\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\n\n  /** space events */\n  event SpaceConfigUpdated(string uri, uint256 percent);\n  event TokenDeposited(uint256 amount);\n\n  /** Token events */\n  event Trade(\n    TradeType indexed tradeType,\n    address indexed account,\n    uint256 ethAmount,\n    uint256 tokenAmount,\n    uint256 creatorFee,\n    uint256 protocolFee,\n    uint256 balance\n  );\n\n  enum TradeType {\n    Buy,\n    Sell\n  }\n\n  /** Staking events */\n  event Staked(address indexed account, uint256 amount);\n  event Unstaked(address indexed account, uint256 amount);\n  event StakingClaimed(address account, uint256 amount);\n  event RewardsPerTokenUpdated(uint256 accumulated);\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\n  event YieldReleased(uint256 amount);\n\n  /** Member events */\n  event Subscribed(\n    uint8 indexed planId,\n    bool isUsingEth,\n    address indexed account,\n    uint256 tokenAmount,\n    uint256 changedDuration,\n    uint256 remainingDuration\n  );\n  event Unsubscribed(\n    uint8 indexed planId,\n    address indexed account,\n    uint256 tokenAmount,\n    uint256 changedDuration,\n    uint256 remainingDuration\n  );\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\n  event DistributeSubscriptionRewards(address caller, uint256 mintPastDuration);\n  event DistributeSingleSubscription(uint8 indexed planId, address account);\n\n  /** Share events */\n  event RewardsPerShareUpdated(uint256 accumulated);\n  event ShareRewardsClaimed(address account, uint256 amount);\n  event ShareRewardsDistributed(address account);\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\n  event ContributorAdded(address indexed account);\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\n  event ShareOrderExecuted(\n    uint256 indexed orderId,\n    address indexed seller,\n    address buyer,\n    uint256 amount,\n    uint256 price\n  );\n  event VestingAdded(\n    address indexed payer,\n    address indexed beneficiary,\n    uint256 start,\n    uint256 duration,\n    uint256 allocation\n  );\n  event VestingRemoved(address indexed payer, address indexed beneficiary);\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\n  event VestingClaimed(address indexed beneficiary, uint256 amount);\n\n  /** Curation events */\n  event CodeCreated(address indexed account, bytes32 _code);\n  event CodeUpdated(address indexed account, bytes32 _code);\n  event CodeBound(address indexed account, bytes32 _code);\n  event TierUpdated(uint256 indexed id, uint256 memberCountBreakpoint, uint256 rebateRate);\n  event CurationRewardsClaimed(address account, uint256 amount);\n}\n"
    },
    "contracts/lib/Member.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Token.sol\";\nimport \"./Curation.sol\";\nimport \"./Events.sol\";\nimport \"./Constants.sol\";\n\nlibrary Member {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.Bytes32Set;\n\n  struct State {\n    uint8 planIndex;\n    uint256 subscriptionIndex;\n    uint256 subscriptionIncome;\n    mapping(uint8 => Plan) plans;\n    mapping(bytes32 => Subscription) subscriptions;\n  }\n\n  /* Plan */\n  function createPlan(\n    State storage self,\n    string calldata uri,\n    uint256 price,\n    uint256 minEthAmount\n  ) external returns (uint8 planId) {\n    if (price == 0) revert Errors.PriceIsZero();\n    planId = self.planIndex;\n    self.plans[planId] = Plan(uri, price, minEthAmount, true);\n    ++self.planIndex;\n  }\n\n  function updatePlan(\n    State storage self,\n    uint8 id,\n    string calldata uri,\n    uint256 price,\n    uint256 minEthAmount,\n    bool isActive\n  ) external {\n    if (price == 0) revert Errors.PriceIsZero();\n    if (id >= self.planIndex) revert Errors.PlanNotExisted();\n    self.plans[id].uri = uri;\n    self.plans[id].price = price;\n    self.plans[id].minEthAmount = minEthAmount;\n    self.plans[id].isActive = isActive;\n  }\n\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\n    uint256 len = self.planIndex;\n    plans = new Plan[](len);\n    for (uint8 i = 0; i < len; i++) {\n      plans[i] = self.plans[i];\n    }\n  }\n\n  /* ====== Subscription ======= */\n\n  function subscribe(\n    State storage self,\n    Token.State memory token,\n    Curation.State storage curation,\n    EnumerableSet.Bytes32Set storage subscriptionIds,\n    uint8 planId,\n    uint256 tokenAmount\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\n    if (planId >= self.planIndex) revert Errors.PlanNotExisted();\n    if (tokenAmount == 0) revert Errors.EthAmountIsZero();\n\n    Plan memory plan = self.plans[planId];\n    if (!plan.isActive) revert Errors.PlanNotActive();\n\n    uint256 minimumSubscriptionTokens = calculateMinimumSubscriptionTokens(token, plan);\n    if (tokenAmount < minimumSubscriptionTokens) revert Errors.SubscribeAmountTooSmall();\n\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\n    Subscription storage subscription = self.subscriptions[id];\n\n    // Calculate the subscription duration\n    increasingDuration = calculateIncreasingDuration(token, plan, tokenAmount);\n\n    // Initialize subscription if it does not exist\n    if (subscription.startTime == 0) {\n      subscription.planId = planId;\n      subscription.account = msg.sender;\n      subscriptionIds.add(id);\n      remainingDuration = increasingDuration;\n\n      Curation.increaseMemberCount(curation, msg.sender);\n    } else {\n      // Calculate consumed amount and remaining duration\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\n    }\n\n    // Update subscription details\n    subscription.startTime = block.timestamp;\n    subscription.amount += tokenAmount;\n    subscription.duration += increasingDuration;\n  }\n\n  function unsubscribe(\n    State storage self,\n    Curation.State storage curation,\n    EnumerableSet.Bytes32Set storage subscriptionIds,\n    uint8 planId,\n    uint256 amount\n  )\n    external\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\n  {\n    if (amount == 0) revert Errors.AmountIsZero();\n\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\n    Subscription storage subscription = self.subscriptions[id];\n    if (subscription.startTime == 0) revert Errors.SubscriptionNotFound();\n\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, curation, subscriptionIds, id);\n\n    // Calculate the amount to transfer\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\n\n    if (amount >= subscription.amount) {\n      // Unsubscribe completely\n      delete self.subscriptions[id];\n      subscriptionIds.remove(id);\n      unsubscribeAmount = subscription.amount;\n      unsubscribedDuration = subscription.duration;\n    } else {\n      // Partially unsubscribe\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\n      subscription.amount -= amount;\n      subscription.duration -= unsubscribedDuration;\n      unsubscribeAmount = amount;\n    }\n  }\n\n  function distributeSingleSubscription(\n    State storage self,\n    Curation.State storage curation,\n    EnumerableSet.Bytes32Set storage subscriptionIds,\n    bytes32 id\n  ) public returns (uint256, uint256) {\n    Subscription storage subscription = self.subscriptions[id];\n    if (subscription.startTime == 0) return (0, 0);\n\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\n\n    if (consumedAmount == 0) return (0, 0);\n\n    /** expired */\n    if (subscription.startTime + subscription.duration <= block.timestamp) {\n      Curation.decreaseMemberCount(curation, subscription.account);\n      delete self.subscriptions[id];\n      subscriptionIds.remove(id);\n    } else {\n      subscription.startTime = block.timestamp;\n      subscription.amount -= consumedAmount;\n      subscription.duration = remainingDuration;\n    }\n\n    return (consumedAmount, remainingDuration);\n  }\n\n  function getSubscriptions(\n    State storage self,\n    EnumerableSet.Bytes32Set storage subscriptionIds\n  ) external view returns (Subscription[] memory) {\n    bytes32[] memory ids = subscriptionIds.values();\n    uint256 len = ids.length;\n    Subscription[] memory subscriptions = new Subscription[](len);\n\n    for (uint256 i = 0; i < len; i++) {\n      subscriptions[i] = self.subscriptions[ids[i]];\n    }\n    return subscriptions;\n  }\n\n  function calculateConsumedAmount(\n    State storage self,\n    bytes32 id,\n    uint256 timestamp\n  ) public view returns (uint256, uint256) {\n    Subscription memory subscription = self.subscriptions[id];\n\n    if (subscription.startTime == 0) return (0, 0);\n\n    /** Invalid timestamp */\n    if (timestamp < subscription.startTime) return (0, 0);\n\n    uint256 pastDuration = timestamp - subscription.startTime;\n\n    /** Expired, all should be consumed */\n    if (pastDuration >= subscription.duration) {\n      return (subscription.amount, 0);\n    }\n\n    uint256 remainingDuration = subscription.duration - pastDuration;\n\n    // calculate consumedAmount by ratio of (pastDuration/duration)\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\n    return (consumedAmount, remainingDuration);\n  }\n\n  function calculateIncreasingDuration(\n    Token.State memory token,\n    Plan memory plan,\n    uint256 tokenAmount\n  ) internal pure returns (uint256 duration) {\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\n    duration = tokenAmount / info.tokenAmountAfterFee;\n  }\n\n  function calculateMinimumSubscriptionTokens(\n    Token.State memory token,\n    Plan memory plan\n  ) internal pure returns (uint256) {\n    uint256 ethPricePerSecond = plan.minEthAmount / SECONDS_PER_MONTH;\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\n    return info.tokenAmountAfterFee * SECONDS_PER_MONTH;\n  }\n\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\n    return keccak256(abi.encode(planId, account));\n  }\n}\n"
    },
    "contracts/lib/Share.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./TransferUtil.sol\";\nimport \"./Events.sol\";\nimport \"./Errors.sol\";\nimport \"./Constants.sol\";\nimport \"../interfaces/ISpace.sol\";\n\nlibrary Share {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.UintSet;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  struct Order {\n    address seller;\n    uint256 amount;\n    uint256 price;\n  }\n\n  struct Vesting {\n    address payer;\n    uint256 start;\n    uint256 duration;\n    uint256 allocation; // allocation share amount\n    uint256 released; // released share amount\n  }\n\n  struct State {\n    uint256 daoRevenue;\n    uint256 accumulatedRewardsPerShare;\n    uint256 orderIndex;\n    mapping(address => Contributor) contributors;\n    mapping(uint256 => Order) orders;\n    address[] contributorAddresses;\n    mapping(address => Vesting) vestings;\n  }\n\n  /** --- share --- */\n\n  function transferShares(State storage self, address to, uint256 amount) external {\n    Contributor memory contributor = self.contributors[msg.sender];\n    if (contributor.account == address(0)) {\n      revert Errors.OnlyContributor();\n    }\n    if (contributor.shares < amount) {\n      revert Errors.InsufficientShares();\n    }\n    if (to == address(0) || msg.sender == to) {\n      revert Errors.InvalidRecipient();\n    }\n\n    if (self.contributors[to].account == address(0)) {\n      addContributor(self, to);\n    } else {\n      _updateRewardsPerShare(self);\n    }\n\n    self.contributors[msg.sender].shares -= amount;\n    self.contributors[to].shares += amount;\n  }\n\n  function createShareOrder(\n    State storage self,\n    EnumerableSet.UintSet storage orderIds,\n    uint256 amount,\n    uint256 price\n  ) external returns (uint256 orderId) {\n    Contributor storage contributor = self.contributors[msg.sender];\n    if (contributor.shares < amount) revert Errors.InsufficientShares();\n    if (amount == 0) revert Errors.AmountIsZero();\n    orderId = self.orderIndex;\n    self.orders[orderId] = Order(msg.sender, amount, price);\n    orderIds.add(orderId);\n    self.orderIndex++;\n  }\n\n  function cancelShareOrder(\n    State storage self,\n    EnumerableSet.UintSet storage orderIds,\n    uint256 orderId\n  ) external returns (uint256 amount, uint256 price) {\n    Order storage order = self.orders[orderId];\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\n    if (order.seller != msg.sender) revert Errors.OnlySeller();\n    amount = order.amount;\n    price = order.price;\n    orderIds.remove(orderId);\n    delete self.orders[orderId];\n  }\n\n  function executeShareOrder(\n    State storage self,\n    EnumerableSet.UintSet storage orderIds,\n    uint256 orderId,\n    uint256 amount\n  ) external returns (address seller, uint256 price) {\n    Order storage order = self.orders[orderId];\n    if (order.seller == address(0)) revert Errors.OrderNotFound();\n    if (amount > order.amount) revert Errors.ExceedOrderAmount();\n    uint256 ethAmount = order.price * amount;\n    if (msg.value < ethAmount) revert Errors.InsufficientPayment();\n    if (self.contributors[order.seller].shares < amount) {\n      revert Errors.InsufficientShares();\n    }\n\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\n\n    if (self.contributors[msg.sender].account == address(0)) {\n      addContributor(self, msg.sender);\n    }\n\n    self.contributors[order.seller].shares -= amount;\n    self.contributors[msg.sender].shares += amount;\n\n    seller = order.seller;\n    price = order.price;\n\n    if (amount == order.amount) {\n      orderIds.remove(orderId);\n      delete self.orders[orderId];\n    } else {\n      order.amount -= amount;\n    }\n  }\n\n  function getShareOrders(\n    State storage self,\n    EnumerableSet.UintSet storage orderIds\n  ) external view returns (OrderInfo[] memory) {\n    uint256[] memory ids = orderIds.values();\n    uint256 len = ids.length;\n    OrderInfo[] memory orders = new OrderInfo[](len);\n\n    for (uint256 i = 0; i < len; i++) {\n      Order memory order = self.orders[ids[i]];\n      orders[i] = OrderInfo(ids[i], order.seller, order.amount, order.price);\n    }\n    return orders;\n  }\n\n  /** --- contributor --- */\n\n  function addContributor(State storage self, address account) public {\n    if (self.contributors[account].account != address(0)) {\n      revert Errors.ContributorExisted();\n    }\n    _updateRewardsPerShare(self);\n    self.contributors[account] = Contributor(account, 0, 0, 0);\n    self.contributorAddresses.push(account);\n  }\n\n  function getContributors(State storage self) external view returns (Contributor[] memory) {\n    Contributor[] memory info = new Contributor[](self.contributorAddresses.length);\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\n      info[i] = self.contributors[self.contributorAddresses[i]];\n    }\n    return info;\n  }\n\n  function claimRewards(State storage self) external returns (uint256 amount) {\n    address account = msg.sender;\n    _updateRewardsPerShare(self);\n    _updateContributorRewards(self, account);\n\n    amount = self.contributors[account].rewards;\n    self.contributors[account].rewards = 0;\n\n    IERC20(address(this)).transfer(msg.sender, amount);\n  }\n\n  function distribute(State storage self) external {\n    _updateRewardsPerShare(self);\n  }\n\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\n    Contributor memory contributor = self.contributors[account];\n\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\n\n    uint256 rewards = contributor.rewards +\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\n\n    return rewards;\n  }\n\n  /** ----- Vesting ------ */\n\n  function addVesting(\n    State storage self,\n    EnumerableSet.AddressSet storage vestingAddresses,\n    address beneficiary,\n    uint256 startTime,\n    uint256 duration,\n    uint256 allocation\n  ) external {\n    if (beneficiary == address(0) || beneficiary == msg.sender) {\n      revert Errors.InvalidBeneficiary();\n    }\n    if (vestingAddresses.contains(beneficiary)) {\n      revert Errors.BeneficiaryExists();\n    }\n\n    Contributor memory payer = self.contributors[msg.sender];\n\n    if (payer.shares < allocation) {\n      revert Errors.AllocationTooLarge();\n    }\n\n    if (self.contributors[beneficiary].account == address(0)) {\n      addContributor(self, beneficiary);\n    }\n\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\n    vestingAddresses.add(beneficiary);\n  }\n\n  function claimVesting(State storage self) external returns (uint256) {\n    return _claimVesting(self, msg.sender);\n  }\n\n  function _claimVesting(State storage self, address beneficiary) internal returns (uint256 releasable) {\n    Vesting storage vesting = self.vestings[beneficiary];\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\n\n    releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\n\n    if (releasable > 0) {\n      vesting.released += releasable;\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\n\n      if (self.contributors[vesting.payer].shares <= releasable) {\n        revert Errors.InsufficientShares();\n      }\n\n      self.contributors[vesting.payer].shares -= releasable;\n      self.contributors[beneficiary].shares += releasable;\n    }\n  }\n\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\n    Vesting memory vesting = self.vestings[beneficiary];\n\n    if (timestamp < vesting.start) {\n      return 0;\n    } else if (timestamp > vesting.start + vesting.duration) {\n      return vesting.allocation;\n    } else {\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\n    }\n  }\n\n  function removeVesting(\n    State storage self,\n    EnumerableSet.AddressSet storage vestingAddresses,\n    address beneficiary\n  ) external {\n    Vesting memory vesting = self.vestings[beneficiary];\n    if (vesting.start == 0) revert Errors.BeneficiaryNotFound();\n    if (vesting.payer != msg.sender) revert Errors.OnlyPayer();\n    _claimVesting(self, beneficiary);\n    vestingAddresses.remove(beneficiary);\n    delete self.vestings[beneficiary];\n  }\n\n  function getVestings(\n    State storage self,\n    EnumerableSet.AddressSet storage vestingAddresses\n  ) external view returns (VestingInfo[] memory) {\n    address[] memory accounts = vestingAddresses.values();\n    uint256 len = accounts.length;\n    VestingInfo[] memory vestings = new VestingInfo[](len);\n\n    for (uint256 i = 0; i < len; i++) {\n      Vesting memory vesting = self.vestings[accounts[i]];\n      vestings[i] = VestingInfo(\n        accounts[i],\n        vesting.payer,\n        vesting.start,\n        vesting.duration,\n        vesting.allocation,\n        vesting.released\n      );\n    }\n    return vestings;\n  }\n\n  function _updateContributorRewards(State storage self, address account) internal {\n    Contributor memory contributor = self.contributors[account];\n\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\n      return;\n    }\n\n    contributor.rewards += _calculateContributorRewards(\n      contributor.shares,\n      contributor.checkpoint,\n      self.accumulatedRewardsPerShare\n    );\n\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\n    self.contributors[account] = contributor;\n  }\n\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\n    rewardsPerShare = _calculateRewardsPerShare(self);\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\n    // console.log('=====isChanged:', isChanged);\n\n    if (isChanged) {\n      self.daoRevenue = 0;\n      self.accumulatedRewardsPerShare = rewardsPerShare;\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\n    }\n  }\n\n  function _calculateContributorRewards(\n    uint256 shares,\n    uint256 earlierCheckpoint,\n    uint256 latterCheckpoint\n  ) internal pure returns (uint256) {\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\n  }\n\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoRevenue) / SHARES_SUPPLY;\n  }\n}\n"
    },
    "contracts/lib/SpaceCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../Space.sol\";\n\nlibrary SpaceCreator {\n  function createSpace(CreateSpaceInput calldata input) external returns (address) {\n    Space space = new Space(input.appId, address(this), msg.sender, input.spaceName, input.symbol, input.uri);\n    space.initialize();\n    return address(space);\n  }\n}\n"
    },
    "contracts/lib/SpaceHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ISpaceFactory.sol\";\nimport \"../interfaces/ISpace.sol\";\nimport \"./Member.sol\";\nimport \"./Share.sol\";\nimport \"./Staking.sol\";\nimport \"./Curation.sol\";\nimport \"./Events.sol\";\nimport \"./Errors.sol\";\nimport \"./TransferUtil.sol\";\n\nlibrary SpaceHelper {\n  using SafeERC20 for IERC20;\n\n  function initialize(\n    Member.State storage member,\n    Share.State storage share,\n    Curation.State storage curation,\n    Staking.State storage staking,\n    Token.State storage token,\n    address factory,\n    address owner\n  ) external returns (uint8 planId, uint256 premint) {\n    if (msg.sender != factory) revert Errors.OnlyFactory();\n\n    Share.addContributor(share, owner);\n\n    share.contributors[owner].shares = SHARES_SUPPLY;\n\n    Curation.initTiers(curation);\n\n    planId = Member.createPlan(member, \"\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\n\n    token.x = Token.initialX;\n    token.y = Token.initialY;\n    token.k = Token.initialK;\n\n    BuyInfo memory info = Token.buy(token, PREMINT_ETH_AMOUNT, 0);\n\n    premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\n    staking.yieldAmount = premint;\n    staking.yieldStartTime = block.timestamp;\n  }\n\n  function swap(\n    mapping(address => address) storage spaceToFounder,\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minTokenAmount\n  ) external returns (uint256 returnAmount) {\n    if (!isSpace(spaceToFounder, tokenIn) || !isSpace(spaceToFounder, tokenOut) || tokenIn == tokenOut) {\n      revert Errors.InvalidTokens();\n    }\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\n  }\n\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\n    amount = address(this).balance;\n    TransferUtil.safeTransferETH(feeReceiver, amount);\n  }\n\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\n    for (uint256 i = 0; i < tokens.length; i++) {\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\n    }\n  }\n\n  function isSpace(\n    mapping(address => address) storage spaceToFounder,\n    address spaceAddress\n  ) public view returns (bool) {\n    return spaceToFounder[spaceAddress] != address(0);\n  }\n\n  function sell(\n    Token.State storage token,\n    address factory,\n    uint256 tokenAmount,\n    uint256 minReturnAmount\n  ) external returns (SellInfo memory info) {\n    info = Token.sell(token, tokenAmount, minReturnAmount);\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\n\n    IERC20(address(this)).transfer(factory, info.protocolFee);\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\n  }\n\n  // deduct protocolFee and appFee\n  function deductSubscriptionFees(\n    Member.State storage member,\n    address factory,\n    uint256 appId,\n    uint256 subscriptionFeePercent,\n    uint256 revenue\n  ) public returns (uint256 creatorRevenue) {\n    uint256 appFee = 0;\n    App memory app = ISpaceFactory(factory).getApp(appId);\n\n    appFee = (revenue * app.feePercent) / 1 ether;\n    uint256 protocolFee = (revenue * subscriptionFeePercent) / 1 ether;\n    creatorRevenue = revenue - protocolFee - appFee;\n    member.subscriptionIncome += creatorRevenue;\n    IERC20(address(this)).transfer(factory, protocolFee);\n    if (appFee > 0) {\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\n    }\n  }\n\n  function distributeCreatorRevenue(\n    Staking.State storage staking,\n    Share.State storage share,\n    uint256 stakingRevenuePercent,\n    uint256 creatorRevenue\n  ) internal {\n    if (staking.totalStaked > 0) {\n      uint256 stakingRevenue = (creatorRevenue * stakingRevenuePercent) / 1 ether;\n      uint256 daoRevenue = creatorRevenue - stakingRevenue;\n      staking.stakingRevenue += stakingRevenue;\n      share.daoRevenue += daoRevenue;\n    } else {\n      share.daoRevenue += creatorRevenue;\n    }\n  }\n\n  function processSubscriptionRevenue(\n    Member.State storage member,\n    Share.State storage share,\n    Curation.State storage curation,\n    Staking.State storage staking,\n    Config storage config,\n    address factory,\n    uint256 appId,\n    uint256 revenue,\n    address account\n  ) external {\n    if (revenue > 0) {\n      uint256 creatorRevenue = deductSubscriptionFees(member, factory, appId, config.subscriptionFeePercent, revenue);\n\n      CurationUser memory user = curation.users[account];\n\n      if (user.curator != address(0)) {\n        CurationUser storage curatorUser = curation.users[user.curator];\n        uint256 rebateRate = Curation.getRebateRate(curation, curatorUser.memberCount);\n\n        uint256 rewards = (creatorRevenue * rebateRate) / 1 ether;\n        curatorUser.rewards += rewards;\n        creatorRevenue = creatorRevenue - rewards;\n      }\n\n      SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorRevenue);\n    }\n  }\n}\n"
    },
    "contracts/lib/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Events.sol\";\nimport \"./Errors.sol\";\nimport \"./Constants.sol\";\nimport \"../interfaces/ISpace.sol\";\n\n// creator rewards\n\nlibrary Staking {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  struct State {\n    uint256 yieldStartTime;\n    uint256 yieldAmount; // yield from space\n    uint256 yieldReleased; // released yield\n    uint256 stakingRevenue; // fee for rewards\n    uint256 totalStaked; // Total amount staked\n    uint256 accumulatedRewardsPerToken;\n    mapping(address => uint256) userStaked;\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\n  }\n\n  struct UserRewards {\n    uint256 realized; // realized reward token amount\n    // checkpoint to compare with RewardsPerToken.accumulated\n    uint256 checkpoint;\n  }\n\n  function stake(State storage self, uint256 amount) external {\n    address account = msg.sender;\n    _updateUserRewards(self, account);\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\n    self.totalStaked += amount;\n    self.userStaked[account] += amount;\n  }\n\n  function unstake(State storage self, uint256 amount) external {\n    address account = msg.sender;\n    if (amount == 0) revert Errors.AmountIsZero();\n    if (amount > self.userStaked[account]) revert Errors.AmountTooLarge();\n\n    _updateUserRewards(self, account);\n    self.totalStaked -= amount;\n    self.userStaked[account] -= amount;\n    IERC20(address(this)).safeTransfer(account, amount);\n  }\n\n  function claim(State storage self) external returns (uint256) {\n    address account = msg.sender;\n    _updateUserRewards(self, account);\n\n    uint256 amount = self.userRewards[account].realized;\n    self.userRewards[account].realized = 0;\n\n    IERC20(address(this)).transfer(msg.sender, amount);\n    return amount;\n  }\n\n  function getStaker(State storage self, address account) external view returns (Staker memory) {\n    return\n      Staker(\n        account,\n        self.userStaked[account],\n        self.userRewards[account].realized,\n        self.userRewards[account].checkpoint\n      );\n  }\n\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\n    UserRewards memory accumulatedRewards = self.userRewards[account];\n\n    uint256 yieldReleasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\n\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self, yieldReleasable);\n\n    uint256 rewards = accumulatedRewards.realized +\n      _calculateRealizedRewards(\n        self.userStaked[account],\n        accumulatedRewards.checkpoint,\n        currentAccumulatedRewardsPerToken\n      );\n\n    return rewards;\n  }\n\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\n    if (timestamp > self.yieldStartTime + YIELD_DURATION) {\n      return self.yieldAmount;\n    }\n\n    return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\n  }\n\n  function _releaseYield(State storage self) internal {\n    if (self.yieldReleased == self.yieldAmount) return;\n\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\n\n    if (releasable == 0) return;\n    if (IERC20(address(this)).balanceOf(address(this)) >= releasable) {\n      self.stakingRevenue += releasable;\n      self.yieldReleased += releasable;\n      emit Events.YieldReleased(releasable);\n    }\n  }\n\n  function _calculateRewardsPerToken(\n    State storage self,\n    uint256 yieldReleasable\n  ) internal view returns (uint256 rewardsPerToken) {\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\n    uint256 stakingRevenue = self.stakingRevenue + yieldReleasable;\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingRevenue) / self.totalStaked;\n  }\n\n  function _calculateRealizedRewards(\n    uint256 staked,\n    uint256 checkpoint,\n    uint256 accumulatedRewardsPerToken\n  ) internal pure returns (uint256) {\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\n  }\n\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self, 0);\n\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\n\n    if (isChanged) {\n      self.stakingRevenue = 0;\n      self.accumulatedRewardsPerToken = rewardsPerToken;\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\n    }\n\n    return rewardsPerToken;\n  }\n\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\n    _releaseYield(self);\n    _updateRewardsPerToken(self);\n    UserRewards memory userRewards = self.userRewards[account];\n\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\n      return userRewards;\n    }\n\n    userRewards.realized += _calculateRealizedRewards(\n      self.userStaked[account],\n      userRewards.checkpoint,\n      self.accumulatedRewardsPerToken\n    );\n\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\n\n    self.userRewards[account] = userRewards;\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\n\n    return userRewards;\n  }\n}\n"
    },
    "contracts/lib/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ISpace.sol\";\nimport \"./Events.sol\";\nimport \"./Errors.sol\";\n\nlibrary Token {\n  using SafeERC20 for IERC20;\n\n  uint256 public constant CREATOR_FEE_PERCENT = 0.006 * 1 ether; // 0.6%\n  uint256 public constant PROTOCOL_FEE_PERCENT = 0.004 * 1 ether; // 0.4%\n\n  uint256 public constant initialX = 30 * 1 ether; // initial virtual eth amount\n  uint256 public constant initialY = 1073000191 * 1 ether; // initial virtual token amount\n  uint256 public constant initialK = initialX * initialY;\n\n  struct State {\n    uint256 x;\n    uint256 y;\n    uint256 k;\n  }\n\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\n    info.ethAmount = ethAmount;\n    info.newX = self.x + ethAmount;\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\n    uint256 tokenAmount = self.y - info.newY;\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\n  }\n\n  function getEthAmount(State memory self, uint256 tokenAmount) public pure returns (SellInfo memory info) {\n    info.creatorFee = (tokenAmount * CREATOR_FEE_PERCENT) / 1 ether;\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_PERCENT) / 1 ether;\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\n    info.newY = self.y + info.tokenAmountAfterFee;\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\n    info.ethAmount = self.x - info.newX;\n  }\n\n  function getEthAmountWithoutFee(State memory self, uint256 tokenAmount) public pure returns (uint256 ethAmount) {\n    uint256 newY = self.y + tokenAmount;\n    uint256 newX = (self.k + newY - 1) / newY; // div up\n    ethAmount = self.x - newX;\n  }\n\n  function buy(State storage self, uint256 ethAmount, uint256 minReturnAmount) external returns (BuyInfo memory info) {\n    if (ethAmount == 0) revert Errors.EthAmountIsZero();\n    info = getTokenAmount(self, ethAmount);\n\n    if (info.tokenAmountAfterFee < minReturnAmount) revert Errors.SlippageTooHigh();\n\n    self.x = info.newX;\n    self.y = info.newY;\n    self.k = info.newX * info.newY;\n  }\n\n  function sell(\n    State storage self,\n    uint256 tokenAmount,\n    uint256 minReturnAmount\n  ) external returns (SellInfo memory info) {\n    if (tokenAmount == 0) revert Errors.AmountIsZero();\n    info = getEthAmount(self, tokenAmount);\n\n    if (info.ethAmount < minReturnAmount) revert Errors.SlippageTooHigh();\n\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\n\n    self.y = info.newY;\n    self.x = info.newX;\n    self.k = info.newX * info.newY;\n  }\n}\n"
    },
    "contracts/lib/TransferUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary TransferUtil {\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{ value: value }(\"\");\n    require(success, \"TF\");\n  }\n}\n"
    },
    "contracts/Space.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./lib/TransferUtil.sol\";\nimport \"./lib/Share.sol\";\nimport \"./lib/Staking.sol\";\nimport \"./lib/Member.sol\";\nimport \"./lib/Token.sol\";\nimport \"./lib/Curation.sol\";\nimport \"./lib/SpaceHelper.sol\";\nimport \"./lib/Events.sol\";\nimport \"./lib/Errors.sol\";\nimport \"./lib/Constants.sol\";\nimport \"./interfaces/ISpace.sol\";\nimport \"./interfaces/ISpaceFactory.sol\";\n\ncontract Space is ISpace, ERC20, ERC20Permit, Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.Bytes32Set;\n  using EnumerableSet for EnumerableSet.UintSet;\n\n  address public immutable factory;\n  uint256 public immutable appId;\n\n  Config public config;\n\n  /** Module state */\n  Token.State public token;\n  Share.State public share;\n  Staking.State public staking;\n  Member.State public member;\n  Curation.State public curation;\n\n  /** Sets */\n  EnumerableSet.Bytes32Set private subscriptionIds;\n  EnumerableSet.UintSet private orderIds;\n  EnumerableSet.AddressSet private vestingAddresses;\n\n  constructor(\n    uint256 _appId,\n    address _factory,\n    address _founder,\n    string memory _name,\n    string memory _symbol,\n    string memory _uri\n  ) ERC20(_name, _symbol) ERC20Permit(_name) Ownable(_founder) {\n    appId = _appId;\n    factory = _factory;\n    config = Config(_uri, 0.3 ether, 0.02 ether);\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  function initialize() external {\n    (uint8 planId, uint256 premint) = SpaceHelper.initialize(member, share, curation, staking, token, factory, owner());\n\n    _mint(address(this), premint);\n    emit Events.ContributorAdded(owner());\n    emit Events.PlanCreated(planId, \"\", DEFAULT_SUBSCRIPTION_PRICE, 0);\n  }\n\n  function buy(uint256 minReturnAmount) external payable nonReentrant returns (BuyInfo memory info) {\n    bool isSwap = msg.sender == factory;\n    info = Token.buy(token, msg.value, minReturnAmount);\n    uint256 tokenAmount = info.tokenAmountAfterFee;\n    if (isSwap) {\n      tokenAmount = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\n      _mint(msg.sender, tokenAmount);\n    } else {\n      _distributeCreatorRevenue(info.creatorFee);\n      _mint(msg.sender, tokenAmount);\n      _mint(address(this), info.creatorFee);\n      _mint(factory, info.protocolFee);\n    }\n\n    emit Events.Trade(\n      Events.TradeType.Buy,\n      msg.sender,\n      info.ethAmount,\n      tokenAmount,\n      isSwap ? 0 : info.creatorFee,\n      isSwap ? 0 : info.protocolFee,\n      IERC20(address(this)).balanceOf(msg.sender)\n    );\n  }\n\n  function sell(\n    uint256 tokenAmount,\n    uint256 minReturnAmount\n  ) external payable nonReentrant returns (SellInfo memory info) {\n    info = Token.sell(token, tokenAmount, minReturnAmount);\n    if (address(this).balance <= info.ethAmount) revert Errors.TokenAmountTooLarge();\n\n    _distributeCreatorRevenue(info.creatorFee);\n    _burn(address(this), info.tokenAmountAfterFee);\n\n    IERC20(address(this)).transfer(factory, info.protocolFee);\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\n\n    emit Events.Trade(\n      Events.TradeType.Sell,\n      msg.sender,\n      info.ethAmount,\n      tokenAmount,\n      info.creatorFee,\n      info.protocolFee,\n      IERC20(address(this)).balanceOf(msg.sender)\n    );\n  }\n\n  // ================Member======================\n\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external onlyOwner {\n    uint8 id = Member.createPlan(member, _uri, price, minEthAmount);\n    emit Events.PlanCreated(id, _uri, price, minEthAmount);\n  }\n\n  function updatePlan(\n    uint8 id,\n    string calldata _uri,\n    uint256 price,\n    uint256 minEthAmount,\n    bool isActive\n  ) external onlyOwner {\n    Member.updatePlan(member, id, _uri, price, minEthAmount, isActive);\n    emit Events.PlanUpdated(id, _uri, price, minEthAmount);\n  }\n\n  function getPlans() external view returns (Plan[] memory) {\n    return Member.getPlans(member);\n  }\n\n  function subscribe(uint8 planId, uint256 amount) external nonReentrant {\n    if (amount == 0) revert Errors.AmountIsZero();\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\n    _subscribe(planId, amount, false);\n  }\n\n  function subscribeByEth(uint8 planId) external payable nonReentrant {\n    uint256 ethAmount = msg.value;\n    if (ethAmount == 1) revert Errors.EthAmountIsZero();\n\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\n    _mint(address(this), info.tokenAmountAfterFee);\n    _subscribe(planId, info.tokenAmountAfterFee, true);\n  }\n\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\n    (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribeDuration, uint256 remainingDuration) = Member\n      .unsubscribe(member, curation, subscriptionIds, planId, amount);\n\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration, remainingDuration);\n  }\n\n  function distributeSubscriptionRewards(uint256 mintPastDuration) external {\n    bytes32[] memory ids = subscriptionIds.values();\n    uint256 len = ids.length;\n\n    for (uint256 i = 0; i < len; i++) {\n      Subscription memory subscription = member.subscriptions[ids[i]];\n\n      if (block.timestamp - subscription.startTime <= mintPastDuration) {\n        continue;\n      }\n\n      (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, ids[i]);\n      _processSubscriptionRevenue(consumedAmount, subscription.account);\n    }\n\n    emit Events.DistributeSubscriptionRewards(msg.sender, mintPastDuration);\n  }\n\n  function distributeSingleSubscription(uint8 planId, address account) external {\n    bytes32 id = Member.generateSubscriptionId(planId, account);\n    (uint256 consumedAmount, ) = Member.distributeSingleSubscription(member, curation, subscriptionIds, id);\n    _processSubscriptionRevenue(consumedAmount, account);\n    emit Events.DistributeSingleSubscription(planId, account);\n  }\n\n  function getSubscriptions() external view returns (Subscription[] memory) {\n    return Member.getSubscriptions(member, subscriptionIds);\n  }\n\n  function calculateConsumedAmount(\n    uint8 planId,\n    address account,\n    uint256 timestamp\n  ) external view returns (uint256, uint256) {\n    bytes32 id = Member.generateSubscriptionId(planId, account);\n    return Member.calculateConsumedAmount(member, id, timestamp);\n  }\n\n  //================Share=======================\n\n  function addContributor(address account) external onlyOwner {\n    Share.addContributor(share, account);\n    emit Events.ContributorAdded(account);\n  }\n\n  function distributeShareRewards() external {\n    Share.distribute(share);\n    emit Events.ShareRewardsDistributed(msg.sender);\n  }\n\n  function claimShareRewards() external nonReentrant returns (uint256 amount) {\n    amount = Share.claimRewards(share);\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\n  }\n\n  function transferShares(address to, uint256 amount) external nonReentrant {\n    Share.transferShares(share, to, amount);\n    emit Events.SharesTransferred(msg.sender, to, amount);\n  }\n\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256 orderId) {\n    orderId = Share.createShareOrder(share, orderIds, amount, price);\n    emit Events.ShareOrderCreated(orderId, msg.sender, amount, price);\n  }\n\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\n    (uint256 amount, uint256 price) = Share.cancelShareOrder(share, orderIds, orderId);\n    emit Events.ShareOrderCanceled(orderId, msg.sender, amount, price);\n  }\n\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\n  }\n\n  function getShareOrders() external view returns (OrderInfo[] memory) {\n    return Share.getShareOrders(share, orderIds);\n  }\n\n  function getContributors() external view returns (Contributor[] memory) {\n    return Share.getContributors(share);\n  }\n\n  function currentContributorRewards(address account) external view returns (uint256) {\n    return Share.currentContributorRewards(share, account);\n  }\n\n  function addVesting(address beneficiary, uint256 startTime, uint256 duration, uint256 allocation) external {\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\n  }\n\n  function claimVesting() external returns (uint256 amount) {\n    amount = Share.claimVesting(share);\n    emit Events.VestingClaimed(msg.sender, amount);\n  }\n\n  function removeVesting(address beneficiary) external {\n    Share.removeVesting(share, vestingAddresses, beneficiary);\n    emit Events.VestingRemoved(msg.sender, beneficiary);\n  }\n\n  function getVestings() external view returns (VestingInfo[] memory) {\n    return Share.getVestings(share, vestingAddresses);\n  }\n\n  //================Staking=======================\n\n  function currentUserRewards(address account) external view returns (uint256) {\n    return Staking.currentUserRewards(staking, account);\n  }\n\n  function getStaker(address account) external view returns (Staker memory) {\n    return Staking.getStaker(staking, account);\n  }\n\n  function stake(uint256 amount) external nonReentrant {\n    Staking.stake(staking, amount);\n    emit Events.Staked(msg.sender, amount);\n  }\n\n  function unstake(uint256 amount) external nonReentrant {\n    Staking.unstake(staking, amount);\n    emit Events.Unstaked(msg.sender, amount);\n  }\n\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\n    amount = Staking.claim(staking);\n    emit Events.StakingClaimed(msg.sender, amount);\n  }\n\n  //================Curation=======================\n\n  // create self invitation code\n  function createCode(bytes32 _code) external {\n    Curation.createCode(curation, _code);\n    emit Events.CodeCreated(msg.sender, _code);\n  }\n\n  // update self invitation code\n  function updateCode(bytes32 _code) external {\n    Curation.updateCode(curation, _code);\n    emit Events.CodeUpdated(msg.sender, _code);\n  }\n\n  function bindCode(bytes32 _code) external {\n    Curation.bindCode(curation, _code);\n    emit Events.CodeBound(msg.sender, _code);\n  }\n\n  function getCurationUser(address account) external view returns (CurationUser memory) {\n    return Curation.getUser(curation, account);\n  }\n\n  function getCurationUserByCode(bytes32 code) external view returns (CurationUser memory) {\n    return Curation.getUserByCode(curation, code);\n  }\n\n  function getCodeByCurator(address account) external view returns (bytes32) {\n    return Curation.getCodeByCurator(curation, account);\n  }\n\n  function getCuratorByCode(bytes32 code) external view returns (address) {\n    return Curation.getCuratorByCode(curation, code);\n  }\n\n  function updateTier(uint256 id, uint256 memberCountBreakpoint, uint256 rebateRate) external onlyOwner {\n    Curation.updateTier(curation, id, memberCountBreakpoint, rebateRate);\n    emit Events.TierUpdated(id, memberCountBreakpoint, rebateRate);\n  }\n\n  function getTier(uint256 id) external view returns (Tier memory) {\n    return Curation.getTier(curation, id);\n  }\n\n  function claimCurationRewards() external nonReentrant returns (uint256 rewards) {\n    rewards = Curation.claimRewards(curation);\n    emit Events.CurationRewardsClaimed(msg.sender, rewards);\n  }\n\n  //============Others===================\n\n  function updateConfig(string calldata uri, uint256 stakingRevenuePercent) external onlyOwner {\n    config.uri = uri;\n    config.stakingRevenuePercent = stakingRevenuePercent;\n    emit Events.SpaceConfigUpdated(uri, stakingRevenuePercent);\n  }\n\n  /**\n   * deposit space to for share holder\n   * @param amount token amount\n   */\n  function depositSpaceToken(uint256 amount) external nonReentrant {\n    share.daoRevenue += amount;\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\n    emit Events.TokenDeposited(amount);\n  }\n\n  function _subscribe(uint8 planId, uint256 amount, bool isUsingEth) internal {\n    (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) = Member.subscribe(\n      member,\n      token,\n      curation,\n      subscriptionIds,\n      planId,\n      amount\n    );\n\n    _processSubscriptionRevenue(consumedAmount, msg.sender);\n    emit Events.Subscribed(planId, isUsingEth, msg.sender, amount, increasingDuration, remainingDuration);\n  }\n\n  function _distributeCreatorRevenue(uint256 creatorFee) internal {\n    SpaceHelper.distributeCreatorRevenue(staking, share, config.stakingRevenuePercent, creatorFee);\n  }\n\n  function _processSubscriptionRevenue(uint256 revenue, address account) internal {\n    SpaceHelper.processSubscriptionRevenue(member, share, curation, staking, config, factory, appId, revenue, account);\n  }\n}\n"
    },
    "contracts/SpaceFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./lib/SpaceHelper.sol\";\nimport \"./lib/SpaceCreator.sol\";\nimport \"./lib/Events.sol\";\nimport \"./interfaces/ISpace.sol\";\nimport \"./interfaces/ISpaceFactory.sol\";\n\ncontract SpaceFactory is ISpaceFactory, ReentrancyGuard, AccessControl {\n  using SafeERC20 for IERC20;\n\n  uint256 public price = 0.01024 * 1 ether;\n  uint256 public appIndex;\n  uint256 public spaceIndex;\n  address public feeReceiver;\n\n  bytes32 public constant APP_ROLE = keccak256(\"APP_ROLE\");\n  bytes32 public constant CONFIG_ROLE = keccak256(\"CONFIG_ROLE\");\n\n  mapping(uint256 => App) public apps;\n  mapping(address => address[]) public userSpaces;\n  mapping(uint256 spaceId => address) public spaces;\n  mapping(address => address) public spaceToFounder;\n\n  constructor(address defaultAdmin) {\n    _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\n    _grantRole(APP_ROLE, defaultAdmin);\n    _grantRole(CONFIG_ROLE, defaultAdmin);\n  }\n\n  receive() external payable {}\n\n  function setPrice(uint256 _price) external onlyRole(CONFIG_ROLE) {\n    price = _price;\n    emit Events.PriceUpdated(_price);\n  }\n\n  function setFeeReceiver(address _receiver) external onlyRole(CONFIG_ROLE) {\n    feeReceiver = _receiver;\n    emit Events.FeeReceiverUpdated(_receiver);\n  }\n\n  function createSpace(CreateSpaceInput calldata input) external payable nonReentrant {\n    if (input.appId > appIndex) revert Errors.InvalidAppId();\n    if (msg.value < price + input.preBuyEthAmount) {\n      revert Errors.InsufficientPayment();\n    }\n\n    address space = SpaceCreator.createSpace(input);\n\n    uint256 currentSpaceIndex = spaceIndex;\n    spaces[currentSpaceIndex] = address(space);\n    userSpaces[msg.sender].push(address(space));\n    spaceToFounder[address(space)] = msg.sender;\n\n    if (input.preBuyEthAmount > 0) {\n      BuyInfo memory info = ISpace(space).buy{ value: input.preBuyEthAmount }(0);\n      IERC20(space).transfer(msg.sender, info.tokenAmountAfterFee);\n    }\n\n    emit Events.SpaceCreated(\n      spaceIndex,\n      space,\n      msg.sender,\n      input.spaceName,\n      input.symbol,\n      input.uri,\n      input.preBuyEthAmount\n    );\n    ++spaceIndex;\n  }\n\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external onlyRole(APP_ROLE) {\n    if (_feeReceiver == address(0)) revert Errors.InvalidFeeReceiver();\n    if (_feePercent > 0.2 ether) revert Errors.InvalidAppFeePercent();\n    apps[appIndex] = App(msg.sender, _uri, _feeReceiver, _feePercent);\n\n    emit Events.AppCreated(appIndex, msg.sender, _uri, _feeReceiver, _feePercent);\n    ++appIndex;\n  }\n\n  function updateApp(\n    uint256 id,\n    string calldata _uri,\n    address _feeReceiver,\n    uint256 _feePercent\n  ) external onlyRole(APP_ROLE) {\n    App storage app = apps[id];\n    if (app.creator == address(0)) revert Errors.AppNotFound();\n    if (app.creator != msg.sender) revert Errors.OnlyCreator();\n    if (_feeReceiver == address(0)) revert Errors.InvalidFeeReceiver();\n    if (_feePercent > 0.05 ether) revert Errors.InvalidAppFeePercent();\n    app.uri = _uri;\n    app.feeReceiver = _feeReceiver;\n    app.feePercent = _feePercent;\n\n    emit Events.AppUpdated(id, msg.sender, _uri, _feeReceiver, _feePercent);\n  }\n\n  function getApp(uint256 id) external view returns (App memory) {\n    return apps[id];\n  }\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minTokenAmount\n  ) external nonReentrant returns (uint256 returnAmount) {\n    returnAmount = SpaceHelper.swap(spaceToFounder, tokenIn, tokenOut, amountIn, minTokenAmount);\n    emit Events.Swap(msg.sender, tokenIn, tokenOut, amountIn, returnAmount);\n  }\n\n  function getUserSpaces(address account) external view returns (address[] memory) {\n    return userSpaces[account];\n  }\n\n  function withdrawEther() external onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\n    uint256 amount = SpaceHelper.withdrawEther(feeReceiver);\n    emit Events.WithdrawEther(feeReceiver, amount);\n  }\n\n  function withdrawTokens(address[] calldata tokens) external onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\n    SpaceHelper.withdrawTokens(feeReceiver, tokens);\n  }\n\n  function isSpace(address spaceAddress) external view returns (bool) {\n    return SpaceHelper.isSpace(spaceToFounder, spaceAddress);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}