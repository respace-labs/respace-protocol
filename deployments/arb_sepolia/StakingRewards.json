{
  "address": "0xCD7Ff895eae1b40477b34053075648c5DA55EC9F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingFee",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accumulated",
          "type": "uint256"
        }
      ],
      "name": "RewardsPerTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "checkpoint",
          "type": "uint256"
        }
      ],
      "name": "UserRewardsUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PER_TOKEN_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "checkpoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "currentUserRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa25ea2f2806b5341663103185a24e1c26393e56c1edae7e0c1570631bf131233",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0xCD7Ff895eae1b40477b34053075648c5DA55EC9F",
    "transactionIndex": 1,
    "gasUsed": "6538091",
    "logsBloom": "0x
    "blockHash": "0xbefe915ddd4fd8d2d318cdb08a83d2fc40934540c8e1931faaa262d7bbb5b6b0",
    "transactionHash": "0xa25ea2f2806b5341663103185a24e1c26393e56c1edae7e0c1570631bf131233",
    "logs": [],
    "blockNumber": 70523717,
    "cumulativeGasUsed": "6538091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7"
  ],
  "numDeployments": 2,
  "solcInputHash": "141e7bb4098e7b8e9c3e3b48ea641b97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"name\":\"RewardsPerTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"name\":\"UserRewardsUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PER_TOKEN_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"currentUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"currentUserRewards(address)\":{\"details\":\"This repeats the logic used on transactions, but doesn't update the storage.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim()\":{\"notice\":\"Claim all rewards for the caller.\"},\"currentRewardsPerToken()\":{\"notice\":\"Calculate and return current rewards per token.\"},\"currentUserRewards(address)\":{\"notice\":\"Calculate and return current rewards for a user.\"},\"stake(uint256)\":{\"notice\":\"Stake tokens.\"},\"unstake(uint256)\":{\"notice\":\"Unstake tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/space/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/space/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract StakingRewards is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant PER_TOKEN_PRECISION = 10 ** 18;\\n  address token;\\n  uint256 public daoFeePercent = 0.5 ether; // 50%\\n\\n  uint256 public stakingFees = 0; // fee for rewards\\n\\n  IERC20 public immutable stakingToken; // Token to be staked\\n  uint256 public totalStaked; // Total amount staked\\n  mapping(address => uint256) public userStake; // Amount staked per user\\n\\n  uint256 public accumulatedRewardsPerToken = 0;\\n\\n  mapping(address => UserRewards) public accumulatedRewards; // Rewards accumulated per user\\n\\n  event Staked(address user, uint256 amount);\\n  event Unstaked(address user, uint256 amount);\\n  event Claimed(address user, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address user, uint256 rewards, uint256 checkpoint);\\n  event Received(address sender, uint256 stakingFee);\\n\\n  struct UserRewards {\\n    uint256 accumulated; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  constructor(address _stakingToken) {\\n    stakingToken = IERC20(_stakingToken);\\n  }\\n\\n  fallback() external payable {}\\n\\n  receive() external payable {\\n    stakingFees = msg.value;\\n    emit Received(msg.sender, stakingFees);\\n  }\\n\\n  function _calculateRewardsPerToken() internal view returns (uint256) {\\n    if (totalStaked == 0) return accumulatedRewardsPerToken;\\n    return accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingFees) / totalStaked;\\n  }\\n\\n  /// @notice Calculate the rewards accumulated by a stake between two checkpoints.\\n  function _calculateUserRewards(\\n    uint256 stake_,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (stake_ * (latterCheckpoint - earlierCheckpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken() internal returns (uint256) {\\n    uint256 rewardsPerTokenOut = _calculateRewardsPerToken();\\n\\n    bool isChanged = accumulatedRewardsPerToken != rewardsPerTokenOut;\\n\\n    if (isChanged) {\\n      stakingFees = 0;\\n    }\\n\\n    accumulatedRewardsPerToken = rewardsPerTokenOut;\\n\\n    emit RewardsPerTokenUpdated(rewardsPerTokenOut);\\n\\n    return rewardsPerTokenOut;\\n  }\\n\\n  function _updateUserRewards(address user) internal returns (UserRewards memory) {\\n    _updateRewardsPerToken();\\n    UserRewards memory userRewards_ = accumulatedRewards[user];\\n\\n    // We skip the storage changes if already updated in the same block\\n    if (userRewards_.checkpoint == accumulatedRewardsPerToken) return userRewards_;\\n\\n    // Calculate and update the new value user reserves.\\n    userRewards_.accumulated += _calculateUserRewards(\\n      userStake[user],\\n      userRewards_.checkpoint,\\n      accumulatedRewardsPerToken\\n    );\\n\\n    userRewards_.checkpoint = accumulatedRewardsPerToken;\\n\\n    accumulatedRewards[user] = userRewards_;\\n    emit UserRewardsUpdated(user, userRewards_.accumulated, userRewards_.checkpoint);\\n\\n    return userRewards_;\\n  }\\n\\n  /// @notice Stake tokens.\\n  function stake(uint256 amount) public virtual nonReentrant {\\n    address user = msg.sender;\\n    _updateUserRewards(user);\\n    totalStaked += amount;\\n    userStake[user] += amount;\\n    IERC20(stakingToken).safeTransferFrom(user, address(this), amount);\\n    emit Staked(user, amount);\\n  }\\n\\n  /// @notice Unstake tokens.\\n  function unstake(uint256 amount) public virtual nonReentrant {\\n    address user = msg.sender;\\n    _updateUserRewards(user);\\n    totalStaked -= amount;\\n    userStake[user] -= amount;\\n    IERC20(stakingToken).safeTransfer(user, amount);\\n    emit Unstaked(user, amount);\\n  }\\n\\n  /// @notice Claim all rewards for the caller.\\n  function claim() public virtual nonReentrant returns (uint256) {\\n    address user = msg.sender;\\n    _updateUserRewards(user);\\n\\n    uint256 amount = accumulatedRewards[user].accumulated;\\n    accumulatedRewards[user].accumulated = 0;\\n\\n    _safeTransferETH(user, amount);\\n\\n    emit Claimed(user, amount);\\n    return amount;\\n  }\\n\\n  function distribute() public virtual {\\n    _updateRewardsPerToken();\\n  }\\n\\n  /// @notice Calculate and return current rewards per token.\\n  function currentRewardsPerToken() public view returns (uint256) {\\n    return _calculateRewardsPerToken();\\n  }\\n\\n  /// @notice Calculate and return current rewards for a user.\\n  /// @dev This repeats the logic used on transactions, but doesn't update the storage.\\n  function currentUserRewards(address user) public view returns (uint256) {\\n    UserRewards memory accumulatedRewards_ = accumulatedRewards[user];\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken();\\n\\n    uint256 rewards = accumulatedRewards_.accumulated +\\n      _calculateUserRewards(userStake[user], accumulatedRewards_.checkpoint, currentAccumulatedRewardsPerToken);\\n\\n    return rewards;\\n  }\\n\\n  function _safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"ETH transfer failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xd94d0fe6d4c30209c6dd0f950a431b5925908145615122546fafa55c4f1e1ce7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526706f05b59d3b200006002556000600355600060065534801561002657600080fd5b50604051610d7a380380610d7a8339810160408190526100459161005b565b60016000556001600160a01b031660805261008b565b60006020828403121561006d57600080fd5b81516001600160a01b038116811461008457600080fd5b9392505050565b608051610cc66100b4600039600081816101e60152818161037a015261056d0152610cc66000f3fe6080604052600436106100d55760003560e01c806373f273fc11610079578063a694fc3a11610056578063a694fc3a1461029f578063babd8373146102bf578063e4fc6b6d146102d5578063ecba345b146102ea57005b806373f273fc14610220578063817b1cd214610269578063a2dc05741461027f57005b80634e71d92d116100b25780634e71d92d1461017c57806368e5585d146101915780636dca7e7b146101be57806372f702f3146101d457005b8063083966461461011e5780632e17de7814610146578063389621861461016657005b3661011c573460038190556040805133815260208101929092527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b005b34801561012a57600080fd5b50610133610306565b6040519081526020015b60405180910390f35b34801561015257600080fd5b5061011c610161366004610b88565b610315565b34801561017257600080fd5b5061013360065481565b34801561018857600080fd5b506101336103f2565b34801561019d57600080fd5b506101336101ac366004610ba1565b60056020526000908152604090205481565b3480156101ca57600080fd5b5061013360035481565b3480156101e057600080fd5b506102087f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013d565b34801561022c57600080fd5b5061025461023b366004610ba1565b6007602052600090815260409020805460019091015482565b6040805192835260208301919091520161013d565b34801561027557600080fd5b5061013360045481565b34801561028b57600080fd5b5061013361029a366004610ba1565b610480565b3480156102ab57600080fd5b5061011c6102ba366004610b88565b610508565b3480156102cb57600080fd5b5061013360025481565b3480156102e157600080fd5b5061011c6105d4565b3480156102f657600080fd5b50610133670de0b6b3a764000081565b60006103106105dc565b905090565b61031d61061e565b3361032781610661565b50816004600082825461033a9190610be0565b90915550506001600160a01b03811660009081526005602052604081208054849290610367908490610be0565b909155506103a190506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828461077d565b604080516001600160a01b0383168152602081018490527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7591015b60405180910390a1506103ef6001600055565b50565b60006103fc61061e565b3361040681610661565b506001600160a01b0381166000908152600760205260408120805491905561042e82826107f6565b604080516001600160a01b0384168152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a191505061047d6001600055565b90565b6001600160a01b03811660009081526007602090815260408083208151808301909252805482526001015491810191909152816104bb6105dc565b905060006104f360056000876001600160a01b03166001600160a01b03168152602001908152602001600020548460200151846108b8565b83516104ff9190610bf3565b95945050505050565b61051061061e565b3361051a81610661565b50816004600082825461052d9190610bf3565b90915550506001600160a01b0381166000908152600560205260408120805484929061055a908490610bf3565b9091555061059590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168230856108eb565b604080516001600160a01b0383168152602081018490527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d91016103dc565b6103ef61092a565b60006004546000036105ef575060065490565b60045460035461060790670de0b6b3a7640000610c06565b6106119190610c1d565b6006546103109190610bf3565b60026000540361065a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b604080518082019091526000808252602082015261067d61092a565b506001600160a01b0382166000908152600760209081526040918290208251808401909352805483526001015490820181905260065490036106bf5792915050565b6106f560056000856001600160a01b03166001600160a01b031681526020019081526020016000205482602001516006546108b8565b81518290610704908390610bf3565b90525060065460208281019182526001600160a01b038516600081815260078352604090819020855180825594516001909101819055815192835292820193909352918201527f5b9aaf4cc5141c090a75f8b8a627863eba92df81f0c83c096350da9b79aedd049060600160405180910390a192915050565b6040516001600160a01b038381166024830152604482018390526107f191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610988565b505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b50509050806107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064015b60405180910390fd5b6000670de0b6b3a76400006108cd8484610be0565b6108d79086610c06565b6108e19190610c1d565b90505b9392505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526109249186918216906323b872dd906084016107aa565b50505050565b6000806109356105dc565b600654909150811480159061094a5760006003555b60068290556040518281527fe972555b20cae8150e291bb40efce3ef4e3ed6b6b2c39c029346600e95469d489060200160405180910390a150919050565b600061099d6001600160a01b03841683610a04565b905080516000141580156109c25750808060200190518101906109c09190610c3f565b155b156107f1576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016108af565b6060610a1283836000610a1b565b90505b92915050565b606081471015610a59576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016108af565b600080856001600160a01b03168486604051610a759190610c61565b60006040518083038185875af1925050503d8060008114610ab2576040519150601f19603f3d011682016040523d82523d6000602084013e610ab7565b606091505b5091509150610ac7868383610ad1565b9695505050505050565b606082610ae657610ae182610b46565b6108e4565b8151158015610afd57506001600160a01b0384163b155b15610b3f576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016108af565b50806108e4565b805115610b565780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215610b9a57600080fd5b5035919050565b600060208284031215610bb357600080fd5b81356001600160a01b03811681146108e457600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610a1557610a15610bca565b80820180821115610a1557610a15610bca565b8082028115828204841417610a1557610a15610bca565b600082610c3a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c5157600080fd5b815180151581146108e457600080fd5b6000825160005b81811015610c825760208186018101518583015201610c68565b50600092019182525091905056fea264697066735822122019204afeef5d026c67fba6f2dcbcb3bef383a2056ec5d10ca013a9b3105a2ee864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c806373f273fc11610079578063a694fc3a11610056578063a694fc3a1461029f578063babd8373146102bf578063e4fc6b6d146102d5578063ecba345b146102ea57005b806373f273fc14610220578063817b1cd214610269578063a2dc05741461027f57005b80634e71d92d116100b25780634e71d92d1461017c57806368e5585d146101915780636dca7e7b146101be57806372f702f3146101d457005b8063083966461461011e5780632e17de7814610146578063389621861461016657005b3661011c573460038190556040805133815260208101929092527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b005b34801561012a57600080fd5b50610133610306565b6040519081526020015b60405180910390f35b34801561015257600080fd5b5061011c610161366004610b88565b610315565b34801561017257600080fd5b5061013360065481565b34801561018857600080fd5b506101336103f2565b34801561019d57600080fd5b506101336101ac366004610ba1565b60056020526000908152604090205481565b3480156101ca57600080fd5b5061013360035481565b3480156101e057600080fd5b506102087f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013d565b34801561022c57600080fd5b5061025461023b366004610ba1565b6007602052600090815260409020805460019091015482565b6040805192835260208301919091520161013d565b34801561027557600080fd5b5061013360045481565b34801561028b57600080fd5b5061013361029a366004610ba1565b610480565b3480156102ab57600080fd5b5061011c6102ba366004610b88565b610508565b3480156102cb57600080fd5b5061013360025481565b3480156102e157600080fd5b5061011c6105d4565b3480156102f657600080fd5b50610133670de0b6b3a764000081565b60006103106105dc565b905090565b61031d61061e565b3361032781610661565b50816004600082825461033a9190610be0565b90915550506001600160a01b03811660009081526005602052604081208054849290610367908490610be0565b909155506103a190506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828461077d565b604080516001600160a01b0383168152602081018490527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7591015b60405180910390a1506103ef6001600055565b50565b60006103fc61061e565b3361040681610661565b506001600160a01b0381166000908152600760205260408120805491905561042e82826107f6565b604080516001600160a01b0384168152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a191505061047d6001600055565b90565b6001600160a01b03811660009081526007602090815260408083208151808301909252805482526001015491810191909152816104bb6105dc565b905060006104f360056000876001600160a01b03166001600160a01b03168152602001908152602001600020548460200151846108b8565b83516104ff9190610bf3565b95945050505050565b61051061061e565b3361051a81610661565b50816004600082825461052d9190610bf3565b90915550506001600160a01b0381166000908152600560205260408120805484929061055a908490610bf3565b9091555061059590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168230856108eb565b604080516001600160a01b0383168152602081018490527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d91016103dc565b6103ef61092a565b60006004546000036105ef575060065490565b60045460035461060790670de0b6b3a7640000610c06565b6106119190610c1d565b6006546103109190610bf3565b60026000540361065a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b604080518082019091526000808252602082015261067d61092a565b506001600160a01b0382166000908152600760209081526040918290208251808401909352805483526001015490820181905260065490036106bf5792915050565b6106f560056000856001600160a01b03166001600160a01b031681526020019081526020016000205482602001516006546108b8565b81518290610704908390610bf3565b90525060065460208281019182526001600160a01b038516600081815260078352604090819020855180825594516001909101819055815192835292820193909352918201527f5b9aaf4cc5141c090a75f8b8a627863eba92df81f0c83c096350da9b79aedd049060600160405180910390a192915050565b6040516001600160a01b038381166024830152604482018390526107f191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610988565b505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b50509050806107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064015b60405180910390fd5b6000670de0b6b3a76400006108cd8484610be0565b6108d79086610c06565b6108e19190610c1d565b90505b9392505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526109249186918216906323b872dd906084016107aa565b50505050565b6000806109356105dc565b600654909150811480159061094a5760006003555b60068290556040518281527fe972555b20cae8150e291bb40efce3ef4e3ed6b6b2c39c029346600e95469d489060200160405180910390a150919050565b600061099d6001600160a01b03841683610a04565b905080516000141580156109c25750808060200190518101906109c09190610c3f565b155b156107f1576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016108af565b6060610a1283836000610a1b565b90505b92915050565b606081471015610a59576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016108af565b600080856001600160a01b03168486604051610a759190610c61565b60006040518083038185875af1925050503d8060008114610ab2576040519150601f19603f3d011682016040523d82523d6000602084013e610ab7565b606091505b5091509150610ac7868383610ad1565b9695505050505050565b606082610ae657610ae182610b46565b6108e4565b8151158015610afd57506001600160a01b0384163b155b15610b3f576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016108af565b50806108e4565b805115610b565780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215610b9a57600080fd5b5035919050565b600060208284031215610bb357600080fd5b81356001600160a01b03811681146108e457600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610a1557610a15610bca565b80820180821115610a1557610a15610bca565b8082028115828204841417610a1557610a15610bca565b600082610c3a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c5157600080fd5b815180151581146108e457600080fd5b6000825160005b81811015610c825760208186018101518583015201610c68565b50600092019182525091905056fea264697066735822122019204afeef5d026c67fba6f2dcbcb3bef383a2056ec5d10ca013a9b3105a2ee864736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "currentUserRewards(address)": {
        "details": "This repeats the logic used on transactions, but doesn't update the storage."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim()": {
        "notice": "Claim all rewards for the caller."
      },
      "currentRewardsPerToken()": {
        "notice": "Calculate and return current rewards per token."
      },
      "currentUserRewards(address)": {
        "notice": "Calculate and return current rewards for a user."
      },
      "stake(uint256)": {
        "notice": "Stake tokens."
      },
      "unstake(uint256)": {
        "notice": "Unstake tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3438,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8845,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8848,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "daoFeePercent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8851,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "stakingFees",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8856,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8860,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "userStake",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8863,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "accumulatedRewardsPerToken",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8868,
        "contract": "contracts/space/StakingRewards.sol:StakingRewards",
        "label": "accumulatedRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserRewards)8909_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserRewards)8909_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingRewards.UserRewards)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewards)8909_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserRewards)8909_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewards.UserRewards",
        "members": [
          {
            "astId": 8906,
            "contract": "contracts/space/StakingRewards.sol:StakingRewards",
            "label": "accumulated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8908,
            "contract": "contracts/space/StakingRewards.sol:StakingRewards",
            "label": "checkpoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}