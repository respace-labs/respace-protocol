{
  "address": "0xc5B401d7396D68800913Da0B6f8a08c2AeB13981",
  "abi": [],
  "transactionHash": "0x348e3de72b2fbcdad84d2ffa43a2a16e7fffcc3b06313172f61fa94fdba43715",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0xc5B401d7396D68800913Da0B6f8a08c2AeB13981",
    "transactionIndex": 2,
    "gasUsed": "53514701",
    "logsBloom": "0x
    "blockHash": "0xb050c745aef6b41d244fbec424c574512c88366995b6f239bf3d8fe41e2e6c01",
    "transactionHash": "0x348e3de72b2fbcdad84d2ffa43a2a16e7fffcc3b06313172f61fa94fdba43715",
    "logs": [],
    "blockNumber": 79912280,
    "cumulativeGasUsed": "70729597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "e5dbd13d7098176c56917029e74651ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceCreator.sol\":\"SpaceCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/TransferUtil.sol\\\";\\nimport \\\"./lib/Share.sol\\\";\\nimport \\\"./lib/Staking.sol\\\";\\nimport \\\"./lib/Member.sol\\\";\\nimport \\\"./lib/Token.sol\\\";\\nimport \\\"./lib/SpaceHelper.sol\\\";\\nimport \\\"./lib/Events.sol\\\";\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./interfaces/ISpace.sol\\\";\\nimport \\\"./interfaces/ISpaceFactory.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Space is ERC20, ERC20Permit, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  address public immutable factory;\\n  uint256 public immutable appId;\\n\\n  string public uri;\\n\\n  // fee\\n  uint256 public stakingFeePercent = 0.3 ether; // 30% default\\n  uint256 public subscriptionFeePercent = 0.02 ether; // 2% to protocol\\n  uint256 public totalFee;\\n\\n  // Token\\n  Token.State public token;\\n\\n  // Share\\n  Share.State public share;\\n\\n  // Staking\\n  Staking.State public staking;\\n\\n  // Subscription\\n  Member.State public member;\\n\\n  /** Sets */\\n  EnumerableSet.Bytes32Set subscriptionIds;\\n  EnumerableSet.AddressSet stakers;\\n  EnumerableSet.UintSet orderIds;\\n  EnumerableSet.AddressSet vestingAddresses;\\n\\n  constructor(\\n    uint256 _appId,\\n    address _factory,\\n    address _founder,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) Ownable(_founder) {\\n    appId = _appId;\\n    factory = _factory;\\n    uri = _uri;\\n  }\\n\\n  fallback() external payable {}\\n\\n  receive() external payable {}\\n\\n  function initialize() external {\\n    require(msg.sender == factory, \\\"Only factory can initialize\\\");\\n    Share.addContributor(share, owner());\\n    share.contributors[owner()].shares = SHARES_SUPPLY;\\n\\n    uint8 planId = Member.createPlan(member, \\\"Member\\\", DEFAULT_SUBSCRIPTION_PRICE, DEFAULT_MIN_SUBSCRIPTION_AMOUNT);\\n\\n    emit Events.PlanCreated(planId, \\\"Member\\\", DEFAULT_SUBSCRIPTION_PRICE, 0);\\n\\n    token = Token.State(Token.initialX, Token.initialY, Token.initialK);\\n\\n    uint256 premintEth = 3.3333 ether;\\n    BuyInfo memory info = Token.buy(token, premintEth, 0);\\n\\n    uint256 premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n    _mint(address(this), premint);\\n  }\\n\\n  function updateURI(string calldata _uri) external {\\n    uri = _uri;\\n    emit Events.SpaceURIUpdated(_uri);\\n  }\\n\\n  function buy(uint256 minTokenAmount) external payable nonReentrant returns (BuyInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.buy(token, msg.value, minTokenAmount);\\n    if (isSwap) {\\n      _mint(msg.sender, info.tokenAmountAfterFee + info.creatorFee + info.protocolFee);\\n    } else {\\n      _splitFee(info.creatorFee);\\n      _mint(msg.sender, info.tokenAmountAfterFee);\\n      _mint(address(this), info.creatorFee);\\n      _mint(factory, info.protocolFee);\\n\\n      emit Events.Trade(\\n        Events.TradeType.Buy,\\n        msg.sender,\\n        info.ethAmount,\\n        info.tokenAmountAfterFee,\\n        info.creatorFee,\\n        info.protocolFee,\\n        IERC20(address(this)).balanceOf(msg.sender)\\n      );\\n    }\\n  }\\n\\n  function sell(\\n    uint256 tokenAmount,\\n    uint256 minEthAmount\\n  ) external payable nonReentrant returns (SellInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.sell(token, tokenAmount, minEthAmount);\\n\\n    require(address(this).balance > info.ethAmount, \\\"Token amount to large\\\");\\n\\n    _splitFee(info.creatorFee);\\n    _burn(address(this), info.tokenAmountAfterFee);\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n\\n    if (!isSwap) {\\n      emit Events.Trade(\\n        Events.TradeType.Sell,\\n        msg.sender,\\n        info.ethAmount,\\n        tokenAmount,\\n        info.creatorFee,\\n        info.protocolFee,\\n        IERC20(address(this)).balanceOf(msg.sender)\\n      );\\n    }\\n  }\\n\\n  // ================member======================\\n\\n  function createPlan(string calldata _uri, uint256 price, uint256 minEthAmount) external onlyOwner {\\n    uint8 id = Member.createPlan(member, _uri, price, minEthAmount);\\n    emit Events.PlanCreated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function updatePlan(\\n    uint8 id,\\n    string calldata _uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external onlyOwner {\\n    Member.updatePlan(member, id, _uri, price, minEthAmount, isActive);\\n    emit Events.PlanUpdated(id, _uri, price, minEthAmount);\\n  }\\n\\n  function getPlans() external view returns (Member.Plan[] memory) {\\n    return Member.getPlans(member);\\n  }\\n\\n  function subscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n    // Calculate the ETH equivalent amount without fees\\n    uint256 ethAmount = Token.getEthAmountWithoutFee(token, amount);\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    (uint256 increasingDuration, uint256 income, uint256 remainingDuration) = Member.subscribe(\\n      member,\\n      subscriptionIds,\\n      planId,\\n      ethAmount,\\n      amount\\n    );\\n    _handleSubscriptionIncome(income);\\n\\n    emit Events.Subscribed(planId, msg.sender, amount, increasingDuration, remainingDuration);\\n  }\\n\\n  function subscribeByEth(uint8 planId) external payable nonReentrant {\\n    uint256 ethAmount = msg.value;\\n\\n    // Purchase tokens using the provided ETH amount\\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\\n    _mint(address(this), info.tokenAmountAfterFee);\\n\\n    (uint256 increasingDuration, uint256 income, uint256 remainingDuration) = Member.subscribe(\\n      member,\\n      subscriptionIds,\\n      planId,\\n      ethAmount,\\n      info.tokenAmountAfterFee\\n    );\\n    _handleSubscriptionIncome(income);\\n\\n    emit Events.Subscribed(planId, msg.sender, info.tokenAmountAfterFee, increasingDuration, remainingDuration);\\n  }\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    (uint256 income, uint256 unsubscribeAmount, uint256 unsubscribeDuration, uint256 remainingDuration) = Member\\n      .unsubscribe(member, subscriptionIds, planId, amount);\\n\\n    _handleSubscriptionIncome(income);\\n\\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration, remainingDuration);\\n  }\\n\\n  function distributeSubscriptionRewards() external {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      (uint256 income, ) = Member.distributeSingleSubscription(member, ids[i]);\\n      _handleSubscriptionIncome(income);\\n    }\\n  }\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    (uint256 income, ) = Member.distributeSingleSubscription(member, id);\\n    _handleSubscriptionIncome(income);\\n  }\\n\\n  function getSubscriptions() external view returns (Member.Subscription[] memory) {\\n    return Member.getSubscriptions(member, subscriptionIds);\\n  }\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256) {\\n    bytes32 id = Member.generateSubscriptionId(planId, account);\\n    return Member.calculateConsumedAmount(member, id, timestamp);\\n  }\\n\\n  function _handleSubscriptionIncome(uint256 income) private {\\n    if (income > 0) {\\n      uint256 fee = SpaceHelper.chargeSubscriptionFee(member, factory, appId, subscriptionFeePercent, income);\\n      _splitFee(fee);\\n    }\\n  }\\n\\n  //================share=======================\\n\\n  function addContributor(address account) external onlyOwner {\\n    Share.addContributor(share, account);\\n    emit Events.ContributorAdded(account);\\n  }\\n\\n  function distributeShareRewards() external {\\n    Share.distribute(share);\\n  }\\n\\n  function claimShareRewards() external nonReentrant {\\n    uint256 amount = Share.claimRewards(share);\\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\\n  }\\n\\n  function transferShares(address to, uint256 amount) external nonReentrant {\\n    Share.transferShares(share, to, amount);\\n    emit Events.SharesTransferred(msg.sender, to, amount);\\n  }\\n\\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256) {\\n    return Share.createShareOrder(share, orderIds, amount, price);\\n  }\\n\\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\\n    Share.cancelShareOrder(share, orderIds, orderId);\\n  }\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\\n  }\\n\\n  function getShareOrders() external view returns (Share.Order[] memory) {\\n    return Share.getShareOrders(share, orderIds);\\n  }\\n\\n  function getContributors() external view returns (Share.ContributorInfo[] memory) {\\n    return Share.getContributors(share);\\n  }\\n\\n  function currentContributorRewards(address account) external view returns (uint256) {\\n    return Share.currentContributorRewards(share, account);\\n  }\\n\\n  function addVesting(\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external nonReentrant {\\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\\n  }\\n\\n  function claimVesting() external nonReentrant {\\n    Share.claimVesting(share);\\n  }\\n\\n  function removeVesting(address beneficiary) external nonReentrant {\\n    Share.removeVesting(share, vestingAddresses, beneficiary);\\n  }\\n\\n  function getVestings() external view returns (Share.VestingInfo[] memory) {\\n    return Share.getVestings(share, vestingAddresses);\\n  }\\n\\n  //================staking=======================\\n\\n  function currentUserRewards(address account) external view returns (uint256) {\\n    return Staking.currentUserRewards(staking, account);\\n  }\\n\\n  function currentRewardsPerToken() external view returns (uint256) {\\n    return Staking.currentRewardsPerToken(staking);\\n  }\\n\\n  function getStakers() external view returns (Staking.Staker[] memory) {\\n    return Staking.getStakers(staking, stakers);\\n  }\\n\\n  function stake(uint256 amount) external nonReentrant {\\n    Staking.stake(staking, stakers, amount);\\n    emit Events.StakingEvent(Events.StakingType.Stake, msg.sender, amount);\\n  }\\n\\n  function unstake(uint256 amount) external nonReentrant {\\n    Staking.unstake(staking, stakers, amount);\\n    emit Events.StakingEvent(Events.StakingType.Unstake, msg.sender, amount);\\n  }\\n\\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Staking.claim(staking);\\n    emit Events.StakingClaimed(msg.sender, amount);\\n  }\\n\\n  //============others===================\\n\\n  function setStakingFeePercent(uint256 percent) external onlyOwner {\\n    require(percent >= 0.01 ether, \\\"Staking fee percent must be >= 10%\\\");\\n    stakingFeePercent = percent;\\n    emit Events.StakingFeePercentUpdated(percent);\\n  }\\n\\n  function depositToken(uint256 amount) external nonReentrant {\\n    share.daoFee += amount;\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Events.TokenDeposited(amount);\\n  }\\n\\n  function _splitFee(uint256 fee) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 feeToStaking = (fee * stakingFeePercent) / 1 ether;\\n      staking.stakingFee += feeToStaking;\\n      share.daoFee += (fee - feeToStaking);\\n      totalFee += fee;\\n    } else {\\n      share.daoFee += fee;\\n      totalFee += fee;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8422b50111dc74b303f2aa330c508e28b1f5a11044eab5f690d90bb2db02bda1\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minTokenAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minEthAmount) external payable returns (SellInfo memory SellInfo);\\n}\\n\",\"keccak256\":\"0xb53f7e187923781919a6495f2fad20b39ca76fb08bac3be5b53ea4fad877aa23\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(\\n    string calldata spaceName,\\n    string calldata symbol,\\n    uint256 preBuyEthAmount,\\n    uint256 appId\\n  ) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdad6e3f779e478f6d0b77357800356fcad42459134ea22a098c06895bc2e78eb\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant DEFAULT_MIN_SUBSCRIPTION_AMOUNT = 0 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\",\"keccak256\":\"0xc26b99fac63c830adf2095d98932f8ccf2431e7a8767ca33327a78ad12a46edd\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    string uri,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n\\n  event StakingFeePercentUpdated(uint256 percent);\\n  event SpaceURIUpdated(string uri);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee,\\n    uint256 balance\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event StakingEvent(StakingType indexed stakingType, address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  enum StakingType {\\n    Stake,\\n    Unstake\\n  }\\n\\n  /** Member events */\\n  event Subscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event Unsubscribed(\\n    uint8 indexed planId,\\n    address indexed account,\\n    uint256 tokenAmount,\\n    uint256 changedDuration,\\n    uint256 remainingDuration\\n  );\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n  event PlanUpdated(uint8 indexed id, string uri, uint256 price, uint256 minEthAmount);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd020e93801fd32bf43689830439350bc1b9016af475bb58487ec780d0a2d79b8\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  struct Plan {\\n    string uri;\\n    uint256 price; // Monthly price in wei\\n    uint256 minEthAmount; // Minimum subscription amount in wei\\n    bool isActive;\\n  }\\n\\n  struct Subscription {\\n    uint8 planId;\\n    address account;\\n    uint256 startTime;\\n    uint256 duration;\\n    uint256 amount; // total amount\\n  }\\n\\n  /* Plan */\\n  function createPlan(\\n    State storage self,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount\\n  ) external returns (uint8) {\\n    require(price > 0, \\\"Price must be greater than zero\\\");\\n    self.plans[self.planIndex] = Plan(uri, price, minEthAmount, true);\\n    self.planIndex++;\\n    return self.planIndex - 1;\\n  }\\n\\n  function updatePlan(\\n    State storage self,\\n    uint8 id,\\n    string calldata uri,\\n    uint256 price,\\n    uint256 minEthAmount,\\n    bool isActive\\n  ) external {\\n    require(price > 0, \\\"Price must be greater than zero\\\");\\n    require(id < self.planIndex, \\\"Plan is not existed\\\");\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].minEthAmount = minEthAmount;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 ethAmount,\\n    uint256 tokenAmount\\n  ) external returns (uint256 increasingDuration, uint256 consumedAmount, uint256 remainingDuration) {\\n    require(planId < self.planIndex, \\\"Plan is not existed\\\");\\n    require(ethAmount > 0, \\\"ETH amount must be greater than zero\\\");\\n\\n    Member.Plan memory plan = self.plans[planId];\\n    require(plan.isActive, \\\"Plan is not active\\\");\\n    require(ethAmount >= plan.minEthAmount, \\\"ETH amount is less than minimum amount\\\");\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    // Calculate the subscription duration\\n    increasingDuration = (ethAmount * SECONDS_PER_MONTH) / plan.price;\\n\\n    // Initialize subscription if it does not exist\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n      remainingDuration = increasingDuration;\\n    } else {\\n      // Calculate consumed amount and remaining duration\\n      (consumedAmount, remainingDuration) = distributeSingleSubscription(self, id);\\n    }\\n\\n    // Update subscription details\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += tokenAmount;\\n    subscription.duration += increasingDuration;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  )\\n    external\\n    returns (uint256 consumedAmount, uint256 unsubscribeAmount, uint256 unsubscribedDuration, uint256 remainingDuration)\\n  {\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n    bytes32 id = generateSubscriptionId(planId, msg.sender);\\n    Subscription storage subscription = self.subscriptions[id];\\n    require(subscription.startTime > 0, \\\"Subscription not found\\\");\\n\\n    (consumedAmount, remainingDuration) = distributeSingleSubscription(self, id);\\n\\n    // Calculate the amount to transfer\\n    uint256 transferAmount = amount >= subscription.amount ? subscription.amount : amount;\\n    IERC20(address(this)).transfer(msg.sender, transferAmount);\\n\\n    if (amount >= subscription.amount) {\\n      // Unsubscribe completely\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      // Partially unsubscribe\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(State storage self, bytes32 id) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainingDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    subscription.startTime = block.timestamp;\\n    subscription.amount -= consumedAmount;\\n    subscription.duration = remainingDuration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    /// Subscription not found\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainingDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainingDuration);\\n  }\\n\\n  function generateSubscriptionId(uint8 planId, address account) public pure returns (bytes32) {\\n    return keccak256(abi.encode(planId, account));\\n  }\\n}\\n\",\"keccak256\":\"0xfa8327f3d47b083500494e438e96cd7a9d0dc13790ee49c47f1524b943552535\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Contributor {\\n    uint256 shares;\\n    uint256 rewards; // realized rewards (unclaimed)\\n    uint256 checkpoint;\\n    bool exists;\\n  }\\n\\n  struct ContributorInfo {\\n    address account;\\n    uint256 shares;\\n    uint256 rewards; // realized rewards (unclaimed)\\n    uint256 checkpoint;\\n    bool exists;\\n  }\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct VestingInfo {\\n    address beneficiary;\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation;\\n    uint256 released;\\n  }\\n\\n  struct State {\\n    uint256 daoFee;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    require(self.contributors[msg.sender].exists, \\\"Sender is not a contributor\\\");\\n    require(self.contributors[msg.sender].shares >= amount, \\\"Insufficient shares\\\");\\n    require(to != address(0) && msg.sender != to, \\\"Invalid recipient address\\\");\\n\\n    if (!self.contributors[to].exists) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    require(contributor.shares >= amount, \\\"Insufficient share balance\\\");\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n    self.orders[self.orderIndex] = Order(msg.sender, amount, price);\\n    orderIds.add(self.orderIndex);\\n    self.orderIndex++;\\n    return self.orderIndex - 1;\\n  }\\n\\n  function cancelShareOrder(State storage self, EnumerableSet.UintSet storage orderIds, uint256 orderId) external {\\n    Order storage order = self.orders[orderId];\\n    require(order.seller != address(0), \\\"Order not found\\\");\\n    require(order.seller == msg.sender, \\\"Only seller can cancel order\\\");\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    require(order.seller != address(0), \\\"Order not found\\\");\\n    require(amount <= order.amount, \\\"Amount too large\\\");\\n    uint256 ethAmount = order.price * amount;\\n    require(msg.value >= ethAmount, \\\"Insufficient payment\\\");\\n    require(self.contributors[order.seller].shares >= amount, \\\"Insufficient share of seller\\\");\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (!self.contributors[msg.sender].exists) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (Order[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    Order[] memory orders = new Order[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      orders[i] = self.orders[ids[i]];\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    require(!self.contributors[account].exists, \\\"Contributor is existed\\\");\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(0, 0, 0, true);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (ContributorInfo[] memory) {\\n    ContributorInfo[] memory info = new ContributorInfo[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      Contributor memory contributor = self.contributors[self.contributorAddresses[i]];\\n      info[i] = ContributorInfo(\\n        self.contributorAddresses[i],\\n        contributor.shares,\\n        contributor.rewards,\\n        contributor.checkpoint,\\n        contributor.exists\\n      );\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    require(beneficiary != address(0), \\\"Beneficiary is zero address\\\");\\n    require(!vestingAddresses.contains(beneficiary), \\\"Beneficiary already exists\\\");\\n    Contributor memory payer = self.contributors[msg.sender];\\n    require(payer.shares >= allocation, \\\"Allocation too large\\\");\\n\\n    if (!self.contributors[beneficiary].exists) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external {\\n    address beneficiary = msg.sender;\\n    _claimVesting(self, beneficiary);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    require(vesting.start != 0, \\\"Beneficiary does not exist\\\");\\n\\n    uint256 releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      require(self.contributors[vesting.payer].shares > releasable, \\\"Insufficient shares\\\");\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    require(vesting.start != 0, \\\"Beneficiary does not exist\\\");\\n    require(vesting.payer == msg.sender, \\\"Only payer can remove vesting\\\");\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    // We skip the storage changes if already updated in the same block\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    // Calculate and update the new value user reserves.\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoFee = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoFee) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0x6207a79dbbd4f1bee201efeab58fafedfc5a6e1133dfac612fe4f2be8af484a4\",\"license\":\"MIT\"},\"contracts/lib/SpaceCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"../Space.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceCreator {\\n  using SafeERC20 for IERC20;\\n\\n  function createSpace(\\n    uint256 price,\\n    uint256 spaceIndex,\\n    mapping(address => address[]) storage userSpaces,\\n    mapping(uint256 spaceId => address) storage spaces,\\n    mapping(address => address) storage spaceToFounder,\\n    uint256 appId,\\n    string calldata spaceName,\\n    string calldata symbol,\\n    string calldata uri,\\n    uint256 preBuyEthAmount\\n  ) external returns (address) {\\n    require(msg.value >= price + preBuyEthAmount, \\\"Insufficient payment\\\");\\n\\n    address founder = msg.sender;\\n    Space space = new Space(appId, address(this), founder, spaceName, symbol, uri);\\n\\n    space.initialize();\\n\\n    uint256 currentSpaceIndex = spaceIndex;\\n    spaces[currentSpaceIndex] = address(space);\\n    userSpaces[msg.sender].push(address(space));\\n    spaceToFounder[address(space)] = founder;\\n\\n    if (preBuyEthAmount > 0) {\\n      BuyInfo memory info = space.buy{ value: preBuyEthAmount }(0);\\n      IERC20(space).transfer(msg.sender, info.tokenAmountAfterFee);\\n    }\\n    return address(space);\\n  }\\n}\\n\",\"keccak256\":\"0x838f1ade95449a31fc5235025a186db4f5f89c09354aa6681c89d398676a5ae1\",\"license\":\"MIT\"},\"contracts/lib/SpaceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Member.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceHelper {\\n  using SafeERC20 for IERC20;\\n\\n  function createApp(\\n    mapping(uint256 => App) storage apps,\\n    uint256 appIndex,\\n    string calldata _uri,\\n    address _feeReceiver,\\n    uint256 _feePercent\\n  ) external {\\n    require(_feeReceiver != address(0), \\\"Invalid feeTo address\\\");\\n    require(_feePercent <= 0.05 ether, \\\"appFeePercent must be <= 5%\\\");\\n    apps[appIndex] = App(msg.sender, _uri, _feeReceiver, _feePercent);\\n  }\\n\\n  function updateApp(\\n    mapping(uint256 => App) storage apps,\\n    uint256 id,\\n    string calldata _uri,\\n    address _feeReceiver,\\n    uint256 _feePercent\\n  ) external {\\n    App storage app = apps[id];\\n    require(app.creator != address(0), \\\"App not existed\\\");\\n    require(app.creator == msg.sender, \\\"Only creator can update App URI\\\");\\n    require(_feeReceiver != address(0), \\\"Invalid feeTo address\\\");\\n    require(_feePercent <= 0.05 ether, \\\"appFeePercent must be <= 5%\\\");\\n    app.uri = _uri;\\n    app.feeReceiver = _feeReceiver;\\n    app.feePercent = _feePercent;\\n  }\\n\\n  function swap(\\n    mapping(address => address) storage spaceToFounder,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount) {\\n    require(\\n      isSpace(spaceToFounder, tokenIn) && isSpace(spaceToFounder, tokenOut) && tokenIn != tokenOut,\\n      \\\"Invalid tokens\\\"\\n    );\\n    IERC20(address(tokenIn)).safeTransferFrom(msg.sender, address(this), amountIn);\\n    IERC20(address(tokenIn)).approve(tokenIn, amountIn);\\n    SellInfo memory sellInfo = ISpace(tokenIn).sell(amountIn, 0);\\n    BuyInfo memory buyInfo = ISpace(tokenOut).buy{ value: sellInfo.ethAmount }(minTokenAmount);\\n    returnAmount = buyInfo.tokenAmountAfterFee + buyInfo.creatorFee + buyInfo.protocolFee;\\n    IERC20(address(tokenOut)).transfer(msg.sender, returnAmount);\\n  }\\n\\n  function withdrawEther(address feeReceiver) external returns (uint256 amount) {\\n    amount = address(this).balance;\\n    TransferUtil.safeTransferETH(feeReceiver, amount);\\n  }\\n\\n  function withdrawTokens(address feeReceiver, address[] calldata tokens) external {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 amount = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).transfer(feeReceiver, amount);\\n      emit Events.WithdrawToken(feeReceiver, tokens[i], amount);\\n    }\\n  }\\n\\n  function isSpace(\\n    mapping(address => address) storage spaceToFounder,\\n    address spaceAddress\\n  ) public view returns (bool) {\\n    return spaceToFounder[spaceAddress] != address(0);\\n  }\\n\\n  // charge protocolFee and appFee\\n  function chargeSubscriptionFee(\\n    Member.State storage member,\\n    address factory,\\n    uint256 appId,\\n    uint256 subscriptionFeePercent,\\n    uint256 income\\n  ) external returns (uint256 creatorFee) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n    if (app.creator != address(0) && app.feeReceiver != address(0)) {\\n      app = ISpaceFactory(factory).getApp(0); // use default app\\n    }\\n\\n    appFee = (income * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (income * subscriptionFeePercent) / 1 ether;\\n    creatorFee = income - protocolFee - appFee;\\n    member.subscriptionIncome += creatorFee;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa50224b21784a5db388a0cc4eb55f2962d4882433f2ebbb1922559d4b83a22e6\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased;\\n    uint256 stakingFee; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  struct Staker {\\n    address account;\\n    uint256 staked;\\n    uint256 realized;\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, EnumerableSet.AddressSet storage stakers, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n    if (!stakers.contains(account)) stakers.add(account);\\n  }\\n\\n  function unstake(State storage self, EnumerableSet.AddressSet storage stakers, uint256 amount) external {\\n    address account = msg.sender;\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n    require(amount <= self.userStaked[account], \\\"Amount too large\\\");\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    if (self.userStaked[account] == 0) stakers.remove(account);\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStakers(\\n    State storage self,\\n    EnumerableSet.AddressSet storage _stakers\\n  ) external view returns (Staker[] memory) {\\n    address[] memory accounts = _stakers.values();\\n    uint256 len = accounts.length;\\n    Staker[] memory stakers = new Staker[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      address account = accounts[i];\\n      stakers[i] = Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n    }\\n    return stakers;\\n  }\\n\\n  function currentRewardsPerToken(State storage self) external view returns (uint256) {\\n    return _calculateRewardsPerToken(self);\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp < self.yieldStartTime) {\\n      return 0;\\n    } else if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    } else {\\n      return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n    }\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable > 0 && IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingFee += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(State storage self) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n    uint256 stakingFee = self.stakingFee + releasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingFee) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    // console.log(\\\"=========isChanged:\\\", isChanged);\\n    if (isChanged) {\\n      self.stakingFee = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    // We skip the storage changes if already updated in the same block\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    // Calculate and update the new value user reserves.\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0x3e32aee14c87795ceb9a395de9c083f468ec19c8ac8aea98009898cb964f1cc6\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_RATE = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_RATE = 0.004 * 1 ether; // 0.4%\\n\\n  // initial virtual eth amount\\n  uint256 public constant initialX = 30 * 1 ether;\\n\\n  // initial virtual token amount\\n  uint256 public constant initialY = 1073000191 * 1 ether;\\n\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_RATE) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_RATE) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State storage self, uint256 tokenAmount) public view returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_RATE) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_RATE) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function getEthAmountWithoutFee(State storage self, uint256 tokenAmount) public view returns (uint256 ethAmount) {\\n    uint256 newY = self.y + tokenAmount;\\n    uint256 newX = (self.k + newY - 1) / newY; // div up\\n    ethAmount = self.x - newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minTokenAmount) external returns (BuyInfo memory info) {\\n    require(ethAmount > 0, \\\"ETH amount must be greater than zero\\\");\\n    info = getTokenAmount(self, ethAmount);\\n\\n    require(info.tokenAmountAfterFee >= minTokenAmount, \\\"Slippage too high\\\");\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(State storage self, uint256 tokenAmount, uint256 minEthAmount) external returns (SellInfo memory info) {\\n    require(tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n    info = getEthAmount(self, tokenAmount);\\n\\n    require(info.ethAmount >= minEthAmount, \\\"Slippage too high\\\");\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0xa0c94e2e5f0512f67f6163e9ad7cf32008865fb93766cb389819d9fc0d130446\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    require(to != address(0), \\\"Invalid address\\\");\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"ETH transfer failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f5406c61b2aaf9054dc9fc0239aaed7092baed65d1b7e366db501d0ffaf0f19\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57615e8290816100228239308160310152f35b600080fdfe60806040818152600490813610156200001757600080fd5b6000803560e01c63c92c8a56146200002e57600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001462000343576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620003435767ffffffffffffffff92803560c435858111620004d857620000a89036908401620004dc565b909660e435878111620003e357620000c49036908601620004dc565b61010492919235898111620004d457620000e29036908801620004dc565b90926101243596878101809111620004c15734106200046657508851936158a392838601938685108d861117620004535790869594939291620005aa873960a435845260209d8e3090860152338d86015260c098896060870152898601906200014b9262000512565b9084820360808601526200015f9262000512565b918083039060a00152620001739262000512565b039085f08015620004495773ffffffffffffffffffffffffffffffffffffffff1695863b15620004455785517f8129fc1c00000000000000000000000000000000000000000000000000000000815285818681838c5af18015620003ef576200041d575b506024928335865260643589528686207fffffffffffffffffffffffff0000000000000000000000000000000000000000908982825416179055336000526044358a5287600020805490680100000000000000008210156200040b5760018201808255821015620003f95788528a8820018982825416179055886000526084358a52876000209033908254161790558062000276575b88888851908152f35b8284918851928380927fd96a094a0000000000000000000000000000000000000000000000000000000082528a8a8301528c5af1918215620003ef5786926200035c575b5050606091500151908451927fa9059cbb0000000000000000000000000000000000000000000000000000000084523390840152820152848160448185885af18015620003525762000311575b808080806200026d565b8481813d83116200034a575b62000329818362000551565b810103126200034657518015150362000343578062000307565b80fd5b5080fd5b503d6200031d565b83513d84823e3d90fd5b9091508282813d8311620003e7575b62000377818362000551565b81010312620003e357865192830190811183821017620003cf576060929160a091885280518352898101518a8401528781015188840152838101518484015260808101516080840152015160a08201523880620002ba565b83604186634e487b7160e01b600052526000fd5b8580fd5b503d6200036b565b87513d88823e3d90fd5b868960328a634e487b7160e01b835252fd5b868960418a634e487b7160e01b835252fd5b818196929611620004325786529338620001d7565b602482604187634e487b7160e01b835252fd5b8480fd5b85513d86823e3d90fd5b60248b60418c634e487b7160e01b835252fd5b806020897f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b60248a60118b634e487b7160e01b835252fd5b8780fd5b8380fd5b9181601f840112156200050d5782359167ffffffffffffffff83116200050d57602083818601950101116200050d57565b600080fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176200059357604052565b634e487b7160e01b600052604160045260246000fdfe6101a080604052346200071e57620058a3803803809162000021828562000723565b833981019060c0818303126200071e578051620000416020830162000747565b6200004f6040840162000747565b60608401516001600160401b0381116200071e57856200007191860162000781565b60808501519094906001600160401b0381116200071e57866200009691830162000781565b60a08201519096906001600160401b0381116200071e57620000b9920162000781565b6040805191929082016001600160401b03811183821017620004ce5760405260018252603160f81b6020830190815286519097906001600160401b038111620004ce57600354600181811c9116801562000713575b6020821014620004ad57601f8111620006a9575b50806020601f82116001146200061e5760009162000612575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004ce5760045490600182811c9216801562000607575b6020831014620004ad5781601f84931162000592575b50602090601f83116001146200050757600092620004fb575b50508160011b916000199060031b1c1916176004555b620001c586620007dc565b96610120978852620001d78362000981565b9661014097885260208151910120928360e0525190209182610100524660a0526040519260208401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604085015260608401524660808401523060a084015260a0835260c083019083821060018060401b03831117620004ce576040829052835190206080523060c0526001600160a01b03918216928315620004e4575050600880546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955670429d069189e0000600b5566470de4df820000600c556101809283526101609182528051906001600160401b038211620004ce57600a5490600182811c92168015620004c3575b6020831014620004ad5781601f84931162000449575b50602090601f8311600114620003cf57600092620003c3575b50508160011b916000199060031b1c191617600a555b60405192614daa948562000ad98639608051856145b1015260a0518561466c015260c05185614582015260e0518561460001526101005185614626015251846123f50152518361241f015251828181610a7501528181610f7501528181611674015281816125fb0152614c3b0152518181816129b50152614c620152f35b0151905038806200032f565b600a6000908152600080516020620058838339815191529350601f198516905b81811062000430575090846001959493921062000416575b505050811b01600a5562000345565b015160001960f88460031b161c1916905538808062000407565b92936020600181928786015181550195019301620003ef565b600a60005290915060008051602062005883833981519152601f840160051c81019160208510620004a2575b90601f859493920160051c01905b81811062000492575062000316565b6000815584935060010162000483565b909150819062000475565b634e487b7160e01b600052602260045260246000fd5b91607f169162000300565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a4565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106200057957509084600195949392106200055f575b505050811b01600455620001ba565b015160001960f88460031b161c1916905538808062000550565b9293602060018192878601518155019501930162000538565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81019160208510620005fc575b90601f859493920160051c01905b818110620005ec57506200018b565b60008155849350600101620005dd565b9091508190620005cf565b91607f169162000175565b9050880151386200013b565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8b82821062000690575050908360019493921062000676575b5050811b0160035562000150565b8a015160001960f88460031b161c19169055388062000668565b600184956020939584930151815501940192016200064f565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c8101916020841062000708575b601f0160051c01905b818110620006fb575062000122565b60008155600101620006ec565b9091508190620006e3565b90607f16906200010e565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004ce57604052565b51906001600160a01b03821682036200071e57565b60005b838110620007705750506000910152565b81810151838201526020016200075f565b81601f820112156200071e5780516001600160401b038111620004ce5760405192620007b8601f8301601f19166020018562000723565b818452602082840101116200071e57620007d991602080850191016200075c565b90565b805160209190828110156200085c575090601f8251116200081a57808251920151908083106200080b57501790565b82600019910360031b1b161790565b6044906200084e9260405193849263305a27a960e01b8452806004850152825192839182602487015286860191016200075c565b601f01601f19168101030190fd5b6001600160401b038111620004ce576005928354926001938481811c9116801562000976575b83821014620004ad57601f81116200093f575b5081601f8411600114620008d55750928293918392600094620008c9575b50501b916000199060031b1c191617905560ff90565b015192503880620008b3565b919083601f1981168760005284600020946000905b888383106200092457505050106200090a575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620008fd565b858701518855909601959485019487935090810190620008ea565b8560005284601f846000209201871c820191601f8601881c015b8281106200096957505062000895565b6000815501859062000959565b90607f169062000882565b805160209081811015620009ae5750601f8251116200081a57808251920151908083106200080b57501790565b906001600160401b038211620004ce57600654926001938481811c9116801562000acd575b83821014620004ad57601f811162000a93575b5081601f841160011462000a27575092829391839260009462000a1b575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a04565b919083601f198116600660005284600020946000905b8883831062000a78575050501062000a5e575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a50565b85870151885590960195948501948793509081019062000a3d565b600660005284601f84600020920160051c820191601f860160051c015b82811062000ac0575050620009e6565b6000815501859062000ab0565b90607f1690620009d356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816306fdde0314613f46575080630839664614613e93578063095ea7b314613e6957806318160ddd14613e4a5780631df4ccfc14613e2b57806323b872dd14613cee5780632e17de7814613c14578063313ce56714613bf85780633644e51514613bd4578063368242d314613a965780633a04bc0c1461386c5780633b47a9ac146136b35780633d203ce21461356257806343352d61146133c5578063485449ab1461328f5780634cf088d9146132455780634cf518a11461313957806352f5213c14612f3f5780636215be7714612ed6578063626a9b2614612d0657806362bf342f14612b9d5780636b69e05b14612ab957806370a0823114612a83578063715018a614612a0f5780637ecebe00146129d857806380afdea81461299d5780638129fc1c146125df57806383d593d51461251957806384b0196e146123de578381638681d72f1461233c5750806388d4a3e5146121b3578381638d3ed7c414612123575080638da5cb5b146120fb5780638fcb4e5b1461201857806392fd9e8b14611f1057806395d89b4114611e3a578063a2dc057414611db4578063a694fc3a14611ce2578063a8d5fd6514611caf578063a9059cbb14611c7e578063af157c1914611abc57838163b579184f146119ec57508063b60e34551461187f578063c30f4a5a14611698578063c45a015514611654578063cac5fe001461163557838163cd5c6426146115b157508063d505accf146113fe578063d79875eb14610f56578063d94a862b14610cfc578063d96a094a14610a53578063dcb2a3f514610992578063dd62ed3e14610946578063dddccf4f14610927578063e3f6b544146108f4578063eac989f81461080e578063eb2fd7351461069a578063eeb3e45614610550578063ef153e1314610479578063f2fde38b146103bb578063fc0c546a146103845763fedda89c03610011578291346103805782600319360112610380576102f36149a3565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F91823b1561037b57601160248592845195869384927f70d07b820000000000000000000000000000000000000000000000000000000084528301525af4908115610372575061035b575b50600160095580f35b610364906140f0565b61036f578038610352565b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b82843461036f578060031936011261036f5750600e54600f54601054925191825260208201526040810191909152606090f35b0390f35b5034610475576020600319360112610475576103d5614036565b906103de6141c9565b6001600160a01b03809216928315610446575050600854827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b5091903461054c5761048a366140a0565b906104936149a3565b60118351957f1cfada8800000000000000000000000000000000000000000000000000000000875286015260296024860152604485015260648401526020836084817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af49182156105415791610508575b60209250600160095551908152f35b90506020823d8211610539575b81610522602093836141a6565b810103126105345760209151906104f9565b600080fd5b3d9150610515565b9051903d90823e3d90fd5b5080fd5b509061055b366140a0565b9290916105666149a3565b60118151927ff9dc32510000000000000000000000000000000000000000000000000000000084528301526029602483015282604483015283606483015280826084817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af4908115610691578592869261061f575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160095580f35b809350818093503d831161068a575b61063881836141a6565b8101031261068657816106146001600160a01b039260206106797f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3596614be3565b93015193509193506105d0565b8480fd5b503d61062e565b513d86823e3d90fd5b503461047557606060031936011261047557803567ffffffffffffffff811161080a576106ca9036908301614072565b91909260243592604435916106dd6141c9565b60208151947ff1a91b13000000000000000000000000000000000000000000000000000000008652850152608060248501526020848061072160848201868b614950565b886044830152866064830152038173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af4938415610800578794610792575b50917f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99461078c9260ff9594519586951697856149eb565b0390a280f35b919350916020823d82116107f8575b816107ae602093836141a6565b810103126107f4577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99460ff946107e761078c94614894565b9550925094929092610754565b8680fd5b3d91506107a1565b81513d89823e3d90fd5b8380fd5b82843461036f578060031936011261036f57508051600091600a54610832816140b6565b808452906001908181169081156108cc575060011461086f575b505061085d826103b79403836141a6565b51918291602083526020830190614011565b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8286106108b4575050509181016020019161085d8261084c565b8054602087870181019190915290950194810161089a565b6103b79650859250602091509260ff1961085d941682840152151560051b820101945061084c565b50503461054c578160031936011261054c5760609060ff6020541690602154906022549181519384526020840152820152f35b50503461054c578160031936011261054c57602090600b549051908152f35b50503461054c578060031936011261054c57602091610963614036565b8261096c61404c565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b5091903461054c5760209283600319360112610475576001600160a01b036109b8614036565b60118451937fed6de06000000000000000000000000000000000000000000000000000000000855284015216602482015283816044817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af4928315610a485792610a19575b5051908152f35b9091508281813d8311610a41575b610a3181836141a6565b8101031261053457519038610a12565b503d610a27565b8251903d90823e3d90fd5b509190602060031936011261054c57610a6a614971565b50610a736149a3565b7f0000000000000000000000000000000000000000000000000000000000000000928151927f55d2ad91000000000000000000000000000000000000000000000000000000008452600e828501523460248501528135604485015260c084606481739bFF8E70071F17b41b9CD1292687dfe146572b985af4938415610cf0578194610cb4575b50336001600160a01b03861603610b7f57505060c09250610b7d90610b3e610b38610b2d6060860151608087015190614334565b60a086015190614334565b336148f2565b600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b6080840194610b8e8651614d06565b6060850192610b9e8451336148f2565b610ba98751306148f2565b610bb960a08701928351906148f2565b848601519351965191518551917f70a082310000000000000000000000000000000000000000000000000000000083523390830152602082602481305afa918215610caa578492610c6a575b509160c097610c627f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9388979695610b7d99519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b0390a3610b3e565b959493929091506020863d8211610ca2575b81610c89602093836141a6565b81010312610534579451939492939192919060c0610c05565b3d9150610c7c565b86513d86823e3d90fd5b90935060c03d8111610ce9575b610ccb81836141a6565b81019060c0818303126106865790610ce2916148a2565b9238610af9565b503d610cc1565b508251903d90823e3d90fd5b50823461036f578060031936011261036f578251907f8c48d33200000000000000000000000000000000000000000000000000000000825260208093830152808260248173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af4918215610f4a578192610e06575b5083519280840190808552835180925285850181878460051b880101950193965b838810610d935786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a60019503018652885190610dd982516080808452830190614011565b91838101518483015286810151878301526060809101511515910152970193019701969093929193610d86565b9091503d8083833e610e1881836141a6565b810190838183031261047557805167ffffffffffffffff9182821161068657019082601f8301121561080a57815190610e5082614692565b93610e5d885195866141a6565b828552868086019360051b850101938185116107f457878101935b858510610e8c575050505050509084610d65565b8451848111610f46578201608080601f198387030112610f42578b5191610eb283614136565b8b810151878111610f3e57810186603f82011215610f3e578c8101518e9188610eda83614878565b93610ee7815195866141a6565b8385528383010111610f3a57938f92938f979594610f10610f2b948a9997878b85019101613fee565b855283810151878601526060938482015190860152016149de565b90820152815201940193610e78565b8d80fd5b8b80fd5b8980fd5b8880fd5b508351903d90823e3d90fd5b5090610f61366140a0565b90610f6a614971565b50610f736149a3565b7f0000000000000000000000000000000000000000000000000000000000000000948351947f04cac304000000000000000000000000000000000000000000000000000000008652600e818701526024938385880152604487015260c086606481739bFF8E70071F17b41b9CD1292687dfe146572b985af49586156113f45782966113b8575b50479385870194855110156113765760808701946110178651614d06565b60608801519030156113485730600052602091600083528860002054818110611303579080600092308452838652038a832055806002540360025589519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843092a360a08901996110cf838c518b51809381927fa9059cbb000000000000000000000000000000000000000000000000000000008352868b8401602090939291936001600160a01b0360408201951681520152565b03818a305af180156112f9576112c5575b5081513315611284578680808093335af16110f9614b0a565b5015611243576001600160a01b03163303611155575b60c089610b7d8a600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b819051965199519388519384917f70a08231000000000000000000000000000000000000000000000000000000008352339083015281305afa93841561123857936111fe575b50508451938452602084019290925260408301959095526060820152608081019390935260c092610b7d919033906001907f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9060a090a39038808080808061110f565b9080935081969594963d8311611231575b61121981836141a6565b81010312610534579051929391929086610b7d61119b565b503d61120f565b8751903d90823e3d90fd5b606485601386868d519362461bcd60e51b85528401528201527f455448207472616e73666572206661696c6564000000000000000000000000006044820152fd5b606486600f87878e519362461bcd60e51b85528401528201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b8381813d83116112f2575b6112da81836141a6565b810103126107f4576112eb906149de565b50386110e0565b503d6112d0565b8a513d89823e3d90fd5b89517fe450d38c000000000000000000000000000000000000000000000000000000008152308188019081526020810192909252604082018390529081906060010390fd5b5050918551917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b906015606492602088519362461bcd60e51b85528401528201527f546f6b656e20616d6f756e7420746f206c6172676500000000000000000000006044820152fd5b90955060c03d81116113ed575b6113cf81836141a6565b81019060c08183031261047557906113e6916148a2565b9438610ff9565b503d6113c5565b85513d84823e3d90fd5b5082903461054c5760e060031936011261054c5761141a614036565b61142261404c565b906044359260643560843560ff8116810361053457814211611582576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff82111761156d578b5251902061152291611519916114d8614578565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a435922061441a565b909291926144aa565b168181036115395786611536878787614357565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b929050346103805782600319360112610380577378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F91823b1561037b57601160248592845195869384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af490811561037257506116255750f35b61162e906140f0565b61036f5780f35b50503461054c578160031936011261054c57602090600c549051908152f35b50503461054c578160031936011261054c57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b509034610475576020908160031936011261080a5767ffffffffffffffff90833582811161187b576116cd9036908601614072565b949092851161186857506116e2600a546140b6565b601f8111611806575b5084601f851160011461175e579161174d91857f2f2d2a717e92a63c8c9b88d06e020349c3aad8ffb1a8f1f0bac3e5b2111728669695948891611753575b508560011b906000198760031b1c191617600a555b51938385948552840191614950565b0390a180f35b905082013538611729565b600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890601f198616875b8181106117ef57509161174d9391877f2f2d2a717e92a63c8c9b88d06e020349c3aad8ffb1a8f1f0bac3e5b21117286698979694106117d5575b5050600185811b01600a5561173e565b60001960f88860031b161c199084013516905538806117c5565b91928660018192868901358155019401920161178b565b600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f860160051c81019185871061185e575b601f0160051c01905b81811061185357506116eb565b868155600101611846565b909150819061183d565b856041602492634e487b7160e01b835252fd5b8580fd5b5082903461054c578160031936011261054c5782519283602554808652602080960190602586527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90865b8181106119d857505050816118e09103826141a6565b80519473Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C999691855b878110611906578680f35b81518110156119c557828160051b830101518551907f5dc38368000000000000000000000000000000000000000000000000000000008252848883015260248201528581604481885af49081156119bb579061196991899161198d575b50614bf7565b600019811461197a576001016118fb565b602487601188634e487b7160e01b835252fd5b6119ad9150873d89116119b4575b6119a581836141a6565b810190614bcd565b508a611963565b503d61199b565b86513d8a823e3d90fd5b602487603288634e487b7160e01b835252fd5b8254845292880192600192830192016118ca565b8281853461054c57602060031936011261054c57611a08614036565b90611a116141c9565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F93843b1561080a576011604485926001600160a01b03855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156103725750611aa8575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b611ab1906140f0565b61054c578183611a80565b5082903461054c578160031936011261054c5760118351917f77e7a4e700000000000000000000000000000000000000000000000000000000835282015281816024817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af4908115611c74578291611b92575b508251916020808401908085528351809252808686019401925b828110611b4b5785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060808201519087015260809081015115159086015260a09094019392810192600101611b3e565b90503d8083833e611ba381836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a57805191611bdc83614692565b93611be9875195866141a6565b838552818501908260a080960285010193818511611c70578301915b848310611c185750505050505083611b24565b8583830312611c70578386918a51611c2f8161411a565b611c3886614be3565b815282860151838201528b8601518c820152606080870151908201526080611c618188016149de565b90820152815201920191611c05565b8780fd5b83513d84823e3d90fd5b50503461054c578060031936011261054c57602090611ca8611c9e614036565b602435903361420d565b5160018152f35b82843461036f578060031936011261036f5750601154601254601354925191825260208201526040810191909152606090f35b5090346104755760206003193601126104755782823592611d016149a3565b730399287237558F68b41C26893a7f30F5dedF879A90813b1561047557601860648492865194859384927f94cfd9ca000000000000000000000000000000000000000000000000000000008452830152602760248301528860448301525af48015611c7457611da0575b505051908152817f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160095580f35b611da9906140f0565b610475578238611d6b565b5091903461054c5760209283600319360112610475576001600160a01b03611dda614036565b60188451937fabe9c5800000000000000000000000000000000000000000000000000000000085528401521660248201528381604481730399287237558F68b41C26893a7f30F5dedF879A5af4928315610a485792610a19575051908152f35b50913461036f578060031936011261036f57508051906000928054611e5e816140b6565b80855291600191808316908115611ee85750600114611e8a575b50505061085d826103b79403836141a6565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610611ed05750505061085d8260206103b79582010194611e78565b80546020878701810191909152909501948101611eb3565b6103b797508693506020925061085d94915060ff191682840152151560051b82010194611e78565b5034610475578260031936011261047557611f296149a3565b60118251917faf5907fa0000000000000000000000000000000000000000000000000000000083528201526020816024817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af490811561200c578391611fbb575b50905133815260208101919091527fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b37890604090a1600160095580f35b90506020813d8211612004575b81611fd5602093836141a6565b8101031261053457517fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b378611f7f565b3d9150611fc8565b505051903d90823e3d90fd5b509034610475578060031936011261047557612032614036565b9083602435926120406149a3565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F94853b15610475576011606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015611c74576120e7575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b6120f0906140f0565b61080a5783386120b3565b50503461054c578160031936011261054c576020906001600160a01b03600854169051908152f35b929050346103805760206003193601126103805761213f6149a3565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F91823b1561037b57839060648351809581937f8b26588d000000000000000000000000000000000000000000000000000000008352601181840152602960248401523560448301525af4908115610372575061035b5750600160095580f35b5082903461054c578160031936011261054c5760118351917fcd985a900000000000000000000000000000000000000000000000000000000083528201526029602482015281816044817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af4908115611c74578291612279575b508251916020808401908085528351809252808686019401925b8281106122495785850386f35b835180516001600160a01b031686528083015186840152870151878601526060909401939281019260010161223c565b90503d8083833e61228a81836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a578051916122c383614692565b936122d0875195866141a6565b8385528185019082606080960285010193818511611c70578301915b8483106122ff5750505050505083612222565b8583830312611c70578386918a516123168161416e565b61231f86614be3565b815282860151838201528b8601518c8201528152019201916122ec565b9290503461038057602060031936011261038057612358614036565b916123616149a3565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F90813b1561068657606460119186936001600160a01b03865197889586947f03d9eb84000000000000000000000000000000000000000000000000000000008652850152602b60248501521660448301525af4908115610372575061035b5750600160095580f35b5090346104755782600319360112610475576124197f00000000000000000000000000000000000000000000000000000000000000006146aa565b926124437f00000000000000000000000000000000000000000000000000000000000000006147be565b908251926020928385019585871067ffffffffffffffff881117612504575092806124ba8388966124ad998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b0190614011565b91898303908a0152614011565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106124ed57505050500390f35b8351855286955093810193928101926001016124de565b604190634e487b7160e01b6000525260246000fd5b509034610475576020600319360112610475578135916125376141c9565b662386f26fc1000083106125775750816020917fb019d30b2fca7d8ca474448afd53ea1177a76c833805dc3d78eff68e7edb5a6f93600b5551908152a180f35b6020608492519162461bcd60e51b8352820152602260248201527f5374616b696e67206665652070657263656e74206d757374206265203e3d203160448201527f30250000000000000000000000000000000000000000000000000000000000006064820152fd5b50346104755782600319360112610475576001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016330361295a57837378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F8260085416813b1561047557829060448751809481937fa9479ab100000000000000000000000000000000000000000000000000000000835260118a84015260248301525af480156113f457612946575b505060085416835281602060148152620f42408286205581517ff1a91b1300000000000000000000000000000000000000000000000000000000815281848201526080602482015261270860848201604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b90828180660746a528800000948560448301528a6064830152038173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af490811561293c5787916128e0575b50835160608082526006908201527f4d656d626572000000000000000000000000000000000000000000000000000060808201528381019290925281840187905260ff16907f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99060a090a281516127be8161416e565b6801a055690d9db80000908181526b037790a0e8714009b49c000080938201527305a37324b8ac5eceebef390a22a97c20000000009384910152600e55600f55601055600e8251917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015282604482015260c081606481739bFF8E70071F17b41b9CD1292687dfe146572b985af4918215610372575082916128a0575b506128928160a06128896060611536950151608084015190614334565b91015190614334565b8060195542601855306148f2565b905060c03d81116128d9575b6128b681836141a6565b810160c082820312610475576128d261289291611536936148a2565b915061286c565b503d6128ac565b809450838092503d8311612935575b6128f981836141a6565b8101031261187b577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab960ff61292e8795614894565b9150612748565b503d6128ef565b84513d89823e3d90fd5b61294f906140f0565b61080a578338612688565b506020606492519162461bcd60e51b8352820152601b60248201527f4f6e6c7920666163746f72792063616e20696e697469616c697a6500000000006044820152fd5b50503461054c578160031936011261054c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461054c57602060031936011261054c57806020926001600160a01b036129ff614036565b1681526007845220549051908152f35b833461036f578060031936011261036f57612a286141c9565b60006001600160a01b036008547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461054c57602060031936011261054c57806020926001600160a01b03612aaa614036565b16815280845220549051908152f35b5091903461054c578160031936011261054c57612ad46149a3565b60188151937fe21c40c2000000000000000000000000000000000000000000000000000000008552840152602083602481730399287237558F68b41C26893a7f30F5dedF879A5af49182156105415791612b69575b8051338152602080820184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e90604090a1600160095551908152f35b90506020823d8211612b95575b81612b83602093836141a6565b81010312610534576020915190612b29565b3d9150612b76565b5082903461054c57606060031936011261054c57612bb9614062565b90612bc261404c565b9073Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99968551937f844899f10000000000000000000000000000000000000000000000000000000085528480612c2960209687948784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af4938415612cfc57908692918695612cc7575b508391606491845196879485937f6555463a000000000000000000000000000000000000000000000000000000008552840152602483015260443560448301525af4918215612cbd578392612c9b575b508351928352820152f35b909250612cb59150833d85116119b4576119a581836141a6565b909184612c90565b84513d85823e3d90fd5b84809296508194503d8311612cf5575b612ce181836141a6565b810103126105345790519285919083612c40565b503d612cd7565b86513d87823e3d90fd5b5082903461054c578160031936011261054c5760118351917f3299ded1000000000000000000000000000000000000000000000000000000008352820152602b602482015281816044817378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F5af4908115611c74578291612dee575b508251916020808401908085528351809252808686019401925b828110612d9c5785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101612d8f565b90503d8083833e612dff81836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a57805191612e3883614692565b93612e45875195866141a6565b838552818501908260c080960285010193818511611c70578301915b848310612e745750505050505083612d75565b8583830312611c70578386918a51612e8b81614152565b612e9486614be3565b8152612ea1838701614be3565b838201528b8601518c820152606080870151908201526080808701519082015260a08087015190820152815201920191612e61565b5034610475576020600319360112610475577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e8858916020913590612f176149a3565b612f2382601154614334565b601155612f3282303330614a2a565b51908152a1600160095580f35b5090602060031936011261047557612f55614062565b91612f5e6149a3565b81517f55d2ad91000000000000000000000000000000000000000000000000000000008152600e8282015234602482015284604482015260c081606481739bFF8E70071F17b41b9CD1292687dfe146572b985af49081156130ed5785916130f7575b5060608061302e920192612fd58451306148f2565b835190855193849283927f993fb23a000000000000000000000000000000000000000000000000000000008452893491850160809194939260ff60a0830196602084526025602085015216604083015260608201520152565b038173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af49182156130ed57907f0635ef1e7ec61e8fbc08936f9b13870db015313a86f660631af3057da5a8552692918691879088946130ae575b509061308b61061492614bf7565b51945192839260ff33981696846040919493926060820195825260208201520152565b61061492945061308b93506130da915060603d81116130e6575b6130d281836141a6565b810190614a0f565b9491939091925061307d565b503d6130c8565b83513d87823e3d90fd5b905060c03d8111613132575b61310d81836141a6565b81019060c08183031261187b57606061312a61302e9382936148a2565b925050612fc0565b503d613103565b50903461047557608060031936011261047557613154614036565b906024359160443585606435926131696149a3565b7378BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F96873b1561047557601160c484926001600160a01b03895195869485937f92bb1514000000000000000000000000000000000000000000000000000000008552840152602b6024840152169a8b60448301528a60648301528760848301528860a48301525af480156113f457613231575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec541908060608101610614565b61323a906140f0565b61187b5785386131ef565b50503461054c578160031936011261054c5760c0906018549060195490601a54601b5490601c5492601d5494815196875260208701528501526060840152608083015260a0820152f35b5090346104755760a0600319360112610475576132aa614062565b60243567ffffffffffffffff8111610686576132c99036908501614072565b9160443593866064359260843597881515809903610475576132e96141c9565b73Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C999691823b1561080a5760ff92602085938751958694859384937fa5ac5cd7000000000000000000000000000000000000000000000000000000008552840152169c8d602483015260c0604483015261335960c483018d8d614950565b908d60648401528a608484015260a483015203915af48015611c74576133ad575b5050907f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f9461078c9251948594856149eb565b6133b9909392936140f0565b6107f45790863861337a565b5082903461054c578160031936011261054c5760188351917f442679e5000000000000000000000000000000000000000000000000000000008352820152602760248201528181604481730399287237558F68b41C26893a7f30F5dedF879A5af4908115611c74578291613496575b508251916020808401908085528351809252808686019401925b82811061345b5785850386f35b835180516001600160a01b0316865280830151868401528781015188870152606090810151908601526080909401939281019260010161344e565b90503d8083833e6134a781836141a6565b810190602090818184031261080a5780519067ffffffffffffffff821161068657019082601f8301121561080a5781516134e081614692565b936134ed875195866141a6565b818552828086019260071b850101938185116107f4578301915b84831061351957505050505083613434565b6080838303126107f45783608091895161353281614136565b61353b86614be3565b815282860151838201528a8601518b82015260608087015190820152815201920191613507565b5034610475578160031936011261047557816135eb91613580614062565b602061358a61404c565b73Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C999692855196879283927f844899f10000000000000000000000000000000000000000000000000000000084528784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af49384156136a9578694613670575b50602091604491845195869485937f5dc3836800000000000000000000000000000000000000000000000000000000855284015260248301525af490811561200c57611536928492613652575b5050614bf7565b6136689250803d106119b4576119a581836141a6565b50388061364b565b925092506020823d82116136a1575b8161368c602093836141a6565b810103126105345790519183919060206135fe565b3d915061367f565b83513d88823e3d90fd5b50823461036f578060031936011261036f578251907ffb1af52e0000000000000000000000000000000000000000000000000000000082526020809383015260256024830152808260448173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af4918215610f4a578192613790575b50835192808401908085528351809252808686019401925b8281106137485785850386f35b8351805160ff168652808301516001600160a01b0316868401528781015188870152606080820151908701526080908101519086015260a0909401939281019260010161373b565b9091503d8083833e6137a281836141a6565b81019083818303126104755780519067ffffffffffffffff821161080a570181601f82011215610475578051906137d882614692565b926137e5875194856141a6565b828452858401908660a0809502840101928184116107f4578701915b8383106138145750505050509084613723565b84838303126107f4578785918a5161382b8161411a565b61383486614894565b8152613841838701614be3565b838201528b8601518c8201526060808701519082015260808087015190820152815201920191613801565b5034610475578160031936011261047557613885614062565b90602435906138926149a3565b8115613a535783517f9f697947000000000000000000000000000000000000000000000000000000008152600e82820152826024820152602081604481739bFF8E70071F17b41b9CD1292687dfe146572b985af4908115613a495784908792613a15575b506060919261390785303330614a2a565b61395e85885195869485947f993fb23a000000000000000000000000000000000000000000000000000000008652850160809194939260ff60a0830196602084526025602085015216604083015260608201520152565b038173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af4908115613a0b577f0635ef1e7ec61e8fbc08936f9b13870db015313a86f660631af3057da5a855269293948691879088946139dc575b50906139bb61061492614bf7565b5192839260ff33981696846040919493926060820195825260208201520152565b6106149294506139bb93506139ff915060603d81116130e6576130d281836141a6565b949193909192506139ad565b84513d87823e3d90fd5b9150506020813d8211613a41575b81613a30602093836141a6565b8101031261053457518360606138f6565b3d9150613a23565b85513d88823e3d90fd5b606490602085519162461bcd60e51b8352820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b503461047557816003193601126104755760ff613ab1614062565b613ab96149a3565b60208451937f85e03dcb000000000000000000000000000000000000000000000000000000008552840152602560248401521690816044820152602435606482015260808160848173Dc22C3993FfFAe687E3EBFbB24b1E61Abc6C99965af4908115613bc7578493859486928794613b7a575b507fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff982769939291613b5d61061492614bf7565b519283923397846040919493926060820195825260208201520152565b9550509150506080833d8211613bbf575b81613b98608093836141a6565b8101031261080a578251602084015184830151606090950151909490929091610614613b2c565b3d9150613b8b565b50505051903d90823e3d90fd5b50503461054c578160031936011261054c57602090613bf1614578565b9051908152f35b50503461054c578160031936011261054c576020905160128152f35b50903461047557602060031936011261047557813591613c326149a3565b83730399287237558F68b41C26893a7f30F5dedF879A91823b1561054c576064601891855194859384927ffc74ae08000000000000000000000000000000000000000000000000000000008452830152602760248301528760448301525af48015613ce457613cd1575b505190815260017f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160095580f35b613cdd909391936140f0565b9138613c9c565b82513d86823e3d90fd5b50823461036f57606060031936011261036f57613d09614036565b613d1161404c565b91604435936001600160a01b038316808352600160205286832033845260205286832054916000198303613d4e575b602088611ca889898961420d565b868310613de6578115613db7573315613d8857508252600160209081528683203384528152918690209085900390558290611ca887613d40565b602490848951917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602490848951917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b87517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018790528291506060010390fd5b50503461054c578160031936011261054c57602090600d549051908152f35b50503461054c578160031936011261054c576020906002549051908152f35b50503461054c578060031936011261054c57602090611ca8613e89614036565b6024359033614357565b50903461047557826003193601126104755760188151927f204c022a000000000000000000000000000000000000000000000000000000008452830152602082602481730399287237558F68b41C26893a7f30F5dedF879A5af4918215613f3c578392613f05575b6020838351908152f35b9091506020813d8211613f34575b81613f20602093836141a6565b810103126104755760209250519038613efb565b3d9150613f13565b81513d85823e3d90fd5b8490843461047557826003193601126104755782600354613f66816140b6565b80855291600191808316908115611ee85750600114613f915750505061085d826103b79403836141a6565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610613fd65750505061085d8260206103b79582010194611e78565b80546020878701810191909152909501948101613fb9565b60005b8381106140015750506000910152565b8181015183820152602001613ff1565b90601f19601f60209361402f81518092818752878088019101613fee565b0116010190565b600435906001600160a01b038216820361053457565b602435906001600160a01b038216820361053457565b6004359060ff8216820361053457565b9181601f840112156105345782359167ffffffffffffffff8311610534576020838186019501011161053457565b6003196040910112610534576004359060243590565b90600182811c921680156140e6575b60208310146140d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916140c5565b67ffffffffffffffff811161410457604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761410457604052565b6080810190811067ffffffffffffffff82111761410457604052565b60c0810190811067ffffffffffffffff82111761410457604052565b6060810190811067ffffffffffffffff82111761410457604052565b6040810190811067ffffffffffffffff82111761410457604052565b90601f601f19910116810190811067ffffffffffffffff82111761410457604052565b6001600160a01b036008541633036141dd57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b916001600160a01b0380841692831561430357169283156142d25760009083825281602052604082205490838210614287575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b9190820180921161434157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038091169182156143e957169182156143b85760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161449e57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156144925780516001600160a01b0381161561448957918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b600481101561456257806144bc575050565b600181036144ee5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b6002810361452757602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146145315750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480614669575b156145d3577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261466381614152565b51902090565b507f000000000000000000000000000000000000000000000000000000000000000046146145aa565b67ffffffffffffffff81116141045760051b60200190565b60ff81146147005760ff811690601f82116146d657604051916146cc8361418a565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614713836140b6565b8083529260019081811690811561479c575060011461473d575b5061473a925003826141a6565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310614781575061473a93505081016020013861472d565b81935090816020925483858901015201910190918492614768565b6020935061473a95925060ff1991501682840152151560051b8201013861472d565b60ff81146147e05760ff811690601f82116146d657604051916146cc8361418a565b506040516006548160006147f3836140b6565b8083529260019081811690811561479c5750600114614819575061473a925003826141a6565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b84831061485d575061473a93505081016020013861472d565b81935090816020925483858901015201910190918492614844565b67ffffffffffffffff811161410457601f01601f191660200190565b519060ff8216820361053457565b91908260c0910312610534576040516148ba81614152565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6001600160a01b03169081156142d2577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614934600094600254614334565b60025584845283825260408420818154019055604051908152a3565b601f8260209493601f19938186528686013760008582860101520116010190565b6040519061497e82614152565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6002600954146149b4576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b5190811515820361053457565b90614a059060409396959496606084526060840191614950565b9460208201520152565b90816060910312610534578051916040602083015192015190565b600091614aa09383926040519660208801937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248b0152166044890152606488015260648752614a898761411a565b1694519082865af1614a99614b0a565b9083614b3a565b8051908115159182614ae7575b5050614ab65750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192509060209181010312610534576020614b0291016149de565b153880614aad565b3d15614b35573d90614b1b82614878565b91614b2960405193846141a6565b82523d6000602084013e565b606090565b90614b795750805115614b4f57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580614bc4575b614b8a575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15614b82565b9190826040910312610534576020825192015190565b51906001600160a01b038216820361053457565b80614bff5750565b600c5490604051917fe3455f3a000000000000000000000000000000000000000000000000000000008352602060048401526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248401527f000000000000000000000000000000000000000000000000000000000000000060448401526064830152608482015260208160a481732b906b88777d6121F050cbe1608e9d391C1A316c5af48015614cfa57600090614cc7575b614cc59150614d06565b565b6020823d8211614cf2575b81614cdf602093836141a6565b8101031261036f5750614cc59051614cbb565b3d9150614cd2565b6040513d6000823e3d90fd5b601c5415614d6457600b5480820290828204148215171561434157670de0b6b3a76400009004614d3881601b54614334565b601b5581039080821161434157614d54614d5f92601154614334565b601155600d54614334565b600d55565b80614d54614d5f9260115461433456fea264697066735822122078c353f69fa4d3460d77355a156a32e10698aef6275998a81a6ad0f1c4e80dab64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220378d65d78391b2238251d737356afe3bea7458978ea9ea7be21dfafba1af99c064736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600490813610156200001757600080fd5b6000803560e01c63c92c8a56146200002e57600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001462000343576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620003435767ffffffffffffffff92803560c435858111620004d857620000a89036908401620004dc565b909660e435878111620003e357620000c49036908601620004dc565b61010492919235898111620004d457620000e29036908801620004dc565b90926101243596878101809111620004c15734106200046657508851936158a392838601938685108d861117620004535790869594939291620005aa873960a435845260209d8e3090860152338d86015260c098896060870152898601906200014b9262000512565b9084820360808601526200015f9262000512565b918083039060a00152620001739262000512565b039085f08015620004495773ffffffffffffffffffffffffffffffffffffffff1695863b15620004455785517f8129fc1c00000000000000000000000000000000000000000000000000000000815285818681838c5af18015620003ef576200041d575b506024928335865260643589528686207fffffffffffffffffffffffff0000000000000000000000000000000000000000908982825416179055336000526044358a5287600020805490680100000000000000008210156200040b5760018201808255821015620003f95788528a8820018982825416179055886000526084358a52876000209033908254161790558062000276575b88888851908152f35b8284918851928380927fd96a094a0000000000000000000000000000000000000000000000000000000082528a8a8301528c5af1918215620003ef5786926200035c575b5050606091500151908451927fa9059cbb0000000000000000000000000000000000000000000000000000000084523390840152820152848160448185885af18015620003525762000311575b808080806200026d565b8481813d83116200034a575b62000329818362000551565b810103126200034657518015150362000343578062000307565b80fd5b5080fd5b503d6200031d565b83513d84823e3d90fd5b9091508282813d8311620003e7575b62000377818362000551565b81010312620003e357865192830190811183821017620003cf576060929160a091885280518352898101518a8401528781015188840152838101518484015260808101516080840152015160a08201523880620002ba565b83604186634e487b7160e01b600052526000fd5b8580fd5b503d6200036b565b87513d88823e3d90fd5b868960328a634e487b7160e01b835252fd5b868960418a634e487b7160e01b835252fd5b818196929611620004325786529338620001d7565b602482604187634e487b7160e01b835252fd5b8480fd5b85513d86823e3d90fd5b60248b60418c634e487b7160e01b835252fd5b806020897f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b60248a60118b634e487b7160e01b835252fd5b8780fd5b8380fd5b9181601f840112156200050d5782359167ffffffffffffffff83116200050d57602083818601950101116200050d57565b600080fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176200059357604052565b634e487b7160e01b600052604160045260246000fdfe6101a080604052346200071e57620058a3803803809162000021828562000723565b833981019060c0818303126200071e578051620000416020830162000747565b6200004f6040840162000747565b60608401516001600160401b0381116200071e57856200007191860162000781565b60808501519094906001600160401b0381116200071e57866200009691830162000781565b60a08201519096906001600160401b0381116200071e57620000b9920162000781565b6040805191929082016001600160401b03811183821017620004ce5760405260018252603160f81b6020830190815286519097906001600160401b038111620004ce57600354600181811c9116801562000713575b6020821014620004ad57601f8111620006a9575b50806020601f82116001146200061e5760009162000612575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004ce5760045490600182811c9216801562000607575b6020831014620004ad5781601f84931162000592575b50602090601f83116001146200050757600092620004fb575b50508160011b916000199060031b1c1916176004555b620001c586620007dc565b96610120978852620001d78362000981565b9661014097885260208151910120928360e0525190209182610100524660a0526040519260208401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604085015260608401524660808401523060a084015260a0835260c083019083821060018060401b03831117620004ce576040829052835190206080523060c0526001600160a01b03918216928315620004e4575050600880546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600955670429d069189e0000600b5566470de4df820000600c556101809283526101609182528051906001600160401b038211620004ce57600a5490600182811c92168015620004c3575b6020831014620004ad5781601f84931162000449575b50602090601f8311600114620003cf57600092620003c3575b50508160011b916000199060031b1c191617600a555b60405192614daa948562000ad98639608051856145b1015260a0518561466c015260c05185614582015260e0518561460001526101005185614626015251846123f50152518361241f015251828181610a7501528181610f7501528181611674015281816125fb0152614c3b0152518181816129b50152614c620152f35b0151905038806200032f565b600a6000908152600080516020620058838339815191529350601f198516905b81811062000430575090846001959493921062000416575b505050811b01600a5562000345565b015160001960f88460031b161c1916905538808062000407565b92936020600181928786015181550195019301620003ef565b600a60005290915060008051602062005883833981519152601f840160051c81019160208510620004a2575b90601f859493920160051c01905b81811062000492575062000316565b6000815584935060010162000483565b909150819062000475565b634e487b7160e01b600052602260045260246000fd5b91607f169162000300565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b8252600060c490910152602490fd5b015190503880620001a4565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106200057957509084600195949392106200055f575b505050811b01600455620001ba565b015160001960f88460031b161c1916905538808062000550565b9293602060018192878601518155019501930162000538565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81019160208510620005fc575b90601f859493920160051c01905b818110620005ec57506200018b565b60008155849350600101620005dd565b9091508190620005cf565b91607f169162000175565b9050880151386200013b565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b8b82821062000690575050908360019493921062000676575b5050811b0160035562000150565b8a015160001960f88460031b161c19169055388062000668565b600184956020939584930151815501940192016200064f565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c8101916020841062000708575b601f0160051c01905b818110620006fb575062000122565b60008155600101620006ec565b9091508190620006e3565b90607f16906200010e565b600080fd5b601f909101601f19168101906001600160401b03821190821017620004ce57604052565b51906001600160a01b03821682036200071e57565b60005b838110620007705750506000910152565b81810151838201526020016200075f565b81601f820112156200071e5780516001600160401b038111620004ce5760405192620007b8601f8301601f19166020018562000723565b818452602082840101116200071e57620007d991602080850191016200075c565b90565b805160209190828110156200085c575090601f8251116200081a57808251920151908083106200080b57501790565b82600019910360031b1b161790565b6044906200084e9260405193849263305a27a960e01b8452806004850152825192839182602487015286860191016200075c565b601f01601f19168101030190fd5b6001600160401b038111620004ce576005928354926001938481811c9116801562000976575b83821014620004ad57601f81116200093f575b5081601f8411600114620008d55750928293918392600094620008c9575b50501b916000199060031b1c191617905560ff90565b015192503880620008b3565b919083601f1981168760005284600020946000905b888383106200092457505050106200090a575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620008fd565b858701518855909601959485019487935090810190620008ea565b8560005284601f846000209201871c820191601f8601881c015b8281106200096957505062000895565b6000815501859062000959565b90607f169062000882565b805160209081811015620009ae5750601f8251116200081a57808251920151908083106200080b57501790565b906001600160401b038211620004ce57600654926001938481811c9116801562000acd575b83821014620004ad57601f811162000a93575b5081601f841160011462000a27575092829391839260009462000a1b575b50501b916000199060031b1c19161760065560ff90565b01519250388062000a04565b919083601f198116600660005284600020946000905b8883831062000a78575050501062000a5e575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000a50565b85870151885590960195948501948793509081019062000a3d565b600660005284601f84600020920160051c820191601f860160051c015b82811062000ac0575050620009e6565b6000815501859062000ab0565b90607f1690620009d356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816306fdde0314613f46575080630839664614613e93578063095ea7b314613e6957806318160ddd14613e4a5780631df4ccfc14613e2b57806323b872dd14613cee5780632e17de7814613c14578063313ce56714613bf85780633644e51514613bd4578063368242d314613a965780633a04bc0c1461386c5780633b47a9ac146136b35780633d203ce21461356257806343352d61146133c5578063485449ab1461328f5780634cf088d9146132455780634cf518a11461313957806352f5213c14612f3f5780636215be7714612ed6578063626a9b2614612d0657806362bf342f14612b9d5780636b69e05b14612ab957806370a0823114612a83578063715018a614612a0f5780637ecebe00146129d857806380afdea81461299d5780638129fc1c146125df57806383d593d51461251957806384b0196e146123de578381638681d72f1461233c5750806388d4a3e5146121b3578381638d3ed7c414612123575080638da5cb5b146120fb5780638fcb4e5b1461201857806392fd9e8b14611f1057806395d89b4114611e3a578063a2dc057414611db4578063a694fc3a14611ce2578063a8d5fd6514611caf578063a9059cbb14611c7e578063af157c1914611abc57838163b579184f146119ec57508063b60e34551461187f578063c30f4a5a14611698578063c45a015514611654578063cac5fe001461163557838163cd5c6426146115b157508063d505accf146113fe578063d79875eb14610f56578063d94a862b14610cfc578063d96a094a14610a53578063dcb2a3f514610992578063dd62ed3e14610946578063dddccf4f14610927578063e3f6b544146108f4578063eac989f81461080e578063eb2fd7351461069a578063eeb3e45614610550578063ef153e1314610479578063f2fde38b146103bb578063fc0c546a146103845763fedda89c03610011578291346103805782600319360112610380576102f36149a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561037b57601160248592845195869384927f70d07b820000000000000000000000000000000000000000000000000000000084528301525af4908115610372575061035b575b50600160095580f35b610364906140f0565b61036f578038610352565b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b82843461036f578060031936011261036f5750600e54600f54601054925191825260208201526040810191909152606090f35b0390f35b5034610475576020600319360112610475576103d5614036565b906103de6141c9565b6001600160a01b03809216928315610446575050600854827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b5091903461054c5761048a366140a0565b906104936149a3565b60118351957f1cfada88000000000000000000000000000000000000000000000000000000008752860152602960248601526044850152606484015260208360848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156105415791610508575b60209250600160095551908152f35b90506020823d8211610539575b81610522602093836141a6565b810103126105345760209151906104f9565b600080fd5b3d9150610515565b9051903d90823e3d90fd5b5080fd5b509061055b366140a0565b9290916105666149a3565b60118151927ff9dc325100000000000000000000000000000000000000000000000000000000845283015260296024830152826044830152836064830152808260848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610691578592869261061f575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160095580f35b809350818093503d831161068a575b61063881836141a6565b8101031261068657816106146001600160a01b039260206106797f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a3596614be3565b93015193509193506105d0565b8480fd5b503d61062e565b513d86823e3d90fd5b503461047557606060031936011261047557803567ffffffffffffffff811161080a576106ca9036908301614072565b91909260243592604435916106dd6141c9565b60208151947ff1a91b13000000000000000000000000000000000000000000000000000000008652850152608060248501526020848061072160848201868b614950565b886044830152866064830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af4938415610800578794610792575b50917f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99461078c9260ff9594519586951697856149eb565b0390a280f35b919350916020823d82116107f8575b816107ae602093836141a6565b810103126107f4577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99460ff946107e761078c94614894565b9550925094929092610754565b8680fd5b3d91506107a1565b81513d89823e3d90fd5b8380fd5b82843461036f578060031936011261036f57508051600091600a54610832816140b6565b808452906001908181169081156108cc575060011461086f575b505061085d826103b79403836141a6565b51918291602083526020830190614011565b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8286106108b4575050509181016020019161085d8261084c565b8054602087870181019190915290950194810161089a565b6103b79650859250602091509260ff1961085d941682840152151560051b820101945061084c565b50503461054c578160031936011261054c5760609060ff6020541690602154906022549181519384526020840152820152f35b50503461054c578160031936011261054c57602090600b549051908152f35b50503461054c578060031936011261054c57602091610963614036565b8261096c61404c565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b5091903461054c5760209283600319360112610475576001600160a01b036109b8614036565b60118451937fed6de060000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4928315610a485792610a19575b5051908152f35b9091508281813d8311610a41575b610a3181836141a6565b8101031261053457519038610a12565b503d610a27565b8251903d90823e3d90fd5b509190602060031936011261054c57610a6a614971565b50610a736149a3565b7f0000000000000000000000000000000000000000000000000000000000000000928151927f55d2ad91000000000000000000000000000000000000000000000000000000008452600e828501523460248501528135604485015260c08460648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4938415610cf0578194610cb4575b50336001600160a01b03861603610b7f57505060c09250610b7d90610b3e610b38610b2d6060860151608087015190614334565b60a086015190614334565b336148f2565b600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b6080840194610b8e8651614d06565b6060850192610b9e8451336148f2565b610ba98751306148f2565b610bb960a08701928351906148f2565b848601519351965191518551917f70a082310000000000000000000000000000000000000000000000000000000083523390830152602082602481305afa918215610caa578492610c6a575b509160c097610c627f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9388979695610b7d99519485943399869192608093969594919660a084019784526020840152604083015260608201520152565b0390a3610b3e565b959493929091506020863d8211610ca2575b81610c89602093836141a6565b81010312610534579451939492939192919060c0610c05565b3d9150610c7c565b86513d86823e3d90fd5b90935060c03d8111610ce9575b610ccb81836141a6565b81019060c0818303126106865790610ce2916148a2565b9238610af9565b503d610cc1565b508251903d90823e3d90fd5b50823461036f578060031936011261036f578251907f8c48d33200000000000000000000000000000000000000000000000000000000825260208093830152808260248173__$481ca34c951945c71f6bbcbbb91702f088$__5af4918215610f4a578192610e06575b5083519280840190808552835180925285850181878460051b880101950193965b838810610d935786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a60019503018652885190610dd982516080808452830190614011565b91838101518483015286810151878301526060809101511515910152970193019701969093929193610d86565b9091503d8083833e610e1881836141a6565b810190838183031261047557805167ffffffffffffffff9182821161068657019082601f8301121561080a57815190610e5082614692565b93610e5d885195866141a6565b828552868086019360051b850101938185116107f457878101935b858510610e8c575050505050509084610d65565b8451848111610f46578201608080601f198387030112610f42578b5191610eb283614136565b8b810151878111610f3e57810186603f82011215610f3e578c8101518e9188610eda83614878565b93610ee7815195866141a6565b8385528383010111610f3a57938f92938f979594610f10610f2b948a9997878b85019101613fee565b855283810151878601526060938482015190860152016149de565b90820152815201940193610e78565b8d80fd5b8b80fd5b8980fd5b8880fd5b508351903d90823e3d90fd5b5090610f61366140a0565b90610f6a614971565b50610f736149a3565b7f0000000000000000000000000000000000000000000000000000000000000000948351947f04cac304000000000000000000000000000000000000000000000000000000008652600e818701526024938385880152604487015260c08660648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49586156113f45782966113b8575b50479385870194855110156113765760808701946110178651614d06565b60608801519030156113485730600052602091600083528860002054818110611303579080600092308452838652038a832055806002540360025589519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843092a360a08901996110cf838c518b51809381927fa9059cbb000000000000000000000000000000000000000000000000000000008352868b8401602090939291936001600160a01b0360408201951681520152565b03818a305af180156112f9576112c5575b5081513315611284578680808093335af16110f9614b0a565b5015611243576001600160a01b03163303611155575b60c089610b7d8a600160095551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b819051965199519388519384917f70a08231000000000000000000000000000000000000000000000000000000008352339083015281305afa93841561123857936111fe575b50508451938452602084019290925260408301959095526060820152608081019390935260c092610b7d919033906001907f1fa3e9d78a22c7b92955b7a49e88c17330837234362586f638c614238a85ac4b9060a090a39038808080808061110f565b9080935081969594963d8311611231575b61121981836141a6565b81010312610534579051929391929086610b7d61119b565b503d61120f565b8751903d90823e3d90fd5b606485601386868d519362461bcd60e51b85528401528201527f455448207472616e73666572206661696c6564000000000000000000000000006044820152fd5b606486600f87878e519362461bcd60e51b85528401528201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b8381813d83116112f2575b6112da81836141a6565b810103126107f4576112eb906149de565b50386110e0565b503d6112d0565b8a513d89823e3d90fd5b89517fe450d38c000000000000000000000000000000000000000000000000000000008152308188019081526020810192909252604082018390529081906060010390fd5b5050918551917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b906015606492602088519362461bcd60e51b85528401528201527f546f6b656e20616d6f756e7420746f206c6172676500000000000000000000006044820152fd5b90955060c03d81116113ed575b6113cf81836141a6565b81019060c08183031261047557906113e6916148a2565b9438610ff9565b503d6113c5565b85513d84823e3d90fd5b5082903461054c5760e060031936011261054c5761141a614036565b61142261404c565b906044359260643560843560ff8116810361053457814211611582576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff82111761156d578b5251902061152291611519916114d8614578565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a435922061441a565b909291926144aa565b168181036115395786611536878787614357565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b9290503461038057826003193601126103805773__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561037b57601160248592845195869384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af490811561037257506116255750f35b61162e906140f0565b61036f5780f35b50503461054c578160031936011261054c57602090600c549051908152f35b50503461054c578160031936011261054c57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b509034610475576020908160031936011261080a5767ffffffffffffffff90833582811161187b576116cd9036908601614072565b949092851161186857506116e2600a546140b6565b601f8111611806575b5084601f851160011461175e579161174d91857f2f2d2a717e92a63c8c9b88d06e020349c3aad8ffb1a8f1f0bac3e5b2111728669695948891611753575b508560011b906000198760031b1c191617600a555b51938385948552840191614950565b0390a180f35b905082013538611729565b600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890601f198616875b8181106117ef57509161174d9391877f2f2d2a717e92a63c8c9b88d06e020349c3aad8ffb1a8f1f0bac3e5b21117286698979694106117d5575b5050600185811b01600a5561173e565b60001960f88860031b161c199084013516905538806117c5565b91928660018192868901358155019401920161178b565b600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f860160051c81019185871061185e575b601f0160051c01905b81811061185357506116eb565b868155600101611846565b909150819061183d565b856041602492634e487b7160e01b835252fd5b8580fd5b5082903461054c578160031936011261054c5782519283602554808652602080960190602586527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90865b8181106119d857505050816118e09103826141a6565b80519473__$481ca34c951945c71f6bbcbbb91702f088$__91855b878110611906578680f35b81518110156119c557828160051b830101518551907f5dc38368000000000000000000000000000000000000000000000000000000008252848883015260248201528581604481885af49081156119bb579061196991899161198d575b50614bf7565b600019811461197a576001016118fb565b602487601188634e487b7160e01b835252fd5b6119ad9150873d89116119b4575b6119a581836141a6565b810190614bcd565b508a611963565b503d61199b565b86513d8a823e3d90fd5b602487603288634e487b7160e01b835252fd5b8254845292880192600192830192016118ca565b8281853461054c57602060031936011261054c57611a08614036565b90611a116141c9565b73__$aee754128d0d1775ed250cc6ad74f33f25$__93843b1561080a576011604485926001600160a01b03855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156103725750611aa8575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b611ab1906140f0565b61054c578183611a80565b5082903461054c578160031936011261054c5760118351917f77e7a4e7000000000000000000000000000000000000000000000000000000008352820152818160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115611c74578291611b92575b508251916020808401908085528351809252808686019401925b828110611b4b5785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060808201519087015260809081015115159086015260a09094019392810192600101611b3e565b90503d8083833e611ba381836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a57805191611bdc83614692565b93611be9875195866141a6565b838552818501908260a080960285010193818511611c70578301915b848310611c185750505050505083611b24565b8583830312611c70578386918a51611c2f8161411a565b611c3886614be3565b815282860151838201528b8601518c820152606080870151908201526080611c618188016149de565b90820152815201920191611c05565b8780fd5b83513d84823e3d90fd5b50503461054c578060031936011261054c57602090611ca8611c9e614036565b602435903361420d565b5160018152f35b82843461036f578060031936011261036f5750601154601254601354925191825260208201526040810191909152606090f35b5090346104755760206003193601126104755782823592611d016149a3565b73__$b2fda0c84abdf24a5bde0680bf090c8e0e$__90813b1561047557601860648492865194859384927f94cfd9ca000000000000000000000000000000000000000000000000000000008452830152602760248301528860448301525af48015611c7457611da0575b505051908152817f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160095580f35b611da9906140f0565b610475578238611d6b565b5091903461054c5760209283600319360112610475576001600160a01b03611dda614036565b60188451937fabe9c580000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4928315610a485792610a19575051908152f35b50913461036f578060031936011261036f57508051906000928054611e5e816140b6565b80855291600191808316908115611ee85750600114611e8a575b50505061085d826103b79403836141a6565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610611ed05750505061085d8260206103b79582010194611e78565b80546020878701810191909152909501948101611eb3565b6103b797508693506020925061085d94915060ff191682840152151560051b82010194611e78565b5034610475578260031936011261047557611f296149a3565b60118251917faf5907fa00000000000000000000000000000000000000000000000000000000835282015260208160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af490811561200c578391611fbb575b50905133815260208101919091527fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b37890604090a1600160095580f35b90506020813d8211612004575b81611fd5602093836141a6565b8101031261053457517fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b378611f7f565b3d9150611fc8565b505051903d90823e3d90fd5b509034610475578060031936011261047557612032614036565b9083602435926120406149a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__94853b15610475576011606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015611c74576120e7575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160095580f35b6120f0906140f0565b61080a5783386120b3565b50503461054c578160031936011261054c576020906001600160a01b03600854169051908152f35b929050346103805760206003193601126103805761213f6149a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561037b57839060648351809581937f8b26588d000000000000000000000000000000000000000000000000000000008352601181840152602960248401523560448301525af4908115610372575061035b5750600160095580f35b5082903461054c578160031936011261054c5760118351917fcd985a9000000000000000000000000000000000000000000000000000000000835282015260296024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115611c74578291612279575b508251916020808401908085528351809252808686019401925b8281106122495785850386f35b835180516001600160a01b031686528083015186840152870151878601526060909401939281019260010161223c565b90503d8083833e61228a81836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a578051916122c383614692565b936122d0875195866141a6565b8385528185019082606080960285010193818511611c70578301915b8483106122ff5750505050505083612222565b8583830312611c70578386918a516123168161416e565b61231f86614be3565b815282860151838201528b8601518c8201528152019201916122ec565b9290503461038057602060031936011261038057612358614036565b916123616149a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__90813b1561068657606460119186936001600160a01b03865197889586947f03d9eb84000000000000000000000000000000000000000000000000000000008652850152602b60248501521660448301525af4908115610372575061035b5750600160095580f35b5090346104755782600319360112610475576124197f00000000000000000000000000000000000000000000000000000000000000006146aa565b926124437f00000000000000000000000000000000000000000000000000000000000000006147be565b908251926020928385019585871067ffffffffffffffff881117612504575092806124ba8388966124ad998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b0190614011565b91898303908a0152614011565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106124ed57505050500390f35b8351855286955093810193928101926001016124de565b604190634e487b7160e01b6000525260246000fd5b509034610475576020600319360112610475578135916125376141c9565b662386f26fc1000083106125775750816020917fb019d30b2fca7d8ca474448afd53ea1177a76c833805dc3d78eff68e7edb5a6f93600b5551908152a180f35b6020608492519162461bcd60e51b8352820152602260248201527f5374616b696e67206665652070657263656e74206d757374206265203e3d203160448201527f30250000000000000000000000000000000000000000000000000000000000006064820152fd5b50346104755782600319360112610475576001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016330361295a578373__$aee754128d0d1775ed250cc6ad74f33f25$__8260085416813b1561047557829060448751809481937fa9479ab100000000000000000000000000000000000000000000000000000000835260118a84015260248301525af480156113f457612946575b505060085416835281602060148152620f42408286205581517ff1a91b1300000000000000000000000000000000000000000000000000000000815281848201526080602482015261270860848201604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b90828180660746a528800000948560448301528a6064830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af490811561293c5787916128e0575b50835160608082526006908201527f4d656d626572000000000000000000000000000000000000000000000000000060808201528381019290925281840187905260ff16907f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab99060a090a281516127be8161416e565b6801a055690d9db80000908181526b037790a0e8714009b49c000080938201527305a37324b8ac5eceebef390a22a97c20000000009384910152600e55600f55601055600e8251917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015282604482015260c08160648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4918215610372575082916128a0575b506128928160a06128896060611536950151608084015190614334565b91015190614334565b8060195542601855306148f2565b905060c03d81116128d9575b6128b681836141a6565b810160c082820312610475576128d261289291611536936148a2565b915061286c565b503d6128ac565b809450838092503d8311612935575b6128f981836141a6565b8101031261187b577f02ea164f1e72debe1fa44263ec4b96833565a97140dc95780c060bdc207e6ab960ff61292e8795614894565b9150612748565b503d6128ef565b84513d89823e3d90fd5b61294f906140f0565b61080a578338612688565b506020606492519162461bcd60e51b8352820152601b60248201527f4f6e6c7920666163746f72792063616e20696e697469616c697a6500000000006044820152fd5b50503461054c578160031936011261054c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461054c57602060031936011261054c57806020926001600160a01b036129ff614036565b1681526007845220549051908152f35b833461036f578060031936011261036f57612a286141c9565b60006001600160a01b036008547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461054c57602060031936011261054c57806020926001600160a01b03612aaa614036565b16815280845220549051908152f35b5091903461054c578160031936011261054c57612ad46149a3565b60188151937fe21c40c200000000000000000000000000000000000000000000000000000000855284015260208360248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49182156105415791612b69575b8051338152602080820184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e90604090a1600160095551908152f35b90506020823d8211612b95575b81612b83602093836141a6565b81010312610534576020915190612b29565b3d9150612b76565b5082903461054c57606060031936011261054c57612bb9614062565b90612bc261404c565b9073__$481ca34c951945c71f6bbcbbb91702f088$__8551937f844899f10000000000000000000000000000000000000000000000000000000085528480612c2960209687948784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af4938415612cfc57908692918695612cc7575b508391606491845196879485937f6555463a000000000000000000000000000000000000000000000000000000008552840152602483015260443560448301525af4918215612cbd578392612c9b575b508351928352820152f35b909250612cb59150833d85116119b4576119a581836141a6565b909184612c90565b84513d85823e3d90fd5b84809296508194503d8311612cf5575b612ce181836141a6565b810103126105345790519285919083612c40565b503d612cd7565b86513d87823e3d90fd5b5082903461054c578160031936011261054c5760118351917f3299ded1000000000000000000000000000000000000000000000000000000008352820152602b6024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115611c74578291612dee575b508251916020808401908085528351809252808686019401925b828110612d9c5785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c09094019392810192600101612d8f565b90503d8083833e612dff81836141a6565b810190602090818184031261080a5780519067ffffffffffffffff8211610686570182601f8201121561080a57805191612e3883614692565b93612e45875195866141a6565b838552818501908260c080960285010193818511611c70578301915b848310612e745750505050505083612d75565b8583830312611c70578386918a51612e8b81614152565b612e9486614be3565b8152612ea1838701614be3565b838201528b8601518c820152606080870151908201526080808701519082015260a08087015190820152815201920191612e61565b5034610475576020600319360112610475577f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e8858916020913590612f176149a3565b612f2382601154614334565b601155612f3282303330614a2a565b51908152a1600160095580f35b5090602060031936011261047557612f55614062565b91612f5e6149a3565b81517f55d2ad91000000000000000000000000000000000000000000000000000000008152600e8282015234602482015284604482015260c08160648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49081156130ed5785916130f7575b5060608061302e920192612fd58451306148f2565b835190855193849283927f993fb23a000000000000000000000000000000000000000000000000000000008452893491850160809194939260ff60a0830196602084526025602085015216604083015260608201520152565b038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49182156130ed57907f0635ef1e7ec61e8fbc08936f9b13870db015313a86f660631af3057da5a8552692918691879088946130ae575b509061308b61061492614bf7565b51945192839260ff33981696846040919493926060820195825260208201520152565b61061492945061308b93506130da915060603d81116130e6575b6130d281836141a6565b810190614a0f565b9491939091925061307d565b503d6130c8565b83513d87823e3d90fd5b905060c03d8111613132575b61310d81836141a6565b81019060c08183031261187b57606061312a61302e9382936148a2565b925050612fc0565b503d613103565b50903461047557608060031936011261047557613154614036565b906024359160443585606435926131696149a3565b73__$aee754128d0d1775ed250cc6ad74f33f25$__96873b1561047557601160c484926001600160a01b03895195869485937f92bb1514000000000000000000000000000000000000000000000000000000008552840152602b6024840152169a8b60448301528a60648301528760848301528860a48301525af480156113f457613231575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec541908060608101610614565b61323a906140f0565b61187b5785386131ef565b50503461054c578160031936011261054c5760c0906018549060195490601a54601b5490601c5492601d5494815196875260208701528501526060840152608083015260a0820152f35b5090346104755760a0600319360112610475576132aa614062565b60243567ffffffffffffffff8111610686576132c99036908501614072565b9160443593866064359260843597881515809903610475576132e96141c9565b73__$481ca34c951945c71f6bbcbbb91702f088$__91823b1561080a5760ff92602085938751958694859384937fa5ac5cd7000000000000000000000000000000000000000000000000000000008552840152169c8d602483015260c0604483015261335960c483018d8d614950565b908d60648401528a608484015260a483015203915af48015611c74576133ad575b5050907f4b365b5b8b335b79e52a6f681cb9d3cd1e90e4176af83c651cbff13bf395063f9461078c9251948594856149eb565b6133b9909392936140f0565b6107f45790863861337a565b5082903461054c578160031936011261054c5760188351917f442679e500000000000000000000000000000000000000000000000000000000835282015260276024820152818160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4908115611c74578291613496575b508251916020808401908085528351809252808686019401925b82811061345b5785850386f35b835180516001600160a01b0316865280830151868401528781015188870152606090810151908601526080909401939281019260010161344e565b90503d8083833e6134a781836141a6565b810190602090818184031261080a5780519067ffffffffffffffff821161068657019082601f8301121561080a5781516134e081614692565b936134ed875195866141a6565b818552828086019260071b850101938185116107f4578301915b84831061351957505050505083613434565b6080838303126107f45783608091895161353281614136565b61353b86614be3565b815282860151838201528a8601518b82015260608087015190820152815201920191613507565b5034610475578160031936011261047557816135eb91613580614062565b602061358a61404c565b73__$481ca34c951945c71f6bbcbbb91702f088$__92855196879283927f844899f10000000000000000000000000000000000000000000000000000000084528784019092916001600160a01b0360209160ff604085019616845216910152565b0381845af49384156136a9578694613670575b50602091604491845195869485937f5dc3836800000000000000000000000000000000000000000000000000000000855284015260248301525af490811561200c57611536928492613652575b5050614bf7565b6136689250803d106119b4576119a581836141a6565b50388061364b565b925092506020823d82116136a1575b8161368c602093836141a6565b810103126105345790519183919060206135fe565b3d915061367f565b83513d88823e3d90fd5b50823461036f578060031936011261036f578251907ffb1af52e0000000000000000000000000000000000000000000000000000000082526020809383015260256024830152808260448173__$481ca34c951945c71f6bbcbbb91702f088$__5af4918215610f4a578192613790575b50835192808401908085528351809252808686019401925b8281106137485785850386f35b8351805160ff168652808301516001600160a01b0316868401528781015188870152606080820151908701526080908101519086015260a0909401939281019260010161373b565b9091503d8083833e6137a281836141a6565b81019083818303126104755780519067ffffffffffffffff821161080a570181601f82011215610475578051906137d882614692565b926137e5875194856141a6565b828452858401908660a0809502840101928184116107f4578701915b8383106138145750505050509084613723565b84838303126107f4578785918a5161382b8161411a565b61383486614894565b8152613841838701614be3565b838201528b8601518c8201526060808701519082015260808087015190820152815201920191613801565b5034610475578160031936011261047557613885614062565b90602435906138926149a3565b8115613a535783517f9f697947000000000000000000000000000000000000000000000000000000008152600e8282015282602482015260208160448173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4908115613a495784908792613a15575b506060919261390785303330614a2a565b61395e85885195869485947f993fb23a000000000000000000000000000000000000000000000000000000008652850160809194939260ff60a0830196602084526025602085015216604083015260608201520152565b038173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115613a0b577f0635ef1e7ec61e8fbc08936f9b13870db015313a86f660631af3057da5a855269293948691879088946139dc575b50906139bb61061492614bf7565b5192839260ff33981696846040919493926060820195825260208201520152565b6106149294506139bb93506139ff915060603d81116130e6576130d281836141a6565b949193909192506139ad565b84513d87823e3d90fd5b9150506020813d8211613a41575b81613a30602093836141a6565b8101031261053457518360606138f6565b3d9150613a23565b85513d88823e3d90fd5b606490602085519162461bcd60e51b8352820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b503461047557816003193601126104755760ff613ab1614062565b613ab96149a3565b60208451937f85e03dcb000000000000000000000000000000000000000000000000000000008552840152602560248401521690816044820152602435606482015260808160848173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115613bc7578493859486928794613b7a575b507fe70e3ee1430d361caee5fb409d6b71bca477c4aabc49e7798e6f3adcff982769939291613b5d61061492614bf7565b519283923397846040919493926060820195825260208201520152565b9550509150506080833d8211613bbf575b81613b98608093836141a6565b8101031261080a578251602084015184830151606090950151909490929091610614613b2c565b3d9150613b8b565b50505051903d90823e3d90fd5b50503461054c578160031936011261054c57602090613bf1614578565b9051908152f35b50503461054c578160031936011261054c576020905160128152f35b50903461047557602060031936011261047557813591613c326149a3565b8373__$b2fda0c84abdf24a5bde0680bf090c8e0e$__91823b1561054c576064601891855194859384927ffc74ae08000000000000000000000000000000000000000000000000000000008452830152602760248301528760448301525af48015613ce457613cd1575b505190815260017f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160095580f35b613cdd909391936140f0565b9138613c9c565b82513d86823e3d90fd5b50823461036f57606060031936011261036f57613d09614036565b613d1161404c565b91604435936001600160a01b038316808352600160205286832033845260205286832054916000198303613d4e575b602088611ca889898961420d565b868310613de6578115613db7573315613d8857508252600160209081528683203384528152918690209085900390558290611ca887613d40565b602490848951917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602490848951917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b87517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018790528291506060010390fd5b50503461054c578160031936011261054c57602090600d549051908152f35b50503461054c578160031936011261054c576020906002549051908152f35b50503461054c578060031936011261054c57602090611ca8613e89614036565b6024359033614357565b50903461047557826003193601126104755760188151927f204c022a00000000000000000000000000000000000000000000000000000000845283015260208260248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4918215613f3c578392613f05575b6020838351908152f35b9091506020813d8211613f34575b81613f20602093836141a6565b810103126104755760209250519038613efb565b3d9150613f13565b81513d85823e3d90fd5b8490843461047557826003193601126104755782600354613f66816140b6565b80855291600191808316908115611ee85750600114613f915750505061085d826103b79403836141a6565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610613fd65750505061085d8260206103b79582010194611e78565b80546020878701810191909152909501948101613fb9565b60005b8381106140015750506000910152565b8181015183820152602001613ff1565b90601f19601f60209361402f81518092818752878088019101613fee565b0116010190565b600435906001600160a01b038216820361053457565b602435906001600160a01b038216820361053457565b6004359060ff8216820361053457565b9181601f840112156105345782359167ffffffffffffffff8311610534576020838186019501011161053457565b6003196040910112610534576004359060243590565b90600182811c921680156140e6575b60208310146140d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916140c5565b67ffffffffffffffff811161410457604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761410457604052565b6080810190811067ffffffffffffffff82111761410457604052565b60c0810190811067ffffffffffffffff82111761410457604052565b6060810190811067ffffffffffffffff82111761410457604052565b6040810190811067ffffffffffffffff82111761410457604052565b90601f601f19910116810190811067ffffffffffffffff82111761410457604052565b6001600160a01b036008541633036141dd57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b916001600160a01b0380841692831561430357169283156142d25760009083825281602052604082205490838210614287575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b9190820180921161434157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038091169182156143e957169182156143b85760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161449e57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156144925780516001600160a01b0381161561448957918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b600481101561456257806144bc575050565b600181036144ee5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b6002810361452757602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146145315750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480614669575b156145d3577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261466381614152565b51902090565b507f000000000000000000000000000000000000000000000000000000000000000046146145aa565b67ffffffffffffffff81116141045760051b60200190565b60ff81146147005760ff811690601f82116146d657604051916146cc8361418a565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b50604051600554816000614713836140b6565b8083529260019081811690811561479c575060011461473d575b5061473a925003826141a6565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310614781575061473a93505081016020013861472d565b81935090816020925483858901015201910190918492614768565b6020935061473a95925060ff1991501682840152151560051b8201013861472d565b60ff81146147e05760ff811690601f82116146d657604051916146cc8361418a565b506040516006548160006147f3836140b6565b8083529260019081811690811561479c5750600114614819575061473a925003826141a6565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b84831061485d575061473a93505081016020013861472d565b81935090816020925483858901015201910190918492614844565b67ffffffffffffffff811161410457601f01601f191660200190565b519060ff8216820361053457565b91908260c0910312610534576040516148ba81614152565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6001600160a01b03169081156142d2577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082614934600094600254614334565b60025584845283825260408420818154019055604051908152a3565b601f8260209493601f19938186528686013760008582860101520116010190565b6040519061497e82614152565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6002600954146149b4576002600955565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b5190811515820361053457565b90614a059060409396959496606084526060840191614950565b9460208201520152565b90816060910312610534578051916040602083015192015190565b600091614aa09383926040519660208801937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248b0152166044890152606488015260648752614a898761411a565b1694519082865af1614a99614b0a565b9083614b3a565b8051908115159182614ae7575b5050614ab65750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192509060209181010312610534576020614b0291016149de565b153880614aad565b3d15614b35573d90614b1b82614878565b91614b2960405193846141a6565b82523d6000602084013e565b606090565b90614b795750805115614b4f57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580614bc4575b614b8a575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15614b82565b9190826040910312610534576020825192015190565b51906001600160a01b038216820361053457565b80614bff5750565b600c5490604051917fe3455f3a000000000000000000000000000000000000000000000000000000008352602060048401526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248401527f000000000000000000000000000000000000000000000000000000000000000060448401526064830152608482015260208160a48173__$7f462ad0bdcf6bc2a48b65b50bf27bdb7e$__5af48015614cfa57600090614cc7575b614cc59150614d06565b565b6020823d8211614cf2575b81614cdf602093836141a6565b8101031261036f5750614cc59051614cbb565b3d9150614cd2565b6040513d6000823e3d90fd5b601c5415614d6457600b5480820290828204148215171561434157670de0b6b3a76400009004614d3881601b54614334565b601b5581039080821161434157614d54614d5f92601154614334565b601155600d54614334565b600d55565b80614d54614d5f9260115461433456fea264697066735822122078c353f69fa4d3460d77355a156a32e10698aef6275998a81a6ad0f1c4e80dab64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220378d65d78391b2238251d737356afe3bea7458978ea9ea7be21dfafba1af99c064736f6c63430008140033",
  "libraries": {
    "Token": "0x9bFF8E70071F17b41b9CD1292687dfe146572b98",
    "Share": "0x78BF7cc6A08b32593Ad99D3513ee5bfd8d93fA4F",
    "Staking": "0x0399287237558F68b41C26893a7f30F5dedF879A",
    "Member": "0xDc22C3993FfFAe687E3EBFbB24b1E61Abc6C9996",
    "SpaceHelper": "0x2b906b88777d6121F050cbe1608e9d391C1A316c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}