{
  "address": "0x621F7321EEdeCbB7Ab42D5E418E81064dC4ABd62",
  "abi": [],
  "transactionHash": "0x4e2c8fa95769bd48dd29b0748fa2224e39c252807430697f6827a9736686bbdc",
  "receipt": {
    "to": null,
    "from": "0x45aBBC64421a54CbffF878985AE6c4F0cfacfDb7",
    "contractAddress": "0x621F7321EEdeCbB7Ab42D5E418E81064dC4ABd62",
    "transactionIndex": 2,
    "gasUsed": "44918780",
    "logsBloom": "0x
    "blockHash": "0x390296f251f960f2c0c96a10673d13ca1a94161db2fab4d10c2d472a27b5f02c",
    "transactionHash": "0x4e2c8fa95769bd48dd29b0748fa2224e39c252807430697f6827a9736686bbdc",
    "logs": [],
    "blockNumber": 79134020,
    "cumulativeGasUsed": "45580777",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "cae0ea752f8ed663578819c85266f7f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SpaceCreator.sol\":\"SpaceCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./lib/TransferUtil.sol\\\";\\nimport \\\"./lib/Share.sol\\\";\\nimport \\\"./lib/Staking.sol\\\";\\nimport \\\"./lib/Member.sol\\\";\\nimport \\\"./lib/Token.sol\\\";\\nimport \\\"./lib/Events.sol\\\";\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./interfaces/ISpace.sol\\\";\\nimport \\\"./interfaces/ISpaceFactory.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Space is ERC20, ERC20Permit, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  address public immutable factory;\\n  address public immutable founder;\\n  uint256 public immutable appId;\\n\\n  // fee\\n  uint256 public stakingFeePercent = 0.3 ether; // 30% default\\n\\n  uint256 public subscriptionFeePercent = 0.02 ether; // 2% to protocol\\n\\n  uint256 public totalFee;\\n\\n  // token\\n  Token.State public token;\\n\\n  // share\\n  Share.State public share;\\n\\n  // staking\\n  Staking.State public staking;\\n\\n  // subscription\\n  Member.State public member;\\n\\n  /**  Sets */\\n  EnumerableSet.Bytes32Set subscriptionIds;\\n  EnumerableSet.AddressSet stakers;\\n  EnumerableSet.UintSet orderIds;\\n  EnumerableSet.AddressSet vestingAddresses;\\n\\n  constructor(\\n    uint256 _appId,\\n    address _factory,\\n    address _founder,\\n    string memory _name,\\n    string memory _symbol\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) {\\n    appId = _appId;\\n    factory = _factory;\\n    founder = _founder;\\n  }\\n\\n  modifier onlyFounder() {\\n    require(msg.sender == founder, \\\"Only founder\\\");\\n    _;\\n  }\\n\\n  fallback() external payable {}\\n\\n  receive() external payable {}\\n\\n  function initialize() external {\\n    Share.addContributor(share, founder);\\n    share.contributors[founder].shares = SHARES_SUPPLY;\\n\\n    uint8 planId = Member.createPlan(member, \\\"Member\\\", DEFAULT_SUBSCRIPTION_PRICE);\\n\\n    emit Events.PlanCreated(planId, \\\"Member\\\", DEFAULT_SUBSCRIPTION_PRICE);\\n\\n    token = Token.State(Token.initialX, Token.initialY, Token.initialK);\\n\\n    uint256 premintEth = 3.3333 ether;\\n    BuyInfo memory info = Token.buy(token, premintEth, 0);\\n\\n    uint256 premint = info.tokenAmountAfterFee + info.creatorFee + info.protocolFee;\\n    staking.yieldAmount = premint;\\n    staking.yieldStartTime = block.timestamp;\\n    _mint(address(this), premint);\\n  }\\n\\n  function buy(uint256 minTokenAmount) external payable nonReentrant returns (BuyInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.buy(token, msg.value, minTokenAmount);\\n    if (isSwap) {\\n      _mint(msg.sender, info.tokenAmountAfterFee + info.creatorFee + info.protocolFee);\\n    } else {\\n      _splitFee(info.creatorFee);\\n      _mint(msg.sender, info.tokenAmountAfterFee);\\n      _mint(address(this), info.creatorFee);\\n      _mint(factory, info.protocolFee);\\n\\n      emit Events.Trade(\\n        Events.TradeType.Buy,\\n        msg.sender,\\n        info.ethAmount,\\n        info.tokenAmountAfterFee,\\n        info.creatorFee,\\n        info.protocolFee\\n      );\\n    }\\n  }\\n\\n  function sell(\\n    uint256 tokenAmount,\\n    uint256 minEthAmount\\n  ) external payable nonReentrant returns (SellInfo memory info) {\\n    bool isSwap = msg.sender == factory;\\n    info = Token.sell(token, tokenAmount, minEthAmount);\\n\\n    require(address(this).balance > info.ethAmount, \\\"Token amount to large\\\");\\n\\n    _splitFee(info.creatorFee);\\n    _burn(address(this), info.tokenAmountAfterFee);\\n\\n    IERC20(address(this)).transfer(factory, info.protocolFee);\\n\\n    TransferUtil.safeTransferETH(msg.sender, info.ethAmount);\\n\\n    if (!isSwap) {\\n      emit Events.Trade(\\n        Events.TradeType.Sell,\\n        msg.sender,\\n        info.ethAmount,\\n        tokenAmount,\\n        info.creatorFee,\\n        info.protocolFee\\n      );\\n    }\\n  }\\n\\n  // ================member======================\\n\\n  function createPlan(string calldata uri, uint256 price) external onlyFounder {\\n    uint8 id = Member.createPlan(member, uri, price);\\n    emit Events.PlanCreated(id, uri, price);\\n  }\\n\\n  function updatePlan(uint8 id, string memory uri, uint256 price, bool isActive) external onlyFounder {\\n    Member.updatePlan(member, id, uri, price, isActive);\\n  }\\n\\n  function getPlans() external view returns (Member.Plan[] memory) {\\n    return Member.getPlans(member);\\n  }\\n\\n  function subscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    uint256 tokenPricePerSecond = Member.getTokenPricePerSecond(member, token, planId);\\n    uint256 durationFromAmount = amount / tokenPricePerSecond;\\n    (uint256 income, ) = Member.subscribe(member, subscriptionIds, planId, amount, durationFromAmount, true);\\n    if (income > 0) {\\n      uint256 fee = _chargeSubscriptionFee(income);\\n      _splitFee(fee);\\n    }\\n\\n    emit Events.Subscribed(planId, msg.sender, amount, durationFromAmount);\\n  }\\n\\n  function subscribeByEth(uint8 planId) external payable nonReentrant {\\n    uint256 ethAmount = msg.value;\\n    BuyInfo memory info = Token.buy(token, ethAmount, 0);\\n    uint256 tokenPricePerSecond = Member.getTokenPricePerSecond(member, token, planId);\\n    uint256 durationByAmount = info.tokenAmountAfterFee / tokenPricePerSecond;\\n    (uint256 income, ) = Member.subscribe(\\n      member,\\n      subscriptionIds,\\n      planId,\\n      info.tokenAmountAfterFee,\\n      durationByAmount,\\n      false\\n    );\\n    _mint(address(this), info.tokenAmountAfterFee);\\n\\n    if (income > 0) {\\n      uint256 fee = _chargeSubscriptionFee(income);\\n      _splitFee(fee);\\n    }\\n\\n    emit Events.Subscribed(planId, msg.sender, info.tokenAmountAfterFee, durationByAmount);\\n  }\\n\\n  function unsubscribe(uint8 planId, uint256 amount) external nonReentrant {\\n    (uint256 income, uint256 unsubscribeAmount, uint256 unsubscribeDuration) = Member.unsubscribe(\\n      member,\\n      subscriptionIds,\\n      planId,\\n      amount\\n    );\\n\\n    if (income > 0) {\\n      uint256 fee = _chargeSubscriptionFee(income);\\n      _splitFee(fee);\\n    }\\n\\n    emit Events.Unsubscribed(planId, msg.sender, unsubscribeAmount, unsubscribeDuration);\\n  }\\n\\n  function distributeSubscriptionRewards() external {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      (uint256 income, ) = Member.distributeSingleSubscription(member, ids[i]);\\n      if (income > 0) {\\n        uint256 fee = _chargeSubscriptionFee(income);\\n        _splitFee(fee);\\n      }\\n    }\\n  }\\n\\n  function distributeSingleSubscription(uint8 planId, address account) external {\\n    bytes32 id = keccak256(abi.encode(planId, account));\\n    (uint256 income, ) = Member.distributeSingleSubscription(member, id);\\n\\n    if (income > 0) {\\n      uint256 fee = _chargeSubscriptionFee(income);\\n      _splitFee(fee);\\n    }\\n  }\\n\\n  function getSubscriptions() external view returns (Member.Subscription[] memory) {\\n    return Member.getSubscriptions(member, subscriptionIds);\\n  }\\n\\n  function calculateConsumedAmount(\\n    uint8 planId,\\n    address account,\\n    uint256 timestamp\\n  ) external view returns (uint256, uint256) {\\n    bytes32 id = keccak256(abi.encode(planId, account));\\n    return Member.calculateConsumedAmount(member, id, timestamp);\\n  }\\n\\n  //================share=======================\\n\\n  function addContributor(address account) external onlyFounder {\\n    Share.addContributor(share, account);\\n    emit Events.ContributorAdded(account);\\n  }\\n\\n  function distributeShareRewards() external {\\n    Share.distribute(share);\\n  }\\n\\n  function claimShareRewards() external nonReentrant {\\n    uint256 amount = Share.claimRewards(share);\\n    emit Events.ShareRewardsClaimed(msg.sender, amount);\\n  }\\n\\n  function transferShares(address to, uint256 amount) external nonReentrant {\\n    Share.transferShares(share, to, amount);\\n    emit Events.SharesTransferred(msg.sender, to, amount);\\n  }\\n\\n  function createShareOrder(uint256 amount, uint256 price) external nonReentrant returns (uint256) {\\n    return Share.createShareOrder(share, orderIds, amount, price);\\n  }\\n\\n  function cancelShareOrder(uint256 orderId) external nonReentrant {\\n    Share.cancelShareOrder(share, orderIds, orderId);\\n  }\\n\\n  function executeShareOrder(uint256 orderId, uint256 amount) external payable nonReentrant {\\n    (address seller, uint256 price) = Share.executeShareOrder(share, orderIds, orderId, amount);\\n    emit Events.ShareOrderExecuted(orderId, seller, msg.sender, amount, price);\\n  }\\n\\n  function getShareOrders() external view returns (Share.Order[] memory) {\\n    return Share.getShareOrders(share, orderIds);\\n  }\\n\\n  function getContributors() external view returns (Share.ContributorInfo[] memory) {\\n    return Share.getContributors(share);\\n  }\\n\\n  function currentContributorRewards(address account) external view returns (uint256) {\\n    return Share.currentContributorRewards(share, account);\\n  }\\n\\n  function addVesting(\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external nonReentrant {\\n    Share.addVesting(share, vestingAddresses, beneficiary, startTime, duration, allocation);\\n    emit Events.VestingAdded(msg.sender, beneficiary, startTime, duration, allocation);\\n  }\\n\\n  function claimVesting() external nonReentrant {\\n    Share.claimVesting(share);\\n  }\\n\\n  function removeVesting(address beneficiary) external nonReentrant {\\n    Share.removeVesting(share, vestingAddresses, beneficiary);\\n  }\\n\\n  function getVestings() external view returns (Share.VestingInfo[] memory) {\\n    return Share.getVestings(share, vestingAddresses);\\n  }\\n\\n  //================staking=======================\\n\\n  function currentUserRewards(address account) external view returns (uint256) {\\n    return Staking.currentUserRewards(staking, account);\\n  }\\n\\n  function currentRewardsPerToken() external view returns (uint256) {\\n    return Staking.currentRewardsPerToken(staking);\\n  }\\n\\n  function getStakers() external view returns (Staking.Staker[] memory) {\\n    return Staking.getStakers(staking, stakers);\\n  }\\n\\n  function stake(uint256 amount) external nonReentrant {\\n    Staking.stake(staking, stakers, amount);\\n    emit Events.StakingEvent(Events.StakingType.Stake, msg.sender, amount);\\n  }\\n\\n  function unstake(uint256 amount) external nonReentrant {\\n    Staking.unstake(staking, stakers, amount);\\n    emit Events.StakingEvent(Events.StakingType.Unstake, msg.sender, amount);\\n  }\\n\\n  function claimStakingRewards() external nonReentrant returns (uint256 amount) {\\n    amount = Staking.claim(staking);\\n    emit Events.StakingClaimed(msg.sender, amount);\\n  }\\n\\n  //============others===================\\n\\n  function setStakingFeePercent(uint256 percent) external onlyFounder {\\n    require(percent >= 0.01 ether, \\\"Staking fee percent must be >= 10%\\\");\\n    stakingFeePercent = percent;\\n    emit Events.StakingFeePercentUpdated(percent);\\n  }\\n\\n  function depositToken(uint256 amount) external nonReentrant {\\n    share.daoFee += amount;\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Events.TokenDeposited(amount);\\n  }\\n\\n  function _splitFee(uint256 fee) internal {\\n    if (staking.totalStaked > 0) {\\n      uint256 feeToStaking = (fee * stakingFeePercent) / 1 ether;\\n      staking.stakingFee += feeToStaking;\\n      share.daoFee += (fee - feeToStaking);\\n      totalFee += fee;\\n    } else {\\n      share.daoFee += fee;\\n      totalFee += fee;\\n    }\\n  }\\n\\n  // charge protocolFee and appFee\\n  function _chargeSubscriptionFee(uint256 income) internal returns (uint256 creatorFee) {\\n    uint256 appFee = 0;\\n    App memory app = ISpaceFactory(factory).getApp(appId);\\n    if (app.creator != address(0) && app.feeReceiver != address(0)) {\\n      app = ISpaceFactory(factory).getApp(0); // use default app\\n    }\\n\\n    appFee = (income * app.feePercent) / 1 ether;\\n    uint256 protocolFee = (income * subscriptionFeePercent) / 1 ether;\\n    creatorFee = income - protocolFee - appFee;\\n    member.subscriptionIncome += creatorFee;\\n    IERC20(address(this)).transfer(factory, protocolFee);\\n    if (appFee > 0) {\\n      IERC20(address(this)).transfer(app.feeReceiver, appFee);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc656f7b5df3d2ccf2844f3555242ce2c73c9fb62785835849b3595a214c7e4f5\",\"license\":\"MIT\"},\"contracts/interfaces/ISpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct BuyInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\nstruct SellInfo {\\n  uint256 newX;\\n  uint256 newY;\\n  uint256 ethAmount;\\n  uint256 tokenAmountAfterFee;\\n  uint256 creatorFee;\\n  uint256 protocolFee;\\n}\\n\\ninterface ISpace {\\n  function buy(uint256 minTokenAmount) external payable returns (BuyInfo memory);\\n\\n  function sell(uint256 tokenAmount, uint256 minEthAmount) external payable returns (SellInfo memory SellInfo);\\n}\\n\",\"keccak256\":\"0xb53f7e187923781919a6495f2fad20b39ca76fb08bac3be5b53ea4fad877aa23\",\"license\":\"MIT\"},\"contracts/interfaces/ISpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct App {\\n  address creator;\\n  string uri;\\n  address feeReceiver;\\n  uint256 feePercent; // subscription percent\\n}\\n\\ninterface ISpaceFactory {\\n  function setPrice(uint256 _price) external;\\n\\n  function setFeeReceiver(address _receiver) external;\\n\\n  function createSpace(\\n    string calldata spaceName,\\n    string calldata symbol,\\n    uint256 preBuyEthAmount,\\n    uint256 appId\\n  ) external payable;\\n\\n  function createApp(string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function updateApp(uint256 id, string calldata _uri, address _feeReceiver, uint256 _feePercent) external;\\n\\n  function getApp(uint256 id) external view returns (App memory);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minTokenAmount\\n  ) external returns (uint256 returnAmount);\\n\\n  function getUserSpaces(address account) external view returns (address[] memory);\\n\\n  function isSpace(address spaceAddress) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdad6e3f779e478f6d0b77357800356fcad42459134ea22a098c06895bc2e78eb\",\"license\":\"MIT\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// 30 days\\nuint256 constant SECONDS_PER_MONTH = 24 * 60 * 60 * 30;\\n\\n// per month\\nuint256 constant DEFAULT_SUBSCRIPTION_PRICE = 0.002048 * 1 ether;\\n\\nuint256 constant PER_SHARE_PRECISION = 10 ** 18;\\n\\nuint256 constant SHARES_SUPPLY = 1_000_000;\\n\\nuint256 constant PER_TOKEN_PRECISION = 10 ** 26;\\n\\n// two years\\nuint256 constant YIELD_DURATION = 24 * 60 * 60 * 365 * 2;\\n\",\"keccak256\":\"0xaab6e26e4390c1c459566c1231f8ff2d18e4e5b3229b15c93753ef7c7433a5f4\",\"license\":\"MIT\"},\"contracts/lib/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Events {\\n  /** SpaceFactory events */\\n  event SpaceCreated(\\n    uint256 indexed spaceId,\\n    address spaceAddress,\\n    address founder,\\n    string spaceName,\\n    string symbol,\\n    uint256 preBuyEthAmount\\n  );\\n  event PriceUpdated(uint256 price);\\n  event FeeReceiverUpdated(address receiver);\\n  event WithdrawEther(address indexed to, uint256 amount);\\n  event WithdrawToken(address indexed to, address token, uint256 amount);\\n  event Swap(address indexed account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n  /** App events */\\n  event AppCreated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n  event AppUpdated(uint256 id, address indexed creator, string uri, address feeReceiver, uint256 feePercent);\\n\\n  /** space events */\\n  event StakingFeePercentUpdated(uint256 percent);\\n  event TokenDeposited(uint256 amount);\\n\\n  /** Token events */\\n  event Trade(\\n    TradeType indexed tradeType,\\n    address indexed account,\\n    uint256 ethAmount,\\n    uint256 tokenAmount,\\n    uint256 creatorFee,\\n    uint256 protocolFee\\n  );\\n\\n  enum TradeType {\\n    Buy,\\n    Sell\\n  }\\n\\n  /** Staking events */\\n  event StakingEvent(StakingType indexed stakingType, address indexed account, uint256 amount);\\n  event StakingClaimed(address account, uint256 amount);\\n  event RewardsPerTokenUpdated(uint256 accumulated);\\n  event UserRewardsUpdated(address account, uint256 rewards, uint256 checkpoint);\\n  event YieldReleased(uint256 amount);\\n\\n  enum StakingType {\\n    Stake,\\n    Unstake\\n  }\\n\\n  /** Member events */\\n  event Subscribed(uint8 indexed planId, address indexed account, uint256 tokenAmount, uint256 duration);\\n  event Unsubscribed(uint8 indexed planId, address indexed account, uint256 tokenAmount, uint256 duration);\\n  event PlanCreated(uint8 indexed id, string uri, uint256 price);\\n\\n  /** Share events */\\n  event RewardsPerShareUpdated(uint256 accumulated);\\n  event ShareRewardsClaimed(address account, uint256 amount);\\n  event SharesTransferred(address indexed from, address indexed to, uint256 amount);\\n  event ContributorAdded(address indexed account);\\n  event ShareOrderCreated(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderCanceled(uint256 indexed orderId, address indexed seller, uint256 amount, uint256 price);\\n  event ShareOrderExecuted(\\n    uint256 indexed orderId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 amount,\\n    uint256 price\\n  );\\n  event VestingAdded(\\n    address indexed payer,\\n    address indexed beneficiary,\\n    uint256 start,\\n    uint256 duration,\\n    uint256 allocation\\n  );\\n  event VestingReleased(address indexed payer, address indexed beneficiary, uint256 amount);\\n}\\n\",\"keccak256\":\"0x719d274a2e2c6cd90fbda73c13afd454deb15675a1be69261ca36f034311c6a5\",\"license\":\"MIT\"},\"contracts/lib/Member.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Member {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  struct State {\\n    uint8 planIndex;\\n    uint256 subscriptionIndex;\\n    uint256 subscriptionIncome;\\n    mapping(uint8 => Plan) plans;\\n    mapping(bytes32 => Subscription) subscriptions;\\n  }\\n\\n  struct Plan {\\n    string uri;\\n    uint256 price; // monthly\\n    bool isActive;\\n  }\\n\\n  struct Subscription {\\n    uint8 planId;\\n    address account;\\n    uint256 startTime;\\n    uint256 duration;\\n    uint256 amount; // total amount\\n  }\\n\\n  /* Plan */\\n  function createPlan(State storage self, string memory uri, uint256 price) external returns (uint8) {\\n    self.plans[self.planIndex] = Plan(uri, price, true);\\n    self.planIndex++;\\n    return self.planIndex - 1;\\n  }\\n\\n  function updatePlan(State storage self, uint8 id, string memory uri, uint256 price, bool isActive) external {\\n    require(id < self.planIndex, \\\"Plan is not existed\\\");\\n    self.plans[id].uri = uri;\\n    self.plans[id].price = price;\\n    self.plans[id].isActive = isActive;\\n  }\\n\\n  function getPlans(State storage self) external view returns (Plan[] memory plans) {\\n    uint256 len = self.planIndex;\\n    plans = new Plan[](len);\\n    for (uint8 i = 0; i < len; i++) {\\n      plans[i] = self.plans[i];\\n    }\\n  }\\n\\n  /* ====== Subscription ======= */\\n\\n  function subscribe(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount,\\n    uint256 durationFromAmount,\\n    bool needTransfer\\n  ) external returns (uint256 consumedAmount, uint256 remainDuration) {\\n    bytes32 id = keccak256(abi.encode(planId, msg.sender));\\n    Subscription storage subscription = self.subscriptions[id];\\n\\n    if (needTransfer) {\\n      IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    // new subscription\\n    if (subscription.startTime == 0) {\\n      subscription.planId = planId;\\n      subscription.account = msg.sender;\\n      subscriptionIds.add(id);\\n    }\\n\\n    (consumedAmount, remainDuration) = distributeSingleSubscription(self, id);\\n\\n    subscription.startTime = block.timestamp;\\n    subscription.amount += amount;\\n    subscription.duration += durationFromAmount;\\n  }\\n\\n  function unsubscribe(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds,\\n    uint8 planId,\\n    uint256 amount\\n  ) external returns (uint256 subscriptionFee, uint256 unsubscribeAmount, uint256 unsubscribedDuration) {\\n    bytes32 id = keccak256(abi.encode(planId, msg.sender));\\n    Subscription storage subscription = self.subscriptions[id];\\n    require(subscription.startTime > 0, \\\"Subscription not found\\\");\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n    (subscriptionFee, ) = distributeSingleSubscription(self, id);\\n\\n    // Unsubscribe all;\\n    if (amount >= subscription.amount) {\\n      IERC20(address(this)).transfer(msg.sender, subscription.amount);\\n      delete self.subscriptions[id];\\n      subscriptionIds.remove(id);\\n\\n      unsubscribeAmount = subscription.amount;\\n      unsubscribedDuration = subscription.duration;\\n    } else {\\n      unsubscribedDuration = (subscription.duration * amount) / subscription.amount;\\n      subscription.amount -= amount;\\n      subscription.duration -= unsubscribedDuration;\\n\\n      IERC20(address(this)).transfer(msg.sender, amount);\\n      unsubscribeAmount = amount;\\n    }\\n  }\\n\\n  function distributeSingleSubscription(State storage self, bytes32 id) public returns (uint256, uint256) {\\n    Subscription storage subscription = self.subscriptions[id];\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    (uint256 consumedAmount, uint256 remainDuration) = calculateConsumedAmount(self, id, block.timestamp);\\n\\n    if (consumedAmount == 0) return (0, 0);\\n\\n    subscription.startTime = block.timestamp;\\n    subscription.amount -= consumedAmount;\\n    subscription.duration = remainDuration;\\n    // self.subscriptionIncome += consumedAmount;\\n    return (consumedAmount, remainDuration);\\n  }\\n\\n  function getSubscriptions(\\n    State storage self,\\n    EnumerableSet.Bytes32Set storage subscriptionIds\\n  ) external view returns (Subscription[] memory) {\\n    bytes32[] memory ids = subscriptionIds.values();\\n    uint256 len = ids.length;\\n    Subscription[] memory subscriptions = new Subscription[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      subscriptions[i] = self.subscriptions[ids[i]];\\n    }\\n    return subscriptions;\\n  }\\n\\n  function calculateConsumedAmount(\\n    State storage self,\\n    bytes32 id,\\n    uint256 timestamp\\n  ) public view returns (uint256, uint256) {\\n    Subscription memory subscription = self.subscriptions[id];\\n\\n    /// Subscription not found\\n    if (subscription.startTime == 0) return (0, 0);\\n\\n    /** Invalid timestamp */\\n    if (timestamp < subscription.startTime) return (0, 0);\\n\\n    uint256 pastDuration = timestamp - subscription.startTime;\\n\\n    /** Expired, all should be consumed */\\n    if (pastDuration >= subscription.duration) {\\n      return (subscription.amount, 0);\\n    }\\n\\n    uint256 remainDuration = subscription.duration - pastDuration;\\n\\n    // calculate consumedAmount by ratio of (pastDuration/duration)\\n    uint256 consumedAmount = (subscription.amount * pastDuration) / subscription.duration;\\n    return (consumedAmount, remainDuration);\\n  }\\n\\n  function getTokenPricePerSecond(\\n    State storage self,\\n    Token.State memory token,\\n    uint8 planId\\n  ) internal view returns (uint256) {\\n    Member.Plan memory plan = self.plans[planId];\\n    uint256 ethPricePerSecond = plan.price / SECONDS_PER_MONTH;\\n    BuyInfo memory info = Token.getTokenAmount(token, ethPricePerSecond);\\n    return info.tokenAmountAfterFee;\\n  }\\n}\\n\",\"keccak256\":\"0xb2f54cecb3e7e806f7425e4fc3b0ebd829acad28fb48e10e10cd1b7c5e7a4021\",\"license\":\"MIT\"},\"contracts/lib/Share.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Share {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Contributor {\\n    uint256 shares;\\n    uint256 rewards; // realized rewards (unclaimed)\\n    uint256 checkpoint;\\n    bool exists;\\n  }\\n\\n  struct ContributorInfo {\\n    address account;\\n    uint256 shares;\\n    uint256 rewards; // realized rewards (unclaimed)\\n    uint256 checkpoint;\\n    bool exists;\\n  }\\n\\n  struct Order {\\n    address seller;\\n    uint256 amount;\\n    uint256 price;\\n  }\\n\\n  struct Vesting {\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation; // allocation share amount\\n    uint256 released; // released share amount\\n  }\\n\\n  struct VestingInfo {\\n    address beneficiary;\\n    address payer;\\n    uint256 start;\\n    uint256 duration;\\n    uint256 allocation;\\n    uint256 released;\\n  }\\n\\n  struct State {\\n    uint256 daoFee;\\n    uint256 accumulatedRewardsPerShare;\\n    uint256 orderIndex;\\n    mapping(address => Contributor) contributors;\\n    mapping(uint256 => Order) orders;\\n    address[] contributorAddresses;\\n    mapping(address => Vesting) vestings;\\n  }\\n\\n  /** --- share --- */\\n\\n  function transferShares(State storage self, address to, uint256 amount) external {\\n    require(self.contributors[msg.sender].exists, \\\"Sender is not a contributor\\\");\\n    require(self.contributors[msg.sender].shares >= amount, \\\"Insufficient shares\\\");\\n    require(to != address(0) && msg.sender != to, \\\"Invalid recipient address\\\");\\n\\n    if (!self.contributors[to].exists) {\\n      addContributor(self, to);\\n    } else {\\n      _updateRewardsPerShare(self);\\n    }\\n\\n    self.contributors[msg.sender].shares -= amount;\\n    self.contributors[to].shares += amount;\\n  }\\n\\n  function createShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 amount,\\n    uint256 price\\n  ) external returns (uint256) {\\n    Contributor storage contributor = self.contributors[msg.sender];\\n    require(contributor.shares >= amount, \\\"Insufficient share balance\\\");\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n    self.orders[self.orderIndex] = Order(msg.sender, amount, price);\\n    orderIds.add(self.orderIndex);\\n    self.orderIndex++;\\n    return self.orderIndex - 1;\\n  }\\n\\n  function cancelShareOrder(State storage self, EnumerableSet.UintSet storage orderIds, uint256 orderId) external {\\n    Order storage order = self.orders[orderId];\\n    require(order.seller != address(0), \\\"Order not found\\\");\\n    require(order.seller == msg.sender, \\\"Only seller can cancel order\\\");\\n    orderIds.remove(orderId);\\n    delete self.orders[orderId];\\n  }\\n\\n  function executeShareOrder(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds,\\n    uint256 orderId,\\n    uint256 amount\\n  ) external returns (address seller, uint256 price) {\\n    Order storage order = self.orders[orderId];\\n    require(order.seller != address(0), \\\"Order not found\\\");\\n    require(amount <= order.amount, \\\"Amount too large\\\");\\n    uint256 ethAmount = order.price * amount;\\n    require(msg.value >= ethAmount, \\\"Insufficient payment\\\");\\n    require(self.contributors[order.seller].shares >= amount, \\\"Insufficient share of seller\\\");\\n\\n    TransferUtil.safeTransferETH(order.seller, ethAmount);\\n\\n    if (!self.contributors[msg.sender].exists) {\\n      addContributor(self, msg.sender);\\n    }\\n\\n    self.contributors[order.seller].shares -= amount;\\n    self.contributors[msg.sender].shares += amount;\\n\\n    seller = order.seller;\\n    price = order.price;\\n\\n    if (amount == order.amount) {\\n      orderIds.remove(orderId);\\n      delete self.orders[orderId];\\n    } else {\\n      order.amount -= amount;\\n    }\\n  }\\n\\n  function getShareOrders(\\n    State storage self,\\n    EnumerableSet.UintSet storage orderIds\\n  ) external view returns (Order[] memory) {\\n    uint256[] memory ids = orderIds.values();\\n    uint256 len = ids.length;\\n    Order[] memory orders = new Order[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      orders[i] = self.orders[ids[i]];\\n    }\\n    return orders;\\n  }\\n\\n  /** --- contributor --- */\\n\\n  function addContributor(State storage self, address account) public {\\n    require(!self.contributors[account].exists, \\\"Contributor is existed\\\");\\n    _updateRewardsPerShare(self);\\n    self.contributors[account] = Contributor(0, 0, 0, true);\\n    self.contributorAddresses.push(account);\\n  }\\n\\n  function getContributors(State storage self) external view returns (ContributorInfo[] memory) {\\n    ContributorInfo[] memory info = new ContributorInfo[](self.contributorAddresses.length);\\n    for (uint256 i = 0; i < self.contributorAddresses.length; i++) {\\n      Contributor memory contributor = self.contributors[self.contributorAddresses[i]];\\n      info[i] = ContributorInfo(\\n        self.contributorAddresses[i],\\n        contributor.shares,\\n        contributor.rewards,\\n        contributor.checkpoint,\\n        contributor.exists\\n      );\\n    }\\n    return info;\\n  }\\n\\n  function claimRewards(State storage self) external returns (uint256 amount) {\\n    address account = msg.sender;\\n    _updateRewardsPerShare(self);\\n    _updateContributorRewards(self, account);\\n\\n    amount = self.contributors[account].rewards;\\n    self.contributors[account].rewards = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n  }\\n\\n  function distribute(State storage self) external {\\n    _updateRewardsPerShare(self);\\n  }\\n\\n  function currentContributorRewards(State storage self, address account) external view returns (uint256) {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    uint256 currentAccumulatedRewardsPerShare = _calculateRewardsPerShare(self);\\n\\n    uint256 rewards = contributor.rewards +\\n      _calculateContributorRewards(contributor.shares, contributor.checkpoint, currentAccumulatedRewardsPerShare);\\n\\n    return rewards;\\n  }\\n\\n  /** ----- Vesting ------ */\\n\\n  function addVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary,\\n    uint256 startTime,\\n    uint256 duration,\\n    uint256 allocation\\n  ) external {\\n    require(beneficiary != address(0), \\\"Beneficiary is zero address\\\");\\n    require(!vestingAddresses.contains(beneficiary), \\\"Beneficiary already exists\\\");\\n    Contributor memory payer = self.contributors[msg.sender];\\n    require(payer.shares >= allocation, \\\"Allocation too large\\\");\\n\\n    if (!self.contributors[beneficiary].exists) {\\n      addContributor(self, beneficiary);\\n    }\\n\\n    self.vestings[beneficiary] = Vesting(msg.sender, startTime, duration, allocation, 0);\\n    vestingAddresses.add(beneficiary);\\n  }\\n\\n  function claimVesting(State storage self) external {\\n    address beneficiary = msg.sender;\\n    _claimVesting(self, beneficiary);\\n  }\\n\\n  function _claimVesting(State storage self, address beneficiary) internal {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n    require(vesting.start != 0, \\\"Beneficiary does not exist\\\");\\n\\n    uint256 releasable = vestedAmount(self, beneficiary, block.timestamp) - vesting.released;\\n\\n    if (releasable > 0) {\\n      vesting.released += releasable;\\n      emit Events.VestingReleased(vesting.payer, beneficiary, releasable);\\n\\n      require(self.contributors[vesting.payer].shares > releasable, \\\"Insufficient shares\\\");\\n      self.contributors[vesting.payer].shares -= releasable;\\n      self.contributors[beneficiary].shares += releasable;\\n    }\\n  }\\n\\n  function vestedAmount(State storage self, address beneficiary, uint256 timestamp) public view returns (uint256) {\\n    Vesting storage vesting = self.vestings[beneficiary];\\n\\n    if (timestamp < vesting.start) {\\n      return 0;\\n    } else if (timestamp > vesting.start + vesting.duration) {\\n      return vesting.allocation;\\n    } else {\\n      return (vesting.allocation * (timestamp - vesting.start)) / vesting.duration;\\n    }\\n  }\\n\\n  function removeVesting(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses,\\n    address beneficiary\\n  ) external {\\n    Vesting memory vesting = self.vestings[beneficiary];\\n    require(vesting.start != 0, \\\"Beneficiary does not exist\\\");\\n    require(vesting.payer == msg.sender, \\\"Only payer can remove vesting\\\");\\n    _claimVesting(self, beneficiary);\\n    vestingAddresses.remove(beneficiary);\\n    delete self.vestings[beneficiary];\\n  }\\n\\n  function getVestings(\\n    State storage self,\\n    EnumerableSet.AddressSet storage vestingAddresses\\n  ) external view returns (VestingInfo[] memory) {\\n    address[] memory accounts = vestingAddresses.values();\\n    uint256 len = accounts.length;\\n    VestingInfo[] memory vestings = new VestingInfo[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      Vesting memory vesting = self.vestings[accounts[i]];\\n      vestings[i] = VestingInfo(\\n        accounts[i],\\n        vesting.payer,\\n        vesting.start,\\n        vesting.duration,\\n        vesting.allocation,\\n        vesting.released\\n      );\\n    }\\n    return vestings;\\n  }\\n\\n  function _updateContributorRewards(State storage self, address account) internal {\\n    Contributor memory contributor = self.contributors[account];\\n\\n    // We skip the storage changes if already updated in the same block\\n    if (contributor.checkpoint == self.accumulatedRewardsPerShare) {\\n      return;\\n    }\\n\\n    // Calculate and update the new value user reserves.\\n    contributor.rewards += _calculateContributorRewards(\\n      contributor.shares,\\n      contributor.checkpoint,\\n      self.accumulatedRewardsPerShare\\n    );\\n\\n    contributor.checkpoint = self.accumulatedRewardsPerShare;\\n    self.contributors[account] = contributor;\\n  }\\n\\n  function _updateRewardsPerShare(State storage self) internal returns (uint256 rewardsPerShare) {\\n    rewardsPerShare = _calculateRewardsPerShare(self);\\n    bool isChanged = self.accumulatedRewardsPerShare != rewardsPerShare;\\n    // console.log('=====isChanged:', isChanged);\\n\\n    if (isChanged) {\\n      self.daoFee = 0;\\n      self.accumulatedRewardsPerShare = rewardsPerShare;\\n      emit Events.RewardsPerShareUpdated(rewardsPerShare);\\n    }\\n  }\\n\\n  function _calculateContributorRewards(\\n    uint256 shares,\\n    uint256 earlierCheckpoint,\\n    uint256 latterCheckpoint\\n  ) internal pure returns (uint256) {\\n    return (shares * (latterCheckpoint - earlierCheckpoint)) / PER_SHARE_PRECISION;\\n  }\\n\\n  function _calculateRewardsPerShare(State storage self) internal view returns (uint256) {\\n    return self.accumulatedRewardsPerShare + (PER_SHARE_PRECISION * self.daoFee) / SHARES_SUPPLY;\\n  }\\n}\\n\",\"keccak256\":\"0x6207a79dbbd4f1bee201efeab58fafedfc5a6e1133dfac612fe4f2be8af484a4\",\"license\":\"MIT\"},\"contracts/lib/SpaceCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISpaceFactory.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"../Space.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary SpaceCreator {\\n  using SafeERC20 for IERC20;\\n\\n  function createSpace(\\n    uint256 price,\\n    uint256 spaceIndex,\\n    mapping(address => address[]) storage userSpaces,\\n    mapping(uint256 spaceId => address) storage spaces,\\n    mapping(address => address) storage spaceToFounder,\\n    uint256 appId,\\n    string calldata spaceName,\\n    string calldata symbol,\\n    uint256 preBuyEthAmount\\n  ) external returns (address) {\\n    require(msg.value >= price + preBuyEthAmount, \\\"Insufficient payment\\\");\\n\\n    address founder = msg.sender;\\n    Space space = new Space(appId, address(this), founder, spaceName, symbol);\\n\\n    space.initialize();\\n\\n    uint256 currentSpaceIndex = spaceIndex;\\n    spaces[currentSpaceIndex] = address(space);\\n    userSpaces[msg.sender].push(address(space));\\n    spaceToFounder[address(space)] = founder;\\n\\n    if (preBuyEthAmount > 0) {\\n      BuyInfo memory info = space.buy{ value: preBuyEthAmount }(0);\\n      IERC20(space).transfer(msg.sender, info.tokenAmountAfterFee);\\n    }\\n    return address(space);\\n  }\\n}\\n\",\"keccak256\":\"0x18a18341df7288ed63ae2530d5e71ff126307c10431375023b193d7f8f13f007\",\"license\":\"MIT\"},\"contracts/lib/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n// creator rewards\\n\\nlibrary Staking {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct State {\\n    uint256 yieldStartTime;\\n    uint256 yieldAmount; // yield from space\\n    uint256 yieldReleased;\\n    uint256 stakingFee; // fee for rewards\\n    uint256 totalStaked; // Total amount staked\\n    uint256 accumulatedRewardsPerToken;\\n    mapping(address => uint256) userStaked;\\n    mapping(address => UserRewards) userRewards; // Rewards accumulated per user\\n  }\\n\\n  struct UserRewards {\\n    uint256 realized; // realized reward token amount\\n    // checkpoint to compare with RewardsPerToken.accumulated\\n    uint256 checkpoint;\\n  }\\n\\n  struct Staker {\\n    address account;\\n    uint256 staked;\\n    uint256 realized;\\n    uint256 checkpoint;\\n  }\\n\\n  function stake(State storage self, EnumerableSet.AddressSet storage stakers, uint256 amount) external {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n    IERC20(address(this)).safeTransferFrom(account, address(this), amount);\\n    self.totalStaked += amount;\\n    self.userStaked[account] += amount;\\n    if (!stakers.contains(account)) stakers.add(account);\\n  }\\n\\n  function unstake(State storage self, EnumerableSet.AddressSet storage stakers, uint256 amount) external {\\n    address account = msg.sender;\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n    require(amount <= self.userStaked[account], \\\"Amount too large\\\");\\n\\n    _updateUserRewards(self, account);\\n    self.totalStaked -= amount;\\n    self.userStaked[account] -= amount;\\n    if (self.userStaked[account] == 0) stakers.remove(account);\\n    IERC20(address(this)).safeTransfer(account, amount);\\n  }\\n\\n  function claim(State storage self) external returns (uint256) {\\n    address account = msg.sender;\\n    _updateUserRewards(self, account);\\n\\n    uint256 amount = self.userRewards[account].realized;\\n    self.userRewards[account].realized = 0;\\n\\n    IERC20(address(this)).transfer(msg.sender, amount);\\n    return amount;\\n  }\\n\\n  function getStakers(\\n    State storage self,\\n    EnumerableSet.AddressSet storage _stakers\\n  ) external view returns (Staker[] memory) {\\n    address[] memory accounts = _stakers.values();\\n    uint256 len = accounts.length;\\n    Staker[] memory stakers = new Staker[](len);\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      address account = accounts[i];\\n      stakers[i] = Staker(\\n        account,\\n        self.userStaked[account],\\n        self.userRewards[account].realized,\\n        self.userRewards[account].checkpoint\\n      );\\n    }\\n    return stakers;\\n  }\\n\\n  function currentRewardsPerToken(State storage self) external view returns (uint256) {\\n    return _calculateRewardsPerToken(self);\\n  }\\n\\n  function currentUserRewards(State storage self, address account) external view returns (uint256) {\\n    UserRewards memory accumulatedRewards = self.userRewards[account];\\n\\n    uint256 currentAccumulatedRewardsPerToken = _calculateRewardsPerToken(self);\\n\\n    uint256 rewards = accumulatedRewards.realized +\\n      _calculateRealizedRewards(\\n        self.userStaked[account],\\n        accumulatedRewards.checkpoint,\\n        currentAccumulatedRewardsPerToken\\n      );\\n\\n    return rewards;\\n  }\\n\\n  function releasedYieldAmount(State storage self, uint256 timestamp) public view returns (uint256) {\\n    if (timestamp < self.yieldStartTime) {\\n      return 0;\\n    } else if (timestamp > self.yieldStartTime + YIELD_DURATION) {\\n      return self.yieldAmount;\\n    } else {\\n      return (self.yieldAmount * (timestamp - self.yieldStartTime)) / YIELD_DURATION;\\n    }\\n  }\\n\\n  function _releaseYield(State storage self) internal {\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n\\n    if (releasable > 0 && IERC20(address(this)).balanceOf(address(this)) >= releasable) {\\n      self.stakingFee += releasable;\\n      self.yieldReleased += releasable;\\n      emit Events.YieldReleased(releasable);\\n    }\\n  }\\n\\n  function _calculateRewardsPerToken(State storage self) internal view returns (uint256 rewardsPerToken) {\\n    if (self.totalStaked == 0) return self.accumulatedRewardsPerToken;\\n    uint256 releasable = releasedYieldAmount(self, block.timestamp) - self.yieldReleased;\\n    uint256 stakingFee = self.stakingFee + releasable;\\n    rewardsPerToken = self.accumulatedRewardsPerToken + (PER_TOKEN_PRECISION * stakingFee) / self.totalStaked;\\n  }\\n\\n  function _calculateRealizedRewards(\\n    uint256 staked,\\n    uint256 checkpoint,\\n    uint256 accumulatedRewardsPerToken\\n  ) internal pure returns (uint256) {\\n    return (staked * (accumulatedRewardsPerToken - checkpoint)) / PER_TOKEN_PRECISION;\\n  }\\n\\n  function _updateRewardsPerToken(State storage self) internal returns (uint256) {\\n    uint256 rewardsPerToken = _calculateRewardsPerToken(self);\\n\\n    bool isChanged = self.accumulatedRewardsPerToken != rewardsPerToken;\\n\\n    // console.log(\\\"=========isChanged:\\\", isChanged);\\n    if (isChanged) {\\n      self.stakingFee = 0;\\n      self.accumulatedRewardsPerToken = rewardsPerToken;\\n      emit Events.RewardsPerTokenUpdated(rewardsPerToken);\\n    }\\n\\n    return rewardsPerToken;\\n  }\\n\\n  function _updateUserRewards(State storage self, address account) internal returns (UserRewards memory) {\\n    _releaseYield(self);\\n    _updateRewardsPerToken(self);\\n    UserRewards memory userRewards = self.userRewards[account];\\n\\n    // We skip the storage changes if already updated in the same block\\n    if (userRewards.checkpoint == self.accumulatedRewardsPerToken) {\\n      return userRewards;\\n    }\\n\\n    // Calculate and update the new value user reserves.\\n    userRewards.realized += _calculateRealizedRewards(\\n      self.userStaked[account],\\n      userRewards.checkpoint,\\n      self.accumulatedRewardsPerToken\\n    );\\n\\n    userRewards.checkpoint = self.accumulatedRewardsPerToken;\\n\\n    self.userRewards[account] = userRewards;\\n    emit Events.UserRewardsUpdated(account, userRewards.realized, userRewards.checkpoint);\\n\\n    return userRewards;\\n  }\\n}\\n\",\"keccak256\":\"0x3e32aee14c87795ceb9a395de9c083f468ec19c8ac8aea98009898cb964f1cc6\",\"license\":\"MIT\"},\"contracts/lib/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./TransferUtil.sol\\\";\\n\\nlibrary Token {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant CREATOR_FEE_RATE = 0.006 * 1 ether; // 0.6%\\n  uint256 public constant PROTOCOL_FEE_RATE = 0.004 * 1 ether; // 0.4%\\n\\n  // initial virtual eth amount\\n  uint256 public constant initialX = 30 * 1 ether;\\n\\n  // initial virtual token amount\\n  uint256 public constant initialY = 1073000191 * 1 ether;\\n\\n  uint256 public constant initialK = initialX * initialY;\\n\\n  struct State {\\n    uint256 x;\\n    uint256 y;\\n    uint256 k;\\n  }\\n\\n  function getTokenAmount(State memory self, uint256 ethAmount) public pure returns (BuyInfo memory info) {\\n    info.ethAmount = ethAmount;\\n    info.newX = self.x + ethAmount;\\n    info.newY = (self.k + info.newX - 1) / info.newX; // div up\\n    uint256 tokenAmount = self.y - info.newY;\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_RATE) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_RATE) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n  }\\n\\n  function getEthAmount(State storage self, uint256 tokenAmount) public view returns (SellInfo memory info) {\\n    info.creatorFee = (tokenAmount * CREATOR_FEE_RATE) / 1 ether;\\n    info.protocolFee = (tokenAmount * PROTOCOL_FEE_RATE) / 1 ether;\\n    info.tokenAmountAfterFee = tokenAmount - info.creatorFee - info.protocolFee;\\n    info.newY = self.y + info.tokenAmountAfterFee;\\n    info.newX = (self.k + info.newY - 1) / info.newY; // div up\\n    info.ethAmount = self.x - info.newX;\\n  }\\n\\n  function buy(State storage self, uint256 ethAmount, uint256 minTokenAmount) external returns (BuyInfo memory info) {\\n    require(ethAmount > 0, \\\"ETH amount must be greater than zero\\\");\\n    info = getTokenAmount(self, ethAmount);\\n\\n    require(info.tokenAmountAfterFee >= minTokenAmount, \\\"Slippage too high\\\");\\n\\n    self.x = info.newX;\\n    self.y = info.newY;\\n    self.k = info.newX * info.newY;\\n  }\\n\\n  function sell(State storage self, uint256 tokenAmount, uint256 minEthAmount) external returns (SellInfo memory info) {\\n    require(tokenAmount > 0, \\\"Token amount must be greater than zero\\\");\\n    info = getEthAmount(self, tokenAmount);\\n\\n    require(info.ethAmount >= minEthAmount, \\\"Slippage too high\\\");\\n\\n    IERC20(address(this)).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n    self.y = info.newY;\\n    self.x = info.newX;\\n    self.k = info.newX * info.newY;\\n  }\\n}\\n\",\"keccak256\":\"0x74b161f9923a32f6c56c7f384b0543f03275486f880aeeab7e1aff6ca0a3a160\",\"license\":\"MIT\"},\"contracts/lib/TransferUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary TransferUtil {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    require(to != address(0), \\\"Invalid address\\\");\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"ETH transfer failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8f5406c61b2aaf9054dc9fc0239aaed7092baed65d1b7e366db501d0ffaf0f19\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761593790816100228239308160310152f35b600080fdfe60806040818152600490813610156200001757600080fd5b6000803560e01c63cb242870146200002e57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146200030c576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200030c5767ffffffffffffffff92803560c4358581116200041257620000a89036908401620004a5565b969060e435878111620004a157620000c49036908601620004a5565b909261010435948581018091116200048e57341062000433575086519261538f92838501938585108b8611176200042057916200012e6200013d949287969462000573883960a435855260209d8e3090870152338d87015260a0606087015260a0860191620004db565b926080818503910152620004db565b039084f08015620004165773ffffffffffffffffffffffffffffffffffffffff1694853b15620004125784517f8129fc1c00000000000000000000000000000000000000000000000000000000815284818581838b5af18015620003bc57620003ea575b506024918235855260643588528585207fffffffffffffffffffffffff00000000000000000000000000000000000000009088828254161790553360005260443589528660002080549068010000000000000000821015620003d85760018201808255821015620003c6578752898720018882825416179055876000526084358952866000209033908254161790558062000240575b87878751908152f35b60c083918751928380927fd96a094a00000000000000000000000000000000000000000000000000000000825289898301528b5af1908115620003bc57859162000325575b50606091500151908451927fa9059cbb0000000000000000000000000000000000000000000000000000000084523390840152820152848160448185885af180156200031b57620002da575b80808062000237565b8481813d831162000313575b620002f281836200051a565b810103126200030f5751801515036200030c5780620002d1565b80fd5b5080fd5b503d620002e6565b83513d84823e3d90fd5b905060c0813d8211620003b3575b816200034260c093836200051a565b81010312620003af5785519160c08301908111838210176200039b576060929160a091885280518352898101518a8401528781015188840152838101518484015260808101516080840152015160a08201523862000285565b83604186634e487b7160e01b600052526000fd5b8480fd5b3d915062000333565b86513d87823e3d90fd5b8588603289634e487b7160e01b835252fd5b8588604189634e487b7160e01b835252fd5b818195929511620003ff5785529238620001a1565b602482604186634e487b7160e01b835252fd5b8380fd5b84513d85823e3d90fd5b60248960418a634e487b7160e01b835252fd5b806020877f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b602488601189634e487b7160e01b835252fd5b8580fd5b9181601f84011215620004d65782359167ffffffffffffffff8311620004d65760208381860195010111620004d657565b600080fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176200055c57604052565b634e487b7160e01b600052604160045260246000fdfe6101c0806040523462000553576200538f803803809162000021828562000558565b8339810160a0828203126200055357815162000040602084016200057c565b926200004f604082016200057c565b60608201519091906001600160401b03811162000553578462000074918301620005b6565b60808201519094906001600160401b0381116200055357620000979201620005b6565b6040805195919086016001600160401b03811187821017620003095760405260018652603160f81b602087015284516001600160401b0381116200030957600354600181811c9116801562000548575b60208210146200042857601f8111620004de575b50806020601f8211600114620004555760009162000449575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620003095760045490600182811c921680156200043e575b6020831014620004285781601f849311620003b6575b50602090601f83116001146200032b576000926200031f575b50508160011b916000199060031b1c1916176004555b6200019e8462000611565b93610120948552620001b086620007b6565b9061014091825260208151910120958660e0526020815191012094610100968688524660a0526040519660208801917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604089015260608801524660808801523060a088015260a0875260c087019680881060018060401b038911176200030957876040525190206080523060c0526001600855670429d069189e000060095566470de4df820000600a556101a0948552610160928352610180938452614a8196876200090e883960805187613f37015260a05187613ff2015260c05187613f08015260e05187613f8601525186613fac01525185611d8f01525184611db901525183818161073601528181610b53015281816111c001526146160152518281816113af01528181611ed60152818161200d01528181612ad201528181612c340152612e3d01525181818161232d015261466e0152f35b634e487b7160e01b600052604160045260246000fd5b0151905038806200017d565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106200039d575090846001959493921062000383575b505050811b0160045562000193565b015160001960f88460031b161c1916905538808062000374565b929360206001819287860151815501950193016200035c565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81016020851062000420575b90849392915b601f830160051c820181106200041057505062000164565b60008155859450600101620003f8565b5080620003f2565b634e487b7160e01b600052602260045260246000fd5b91607f16916200014e565b90508601513862000114565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b818110620004c557509083600194939210620004ab575b5050811b0160035562000129565b88015160001960f88460031b161c1916905538806200049d565b9192602060018192868d01518155019401920162000486565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200053d575b601f0160051c01905b818110620005305750620000fb565b6000815560010162000521565b909150819062000518565b90607f1690620000e7565b600080fd5b601f909101601f19168101906001600160401b038211908210176200030957604052565b51906001600160a01b03821682036200055357565b60005b838110620005a55750506000910152565b818101518382015260200162000594565b81601f82011215620005535780516001600160401b038111620003095760405192620005ed601f8301601f19166020018562000558565b8184526020828401011162000553576200060e916020808501910162000591565b90565b8051602091908281101562000691575090601f8251116200064f57808251920151908083106200064057501790565b82600019910360031b1b161790565b604490620006839260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000591565b601f01601f19168101030190fd5b6001600160401b03811162000309576005928354926001938481811c91168015620007ab575b838210146200042857601f811162000774575b5081601f84116001146200070a5750928293918392600094620006fe575b50501b916000199060031b1c191617905560ff90565b015192503880620006e8565b919083601f1981168760005284600020946000905b888383106200075957505050106200073f575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000732565b8587015188559096019594850194879350908101906200071f565b8560005284601f846000209201871c820191601f8601881c015b8281106200079e575050620006ca565b600081550185906200078e565b90607f1690620006b7565b805160209081811015620007e35750601f8251116200064f57808251920151908083106200064057501790565b906001600160401b0382116200030957600654926001938481811c9116801562000902575b838210146200042857601f8111620008c8575b5081601f84116001146200085c575092829391839260009462000850575b50501b916000199060031b1c19161760065560ff90565b01519250388062000839565b919083601f198116600660005284600020946000905b88838310620008ad575050501062000893575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000885565b85870151885590960195948501948793509081019062000872565b600660005284601f84600020920160051c820191601f860160051c015b828110620008f55750506200081b565b60008155018590620008e5565b90607f16906200080856fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816306fdde031461392257508063083966461461386f578063095ea7b31461384557806318160ddd146138265780631df4ccfc1461380757806323b872dd146136ac5780632e17de78146135d2578063313ce567146135b65780633644e51514613592578063368242d3146134575780633a04bc0c146133325780633b47a9ac146131765780633d203ce21461309457806343352d6114612ef75783816346a4dd7b14612dae575080634cf088d914612d645780634cf518a114612c585780634d853ee514612c145780634e09bf4614612a7457806352f5213c1461288b5780636215be7714612763578063626a9b261461259357806362bf342f146124a15780636b69e05b146123bd57806370a08231146123875780637ecebe001461235057806380afdea8146123155780638129fc1c14611fa557806383d593d514611eb357806384b0196e14611d78578381638681d72f14611cd65750806388d4a3e514611b4d578381638d3ed7c414611abd575080638fcb4e5b146119da57806392fd9e8b146118d257806395d89b41146117ea578063a2dc057414611764578063a694fc3a14611692578063a8d5fd651461165f578063a9059cbb1461162e578063af157c191461147a57838163b579184f1461138457508063b60e3455146111e4578063c45a0155146111a0578063cac5fe001461118157838163cd5c6426146110fd57508063d505accf14610f4a578063d79875eb14610b33578063d94a862b14610921578063d96a094a14610715578063dcb2a3f514610650578063dd62ed3e14610604578063dddccf4f146105e5578063e3f6b544146105b2578063eeb3e45614610468578063ef153e1314610391578063fc0c546a1461035a5763fedda89c03610011578291346103565782600319360112610356576102c96142ff565b734283c7b911BAd3411750964fa701587c55FD312091823b1561035157600f60248592845195869384927f70d07b820000000000000000000000000000000000000000000000000000000084528301525af49081156103485750610331575b50600160085580f35b61033a90613a4e565b610345578038610328565b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b82843461034557806003193601126103455750600c54600d54600e54925191825260208201526040810191909152606090f35b0390f35b50919034610464576103a236613b43565b906103ab6142ff565b600f8351957f1cfada880000000000000000000000000000000000000000000000000000000087528601526027602486015260448501526064840152602083608481734283c7b911BAd3411750964fa701587c55FD31205af49182156104595791610420575b60209250600160085551908152f35b90506020823d8211610451575b8161043a60209383613b04565b8101031261044c576020915190610411565b600080fd5b3d915061042d565b9051903d90823e3d90fd5b5080fd5b509061047336613b43565b92909161047e6142ff565b600f8151927ff9dc3251000000000000000000000000000000000000000000000000000000008452830152602760248301528260448301528360648301528082608481734283c7b911BAd3411750964fa701587c55FD31205af49081156105a95785928692610537575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160085580f35b809350818093503d83116105a2575b6105508183613b04565b8101031261059e578161052c6001600160a01b039260206105917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359661444f565b93015193509193506104e8565b8480fd5b503d610546565b513d86823e3d90fd5b50503461046457816003193601126104645760609060ff601e541690601f54906020549181519384526020840152820152f35b5050346104645781600319360112610464576020906009549051908152f35b505034610464578060031936011261046457602091610621613a12565b8261062a613a28565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b509190346104645760209283600319360112610711576001600160a01b03610676613a12565b600f8451937fed6de0600000000000000000000000000000000000000000000000000000000085528401521660248201528381604481734283c7b911BAd3411750964fa701587c55FD31205af492831561070657926106d7575b5051908152f35b9091508281813d83116106ff575b6106ef8183613b04565b8101031261044c575190386106d0565b503d6106e5565b8251903d90823e3d90fd5b8280fd5b509160206003193601126103455761072b6142cd565b506107346142ff565b7f0000000000000000000000000000000000000000000000000000000000000000908251937f55d2ad91000000000000000000000000000000000000000000000000000000008552600c8186015234602486015235604485015260c08460648173103a6f18584d89C8111a62e9caDD8aA54368f5335af49384156109155781946108cd575b50918160c094936001600160a01b03610841941633146000146108435750506108026107fc6107f16060860151608087015190613cba565b60a086015190613cba565b3361426f565b600160085551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b7f2f6c00068c878507782070bbec6fd22224e9de1892a9232357080aec6e697b1c60808601926108738451614533565b606087019361088385513361426f565b61088e81513061426f565b61089e60a089019283519061426f565b8588015194519051915186519586526020860191909152604085019190915260608401523392608090a3610802565b90935060c03d811161090e575b6108e48183613b04565b81019060c08183031261059e579161090360c09594926108419461421f565b9450919290926107b9565b503d6108da565b508251903d90823e3d90fd5b50829034610464578160031936011261046457601e8351917f8c48d332000000000000000000000000000000000000000000000000000000008352820152818160248173341eee63496DB870756e016a82E39e239eC851905af4908115610b29578291610a22575b50825191602080840190808552835180925285850181878460051b880101950193965b8388106109b95786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600195030186528851908580610a01845160608086528501906139ed565b938581015186850152015115159101529701930197019690939291936109ac565b90503d8083833e610a338183613b04565b8101906020908181840312610b2557805167ffffffffffffffff91828211610b2157019083601f8301121561059e57815190610a6e82614018565b94610a7b88519687613b04565b828652848087019360051b85010193818511610b1d57858101935b858510610aaa575050505050505083610989565b8451848111610b19578201606080601f198387030112610b15578b5191610ad083613acc565b89810151878111610b11578a9492828f610af38a89610b0296819a9801016143b3565b8552810151868501520161433a565b8d820152815201940193610a96565b8c80fd5b8a80fd5b8980fd5b8780fd5b8580fd5b8380fd5b83513d84823e3d90fd5b508290610b3f36613b43565b92610b486142cd565b50610b516142ff565b7f0000000000000000000000000000000000000000000000000000000000000000908551947f04cac304000000000000000000000000000000000000000000000000000000008652600c85870152836024870152604486015260c08560648173103a6f18584d89C8111a62e9caDD8aA54368f5335af4948515610f3e578195610f02575b5047918686019283511015610ebf576080860194610bf38651614533565b60608701513015610e905730600052602090600082528960002054818110610e4b579080600092308452838552038b83205580600254036002558a519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef833092a360a0880193610caa8286518c51809381927fa9059cbb00000000000000000000000000000000000000000000000000000000835289898401602090939291936001600160a01b0360408201951681520152565b038185305af18015610e4157610e0d575b5085513315610dcb5781808092335af1610cd3614463565b5015610d895760c0886108418b8a8a8a8a6001600160a01b038b163303610d38575b50505050600160085551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b905192519051845193845260208401929092526040830152606082015233906001907f2f6c00068c878507782070bbec6fd22224e9de1892a9232357080aec6e697b1c90608090a384808080610cf5565b6064925088519162461bcd60e51b8352820152601360248201527f455448207472616e73666572206661696c6564000000000000000000000000006044820152fd5b606484848d519162461bcd60e51b8352820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b8281813d8311610e3a575b610e228183613b04565b8101031261046457610e339061433a565b508a610cbb565b503d610e18565b8b513d84823e3d90fd5b8a517fe450d38c000000000000000000000000000000000000000000000000000000008152308186019081526020810192909252604082018390529081906060010390fd5b602482858b51917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b606485602089519162461bcd60e51b8352820152601560248201527f546f6b656e20616d6f756e7420746f206c6172676500000000000000000000006044820152fd5b90945060c03d8111610f37575b610f198183613b04565b81019060c081830312610b215790610f309161421f565b9386610bd5565b503d610f0f565b508551903d90823e3d90fd5b508290346104645760e060031936011261046457610f66613a12565b610f6e613a28565b906044359260643560843560ff8116810361044c578142116110ce576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176110b9578b5251902061106e9161106591611024613efe565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a4359220613da0565b90929192613e30565b168181036110855786611082878787613cdd565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b92905034610356578260031936011261035657734283c7b911BAd3411750964fa701587c55FD312091823b1561035157600f60248592845195869384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af490811561034857506111715750f35b61117a90613a4e565b6103455780f35b505034610464578160031936011261046457602090600a549051908152f35b505034610464578160031936011261046457602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5082903461046457816003193601126104645782519283602354808652602080960190602386527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090865b8181106113705750505081611245910382613b04565b80519473341eee63496DB870756e016a82E39e239eC8519091855b87811061126b578680f35b815181101561135d57828160051b830101518551907f5dc38368000000000000000000000000000000000000000000000000000000008252601e8883015260248201528581604481885af4908115611353578891611325575b508061130e575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112fb57600101611260565b602487601188634e487b7160e01b835252fd5b61131a61131f91614613565b614533565b886112cb565b6113459150863d881161134c575b61133d8183613b04565b810190614439565b50896112c4565b503d611333565b86513d8a823e3d90fd5b602487603288634e487b7160e01b835252fd5b82548452928801926001928301920161122f565b82818534610464576020600319360112610464576113a0613a12565b906001600160a01b036113d6817f0000000000000000000000000000000000000000000000000000000000000000163314614347565b734283c7b911BAd3411750964fa701587c55FD312094853b1561059e576044600f918693855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156103485750611466575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b61146f90613a4e565b61046457818361143e565b50829034610464578160031936011261046457600f8351917f77e7a4e70000000000000000000000000000000000000000000000000000000083528201528181602481734283c7b911BAd3411750964fa701587c55FD31205af4908115610b29578291611550575b508251916020808401908085528351809252808686019401925b8281106115095785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060808201519087015260809081015115159086015260a090940193928101926001016114fc565b90503d8083833e6115618183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b255780519161159a83614018565b936115a787519586613b04565b838552818501908260a080960285010193818511610b1d578301915b8483106115d657505050505050836114e2565b8583830312610b1d578386918a516115ed81613a78565b6115f68661444f565b815282860151838201528b8601518c82015260608087015190820152608061161f81880161433a565b908201528152019201916115c3565b50503461046457806003193601126104645760209061165861164e613a12565b6024359033613b93565b5160018152f35b82843461034557806003193601126103455750600f54601054601154925191825260208201526040810191909152606090f35b50903461071157602060031936011261071157828235926116b16142ff565b739c41ba33300461Dcdc6D351f625D806f8df5673390813b1561071157601660648492865194859384927f94cfd9ca000000000000000000000000000000000000000000000000000000008452830152602560248301528860448301525af48015610b2957611750575b505051908152817f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160085580f35b61175990613a4e565b61071157823861171b565b509190346104645760209283600319360112610711576001600160a01b0361178a613a12565b60168451937fabe9c5800000000000000000000000000000000000000000000000000000000085528401521660248201528381604481739c41ba33300461Dcdc6D351f625D806f8df567335af492831561070657926106d7575051908152f35b50913461034557806003193601126103455750805190600092805461180e81613b59565b808552916001918083169081156118aa575060011461184c575b50505061183a8261038d940383613b04565b519182916020835260208301906139ed565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8286106118925750505061183a82602061038d9582010194611828565b80546020878701810191909152909501948101611875565b61038d97508693506020925061183a94915060ff191682840152151560051b82010194611828565b50346107115782600319360112610711576118eb6142ff565b600f8251917faf5907fa000000000000000000000000000000000000000000000000000000008352820152602081602481734283c7b911BAd3411750964fa701587c55FD31205af49081156119ce57839161197d575b50905133815260208101919091527fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b37890604090a1600160085580f35b90506020813d82116119c6575b8161199760209383613b04565b8101031261044c57517fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b378611941565b3d915061198a565b505051903d90823e3d90fd5b5090346107115780600319360112610711576119f4613a12565b908360243592611a026142ff565b734283c7b911BAd3411750964fa701587c55FD312094853b1561071157600f606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015610b2957611aa9575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160085580f35b611ab290613a4e565b610b25578338611a75565b9290503461035657602060031936011261035657611ad96142ff565b734283c7b911BAd3411750964fa701587c55FD312091823b1561035157839060648351809581937f8b26588d000000000000000000000000000000000000000000000000000000008352600f81840152602760248401523560448301525af490811561034857506103315750600160085580f35b50829034610464578160031936011261046457600f8351917fcd985a90000000000000000000000000000000000000000000000000000000008352820152602760248201528181604481734283c7b911BAd3411750964fa701587c55FD31205af4908115610b29578291611c13575b508251916020808401908085528351809252808686019401925b828110611be35785850386f35b835180516001600160a01b0316865280830151868401528701518786015260609094019392810192600101611bd6565b90503d8083833e611c248183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b2557805191611c5d83614018565b93611c6a87519586613b04565b8385528185019082606080960285010193818511610b1d578301915b848310611c995750505050505083611bbc565b8583830312610b1d578386918a51611cb081613acc565b611cb98661444f565b815282860151838201528b8601518c820152815201920191611c86565b9290503461035657602060031936011261035657611cf2613a12565b91611cfb6142ff565b734283c7b911BAd3411750964fa701587c55FD312090813b1561059e576064600f9186936001600160a01b03865197889586947f03d9eb84000000000000000000000000000000000000000000000000000000008652850152602960248501521660448301525af490811561034857506103315750600160085580f35b509034610711578260031936011261071157611db37f0000000000000000000000000000000000000000000000000000000000000000614030565b92611ddd7f0000000000000000000000000000000000000000000000000000000000000000614144565b908251926020928385019585871067ffffffffffffffff881117611e9e57509280611e54838896611e47998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b01906139ed565b91898303908a01526139ed565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110611e8757505050500390f35b835185528695509381019392810192600101611e78565b604190634e487b7160e01b6000525260246000fd5b50903461071157602060031936011261071157813591611efd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b662386f26fc100008310611f3d5750816020917fb019d30b2fca7d8ca474448afd53ea1177a76c833805dc3d78eff68e7edb5a6f9360095551908152a180f35b6020608492519162461bcd60e51b8352820152602260248201527f5374616b696e67206665652070657263656e74206d757374206265203e3d203160448201527f30250000000000000000000000000000000000000000000000000000000000006064820152fd5b5034610711578260031936011261071157734283c7b911BAd3411750964fa701587c55FD3120803b15610b25578383517fa9479ab1000000000000000000000000000000000000000000000000000000008152600f8482015281816044816001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016968760248301525af4801561230b576122f7575b505281602060128152620f42408286205581517f44a3381a000000000000000000000000000000000000000000000000000000008152601e84820152606060248201526120bc60648201604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b90828180660746a52880000094856044830152038173341eee63496DB870756e016a82E39e239eC851905af49081156122ed578791612291575b5060ff7fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227491855191829187835261215a888401604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b958784015216930390a2815161216f81613acc565b6801a055690d9db80000908181526b037790a0e8714009b49c000080938201527305a37324b8ac5eceebef390a22a97c20000000009384910152600c55600d55600e55600c8251917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015282604482015260c08160648173103a6f18584d89C8111a62e9caDD8aA54368f5335af491821561034857508291612251575b506122438160a061223a6060611082950151608084015190613cba565b91015190613cba565b80601755426016553061426f565b905060c03d811161228a575b6122678183613b04565b810160c08282031261071157612283612243916110829361421f565b915061221d565b503d61225d565b809450838092503d83116122e6575b6122aa8183613b04565b81010312610b21577fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227460ff6122df87956141fe565b91506120f6565b503d6122a0565b84513d89823e3d90fd5b61230090613a4e565b610b25578338612041565b85513d84823e3d90fd5b505034610464578160031936011261046457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461046457602060031936011261046457806020926001600160a01b03612377613a12565b1681526007845220549051908152f35b50503461046457602060031936011261046457806020926001600160a01b036123ae613a12565b16815280845220549051908152f35b509190346104645781600319360112610464576123d86142ff565b60168151937fe21c40c2000000000000000000000000000000000000000000000000000000008552840152602083602481739c41ba33300461Dcdc6D351f625D806f8df567335af4918215610459579161246d575b8051338152602080820184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e90604090a1600160085551908152f35b90506020823d8211612499575b8161248760209383613b04565b8101031261044c57602091519061242d565b3d915061247a565b50829034610464576060600319360112610464576124bd613a3e565b6124f46125026124cb613a28565b86519283916020830195869092916001600160a01b0360209160ff604085019616845216910152565b03601f198101835282613b04565b519020601e8451927f6555463a00000000000000000000000000000000000000000000000000000000845283015260248201526044356044820152828160648173341eee63496DB870756e016a82E39e239eC851905af4908115610b29578291612574575b5082519182526020820152f35b905061258d9150823d841161134c5761133d8183613b04565b83612567565b50829034610464578160031936011261046457600f8351917f3299ded1000000000000000000000000000000000000000000000000000000008352820152602960248201528181604481734283c7b911BAd3411750964fa701587c55FD31205af4908115610b2957829161267b575b508251916020808401908085528351809252808686019401925b8281106126295785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c0909401939281019260010161261c565b90503d8083833e61268c8183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b25578051916126c583614018565b936126d287519586613b04565b838552818501908260c080960285010193818511610b1d578301915b8483106127015750505050505083612602565b8583830312610b1d578386918a5161271881613ab0565b6127218661444f565b815261272e83870161444f565b838201528b8601518c820152606080870151908201526080808701519082015260a080870151908201528152019201916126ee565b509034610711576020600319360112610711578135916127816142ff565b61278d83600f54613cba565b600f556127f38480845160208101907f23b872dd000000000000000000000000000000000000000000000000000000008252336024820152306044820152876064820152606481526127de81613a78565b519082305af16127ec614463565b9030614493565b8051908115159182612868575b505061283957507f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e88589160209151908152a1600160085580f35b60249151907f5274afe70000000000000000000000000000000000000000000000000000000082523090820152fd5b819250906020918101031261059e576020612883910161433a565b153880612800565b50906020600319360112610711576128a1613a3e565b6128a96142ff565b8151917f55d2ad91000000000000000000000000000000000000000000000000000000008352600c8484015234602484015284604484015260c08360648173103a6f18584d89C8111a62e9caDD8aA54368f5335af4928315612a6a578593612a30575b5061292d60606129238461291e6143f5565b6148c2565b9401938451614419565b9260ff815193601e8451977fbb43db580000000000000000000000000000000000000000000000000000000089528801526023602488015216928360448701526064860152836084860152600060a4860152818560c48173341eee63496DB870756e016a82E39e239eC851905af48015612a26577fd3a61eeecfc1bf48d403794aa7cb568ce64d6edd2157419643e95e0b1b99a37e9394958791612a08575b506129d882513061426f565b806129f6575b505193815194855260208501523393a3600160085580f35b61131a612a0291614613565b386129de565b612a1f9150833d851161134c5761133d8183613b04565b50386129cc565b82513d88823e3d90fd5b90925060c03d8111612a63575b612a478183613b04565b810160c082820312610b2157612a5c9161421f565b913861290c565b503d612a3d565b81513d87823e3d90fd5b50903461071157806003193601126107115781359067ffffffffffffffff9081831161059e573660238401121561059e578284013591821161059e576024830192602483369201011161059e5760243593612af96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b601e8251917f44a3381a0000000000000000000000000000000000000000000000000000000083528201526060602482015260208180612b3d606482018789614392565b886044830152038173341eee63496DB870756e016a82E39e239eC851905af4908115612a26578691612bb1575b5060ff90612ba37fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae2274958451958587968752860191614392565b95602084015216930390a280f35b90506020813d8211612c0c575b81612bcb60209383613b04565b81010312610b21577fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227493612ba3612c0360ff936141fe565b92505093612b6a565b3d9150612bbe565b505034610464578160031936011261046457602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50903461071157608060031936011261071157612c73613a12565b90602435916044358560643592612c886142ff565b734283c7b911BAd3411750964fa701587c55FD312096873b1561071157600f60c484926001600160a01b03895195869485937f92bb151400000000000000000000000000000000000000000000000000000000855284015260296024840152169a8b60448301528a60648301528760848301528860a48301525af4801561230b57612d50575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190806060810161052c565b612d5990613a4e565b610b21578538612d0e565b50503461046457816003193601126104645760c090601654906017549060185460195490601a5492601b5494815196875260208701528501526060840152608083015260a0820152f35b9290503461035657608060031936011261035657612dca613a3e565b6024359067ffffffffffffffff821161059e573660238301121561059e5781840135612df581613b27565b92612e0285519485613b04565b8184523660248383010111612ef357818792602460209301838701378401015260643591821515809303610b2157612e646001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b73341eee63496DB870756e016a82E39e239eC8519090813b15612ef35760ff958794612ed2601e938851998a97889687967f8a6f1c3400000000000000000000000000000000000000000000000000000000885287015216602485015260a0604485015260a48401906139ed565b906044356064840152608483015203915af490811561034857506111715750f35b8680fd5b5082903461046457816003193601126104645760168351917f442679e5000000000000000000000000000000000000000000000000000000008352820152602560248201528181604481739c41ba33300461Dcdc6D351f625D806f8df567335af4908115610b29578291612fc8575b508251916020808401908085528351809252808686019401925b828110612f8d5785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060908101519086015260809094019392810192600101612f80565b90503d8083833e612fd98183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e57019082601f83011215610b2557815161301281614018565b9361301f87519586613b04565b818552828086019260071b85010193818511612ef3578301915b84831061304b57505050505083612f66565b608083830312612ef35783608091895161306481613a94565b61306d8661444f565b815282860151838201528a8601518b82015260608087015190820152815201920191613039565b50346107115781600319360112610711576130ad613a3e565b6124f46130e46130bb613a28565b85519283916020830195869092916001600160a01b0360209160ff604085019616845216910152565b519020601e8351927f5dc383680000000000000000000000000000000000000000000000000000000084528301526024820152818160448173341eee63496DB870756e016a82E39e239eC851905af4918215610348578392613158575b50508061314c575080f35b61131a61108291614613565b61316e9250803d1061134c5761133d8183613b04565b503880613141565b50829034610464578160031936011261046457601e8351917ffb1af52e00000000000000000000000000000000000000000000000000000000835282015260236024820152818160448173341eee63496DB870756e016a82E39e239eC851905af4908115610b29578291613254575b508251916020808401908085528351809252808686019401925b82811061320c5785850386f35b8351805160ff168652808301516001600160a01b0316868401528781015188870152606080820151908701526080908101519086015260a090940193928101926001016131ff565b90503d8083833e6132658183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b255780519161329e83614018565b936132ab87519586613b04565b838552818501908260a080960285010193818511610b1d578301915b8483106132da57505050505050836131e5565b8583830312610b1d578386918a516132f181613a78565b6132fa866141fe565b815261330783870161444f565b838201528b8601518c82015260608087015190820152608080870151908201528152019201916132c7565b50903461071157806003193601126107115761334c613a3e565b602435916133586142ff565b60ff61336f6133698461291e6143f5565b85614419565b92601e8351967fbb43db58000000000000000000000000000000000000000000000000000000008852870152602360248701521691826044860152836064860152806084860152600160a4860152818560c48173341eee63496DB870756e016a82E39e239eC851905af48015612a26577fd3a61eeecfc1bf48d403794aa7cb568ce64d6edd2157419643e95e0b1b99a37e9394958791613439575b5080613427575b50815194855260208501523393a3600160085580f35b61131a61343391614613565b38613411565b6134509150833d851161134c5761133d8183613b04565b503861340a565b50903461071157806003193601126107115760ff613473613a3e565b61347b6142ff565b601e8351947f85e03dcb000000000000000000000000000000000000000000000000000000008652850152602360248501521690816044840152602435606484015260608360848173341eee63496DB870756e016a82E39e239eC851905af4801561358857848594869261352a575b5090817f9d451943fd7f3501dbaaffd6b87934f264cd28768306dc38e6941245ec861f9793926134275750815194855260208501523393a3600160085580f35b945050506060833d8211613580575b8161354660609383613b04565b81010312610b25578251602084015193820151907f9d451943fd7f3501dbaaffd6b87934f264cd28768306dc38e6941245ec861f976134ea565b3d9150613539565b81513d86823e3d90fd5b5050346104645781600319360112610464576020906135af613efe565b9051908152f35b5050346104645781600319360112610464576020905160128152f35b509034610711576020600319360112610711578135916135f06142ff565b83739c41ba33300461Dcdc6D351f625D806f8df5673391823b15610464576064601691855194859384927ffc74ae08000000000000000000000000000000000000000000000000000000008452830152602560248301528760448301525af480156136a25761368f575b505190815260017f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160085580f35b61369b90939193613a4e565b913861365a565b82513d86823e3d90fd5b508234610345576060600319360112610345576136c7613a12565b6136cf613a28565b91604435936001600160a01b038316808352600160205286832033845260205286832054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830361372a575b602088611658898989613b93565b8683106137c2578115613793573315613764575082526001602090815286832033845281529186902090859003905582906116588761371c565b602490848951917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602490848951917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b87517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018790528291506060010390fd5b505034610464578160031936011261046457602090600b549051908152f35b5050346104645781600319360112610464576020906002549051908152f35b505034610464578060031936011261046457602090611658613865613a12565b6024359033613cdd565b50903461071157826003193601126107115760168151927f204c022a000000000000000000000000000000000000000000000000000000008452830152602082602481739c41ba33300461Dcdc6D351f625D806f8df567335af49182156139185783926138e1575b6020838351908152f35b9091506020813d8211613910575b816138fc60209383613b04565b8101031261071157602092505190386138d7565b3d91506138ef565b81513d85823e3d90fd5b849084346107115782600319360112610711578260035461394281613b59565b808552916001918083169081156118aa575060011461396d5750505061183a8261038d940383613b04565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8286106139b25750505061183a82602061038d9582010194611828565b80546020878701810191909152909501948101613995565b60005b8381106139dd5750506000910152565b81810151838201526020016139cd565b90601f19601f602093613a0b815180928187528780880191016139ca565b0116010190565b600435906001600160a01b038216820361044c57565b602435906001600160a01b038216820361044c57565b6004359060ff8216820361044c57565b67ffffffffffffffff8111613a6257604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117613a6257604052565b6080810190811067ffffffffffffffff821117613a6257604052565b60c0810190811067ffffffffffffffff821117613a6257604052565b6060810190811067ffffffffffffffff821117613a6257604052565b6040810190811067ffffffffffffffff821117613a6257604052565b90601f601f19910116810190811067ffffffffffffffff821117613a6257604052565b67ffffffffffffffff8111613a6257601f01601f191660200190565b600319604091011261044c576004359060243590565b90600182811c92168015613b89575b6020831014613b7357565b634e487b7160e01b600052602260045260246000fd5b91607f1691613b68565b916001600160a01b03808416928315613c895716928315613c585760009083825281602052604082205490838210613c0d575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b91908201809211613cc757565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03809116918215613d6f5716918215613d3e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613e2457926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613e185780516001600160a01b03811615613e0f57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b6004811015613ee85780613e42575050565b60018103613e745760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613ead57602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613eb75750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480613fef575b15613f59577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152613fe981613ab0565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614613f30565b67ffffffffffffffff8111613a625760051b60200190565b60ff81146140865760ff811690601f821161405c576040519161405283613ae8565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b5060405160055481600061409983613b59565b8083529260019081811690811561412257506001146140c3575b506140c092500382613b04565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061410757506140c09350508101602001386140b3565b819350908160209254838589010152019101909184926140ee565b602093506140c095925060ff1991501682840152151560051b820101386140b3565b60ff81146141665760ff811690601f821161405c576040519161405283613ae8565b5060405160065481600061417983613b59565b80835292600190818116908115614122575060011461419f57506140c092500382613b04565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b8483106141e357506140c09350508101602001386140b3565b819350908160209254838589010152019101909184926141ca565b519060ff8216820361044c57565b81810292918115918404141715613cc757565b91908260c091031261044c5760405161423781613ab0565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6001600160a01b0316908115613c58577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826142b1600094600254613cba565b60025584845283825260408420818154019055604051908152a3565b604051906142da82613ab0565b8160a06000918281528260208201528260408201528260608201528260808201520152565b600260085414614310576002600855565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b5190811515820361044c57565b1561434e57565b606460405162461bcd60e51b815260206004820152600c60248201527f4f6e6c7920666f756e64657200000000000000000000000000000000000000006044820152fd5b601f8260209493601f19938186528686013760008582860101520116010190565b81601f8201121561044c5780516143c981613b27565b926143d76040519485613b04565b8184526020828401011161044c576140c091602080850191016139ca565b6040519061440282613acc565b600c548252600d546020830152600e546040830152565b8115614423570490565b634e487b7160e01b600052601260045260246000fd5b919082604091031261044c576020825192015190565b51906001600160a01b038216820361044c57565b3d1561448e573d9061447482613b27565b916144826040519384613b04565b82523d6000602084013e565b606090565b906144d257508051156144a857805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b8151158061451d575b6144e3575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156144db565b91908203918211613cc757565b601a54156145885761458390614578614570670de0b6b3a764000061455a6009548561420c565b0461456781601954613cba565b60195583614526565b600f54613cba565b600f55600b54613cba565b600b55565b8061457861458392600f54613cba565b9060208282031261044c57815167ffffffffffffffff9283821161044c570160808183031261044c57604051926145ce84613a94565b6145d78261444f565b8452602082015190811161044c576060926145f39183016143b3565b60208401526146046040820161444f565b60408401520151606082015290565b907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b039182811693604080517f24f3a51b00000000000000000000000000000000000000000000000000000000938482527f0000000000000000000000000000000000000000000000000000000000000000600483015260009485836024818c5afa9283156148b857869361489c575b508251881615158885858361488d575b505050614838575b506146fe95969750614703670de0b6b3a7640000806146e660608601518861420c565b049788916146f6600a548961420c565b048097614526565b614526565b97614762602080966147168c8354613cba565b82558651809381927fa9059cbb000000000000000000000000000000000000000000000000000000009788845260048401602090939291936001600160a01b0360408201951681520152565b03818a305af1801561482e576147fa575b5086614783575b50505050505050565b9183015183519182529091166001600160a01b031660048201526024810194909452818460448186305af190811561034857506147c4575b8080808061477a565b82813d83116147f3575b6147d88183613b04565b8101031261034557506147ea9061433a565b503880806147bb565b503d6147ce565b8581813d8311614827575b61480f8183613b04565b81010312612ef3576148209061433a565b5038614773565b503d614805565b85513d89823e3d90fd5b8591925060248451809a819382528460048301525afa80156136a2576146fe959697859161486b575b50908796956146c3565b61488791503d8087833e61487f8183613b04565b810190614598565b38614861565b015116151590508885386146bb565b6148b19193503d8088833e61487f8183613b04565b91386146ab565b84513d88823e3d90fd5b60ff600092168252602060218152604091828420838051926148e384613acc565b815193878454906148f382613b59565b808852600192898482169182600014614a2d5750506001146149f0575b50600285928861492862278d009a60ff950382613b04565b855287015496878a86015201541615159101528151947f4fabfe920000000000000000000000000000000000000000000000000000000086528151600487015281015160248601520151604484015204606482015260c08160848173103a6f18584d89C8111a62e9caDD8aA54368f5335af4918215610348575082916149b3575b5060609150015190565b905060c03d81116149e9575b6149c98183613b04565b81019160c08284031261034557506060916149e39161421f565b386149a9565b503d6149bf565b969050858a5287808b20978b985b818a10614a145750919788010190506002614910565b8054848b0184015291909801978a9650899184016149fe565b60ff1916818b015291151560051b890190910191506002905061491056fea2646970667358221220ee0ad8925df2f48c0d2b16b6ba1433f76fe44c2bfe6e4481356b6b1b582981a064736f6c63430008140033a2646970667358221220aa2af672a0b3690cead00e4a36aa95d3f1c2a72c62daa5a4b9cda7ed02e771b664736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600490813610156200001757600080fd5b6000803560e01c63cb242870146200002e57600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146200030c576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200030c5767ffffffffffffffff92803560c4358581116200041257620000a89036908401620004a5565b969060e435878111620004a157620000c49036908601620004a5565b909261010435948581018091116200048e57341062000433575086519261538f92838501938585108b8611176200042057916200012e6200013d949287969462000573883960a435855260209d8e3090870152338d87015260a0606087015260a0860191620004db565b926080818503910152620004db565b039084f08015620004165773ffffffffffffffffffffffffffffffffffffffff1694853b15620004125784517f8129fc1c00000000000000000000000000000000000000000000000000000000815284818581838b5af18015620003bc57620003ea575b506024918235855260643588528585207fffffffffffffffffffffffff00000000000000000000000000000000000000009088828254161790553360005260443589528660002080549068010000000000000000821015620003d85760018201808255821015620003c6578752898720018882825416179055876000526084358952866000209033908254161790558062000240575b87878751908152f35b60c083918751928380927fd96a094a00000000000000000000000000000000000000000000000000000000825289898301528b5af1908115620003bc57859162000325575b50606091500151908451927fa9059cbb0000000000000000000000000000000000000000000000000000000084523390840152820152848160448185885af180156200031b57620002da575b80808062000237565b8481813d831162000313575b620002f281836200051a565b810103126200030f5751801515036200030c5780620002d1565b80fd5b5080fd5b503d620002e6565b83513d84823e3d90fd5b905060c0813d8211620003b3575b816200034260c093836200051a565b81010312620003af5785519160c08301908111838210176200039b576060929160a091885280518352898101518a8401528781015188840152838101518484015260808101516080840152015160a08201523862000285565b83604186634e487b7160e01b600052526000fd5b8480fd5b3d915062000333565b86513d87823e3d90fd5b8588603289634e487b7160e01b835252fd5b8588604189634e487b7160e01b835252fd5b818195929511620003ff5785529238620001a1565b602482604186634e487b7160e01b835252fd5b8380fd5b84513d85823e3d90fd5b60248960418a634e487b7160e01b835252fd5b806020877f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b602488601189634e487b7160e01b835252fd5b8580fd5b9181601f84011215620004d65782359167ffffffffffffffff8311620004d65760208381860195010111620004d657565b600080fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176200055c57604052565b634e487b7160e01b600052604160045260246000fdfe6101c0806040523462000553576200538f803803809162000021828562000558565b8339810160a0828203126200055357815162000040602084016200057c565b926200004f604082016200057c565b60608201519091906001600160401b03811162000553578462000074918301620005b6565b60808201519094906001600160401b0381116200055357620000979201620005b6565b6040805195919086016001600160401b03811187821017620003095760405260018652603160f81b602087015284516001600160401b0381116200030957600354600181811c9116801562000548575b60208210146200042857601f8111620004de575b50806020601f8211600114620004555760009162000449575b508160011b916000199060031b1c1916176003555b8051906001600160401b038211620003095760045490600182811c921680156200043e575b6020831014620004285781601f849311620003b6575b50602090601f83116001146200032b576000926200031f575b50508160011b916000199060031b1c1916176004555b6200019e8462000611565b93610120948552620001b086620007b6565b9061014091825260208151910120958660e0526020815191012094610100968688524660a0526040519660208801917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604089015260608801524660808801523060a088015260a0875260c087019680881060018060401b038911176200030957876040525190206080523060c0526001600855670429d069189e000060095566470de4df820000600a556101a0948552610160928352610180938452614a8196876200090e883960805187613f37015260a05187613ff2015260c05187613f08015260e05187613f8601525186613fac01525185611d8f01525184611db901525183818161073601528181610b53015281816111c001526146160152518281816113af01528181611ed60152818161200d01528181612ad201528181612c340152612e3d01525181818161232d015261466e0152f35b634e487b7160e01b600052604160045260246000fd5b0151905038806200017d565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106200039d575090846001959493921062000383575b505050811b0160045562000193565b015160001960f88460031b161c1916905538808062000374565b929360206001819287860151815501950193016200035c565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81016020851062000420575b90849392915b601f830160051c820181106200041057505062000164565b60008155859450600101620003f8565b5080620003f2565b634e487b7160e01b600052602260045260246000fd5b91607f16916200014e565b90508601513862000114565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9250601f198416905b818110620004c557509083600194939210620004ab575b5050811b0160035562000129565b88015160001960f88460031b161c1916905538806200049d565b9192602060018192868d01518155019401920162000486565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106200053d575b601f0160051c01905b818110620005305750620000fb565b6000815560010162000521565b909150819062000518565b90607f1690620000e7565b600080fd5b601f909101601f19168101906001600160401b038211908210176200030957604052565b51906001600160a01b03821682036200055357565b60005b838110620005a55750506000910152565b818101518382015260200162000594565b81601f82011215620005535780516001600160401b038111620003095760405192620005ed601f8301601f19166020018562000558565b8184526020828401011162000553576200060e916020808501910162000591565b90565b8051602091908281101562000691575090601f8251116200064f57808251920151908083106200064057501790565b82600019910360031b1b161790565b604490620006839260405193849263305a27a960e01b84528060048501528251928391826024870152868601910162000591565b601f01601f19168101030190fd5b6001600160401b03811162000309576005928354926001938481811c91168015620007ab575b838210146200042857601f811162000774575b5081601f84116001146200070a5750928293918392600094620006fe575b50501b916000199060031b1c191617905560ff90565b015192503880620006e8565b919083601f1981168760005284600020946000905b888383106200075957505050106200073f575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000732565b8587015188559096019594850194879350908101906200071f565b8560005284601f846000209201871c820191601f8601881c015b8281106200079e575050620006ca565b600081550185906200078e565b90607f1690620006b7565b805160209081811015620007e35750601f8251116200064f57808251920151908083106200064057501790565b906001600160401b0382116200030957600654926001938481811c9116801562000902575b838210146200042857601f8111620008c8575b5081601f84116001146200085c575092829391839260009462000850575b50501b916000199060031b1c19161760065560ff90565b01519250388062000839565b919083601f198116600660005284600020946000905b88838310620008ad575050501062000893575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000885565b85870151885590960195948501948793509081019062000872565b600660005284601f84600020920160051c820191601f860160051c015b828110620008f55750506200081b565b60008155018590620008e5565b90607f16906200080856fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816306fdde031461392257508063083966461461386f578063095ea7b31461384557806318160ddd146138265780631df4ccfc1461380757806323b872dd146136ac5780632e17de78146135d2578063313ce567146135b65780633644e51514613592578063368242d3146134575780633a04bc0c146133325780633b47a9ac146131765780633d203ce21461309457806343352d6114612ef75783816346a4dd7b14612dae575080634cf088d914612d645780634cf518a114612c585780634d853ee514612c145780634e09bf4614612a7457806352f5213c1461288b5780636215be7714612763578063626a9b261461259357806362bf342f146124a15780636b69e05b146123bd57806370a08231146123875780637ecebe001461235057806380afdea8146123155780638129fc1c14611fa557806383d593d514611eb357806384b0196e14611d78578381638681d72f14611cd65750806388d4a3e514611b4d578381638d3ed7c414611abd575080638fcb4e5b146119da57806392fd9e8b146118d257806395d89b41146117ea578063a2dc057414611764578063a694fc3a14611692578063a8d5fd651461165f578063a9059cbb1461162e578063af157c191461147a57838163b579184f1461138457508063b60e3455146111e4578063c45a0155146111a0578063cac5fe001461118157838163cd5c6426146110fd57508063d505accf14610f4a578063d79875eb14610b33578063d94a862b14610921578063d96a094a14610715578063dcb2a3f514610650578063dd62ed3e14610604578063dddccf4f146105e5578063e3f6b544146105b2578063eeb3e45614610468578063ef153e1314610391578063fc0c546a1461035a5763fedda89c03610011578291346103565782600319360112610356576102c96142ff565b73__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561035157600f60248592845195869384927f70d07b820000000000000000000000000000000000000000000000000000000084528301525af49081156103485750610331575b50600160085580f35b61033a90613a4e565b610345578038610328565b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b82843461034557806003193601126103455750600c54600d54600e54925191825260208201526040810191909152606090f35b0390f35b50919034610464576103a236613b43565b906103ab6142ff565b600f8351957f1cfada88000000000000000000000000000000000000000000000000000000008752860152602760248601526044850152606484015260208360848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49182156104595791610420575b60209250600160085551908152f35b90506020823d8211610451575b8161043a60209383613b04565b8101031261044c576020915190610411565b600080fd5b3d915061042d565b9051903d90823e3d90fd5b5080fd5b509061047336613b43565b92909161047e6142ff565b600f8151927ff9dc325100000000000000000000000000000000000000000000000000000000845283015260276024830152826044830152836064830152808260848173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49081156105a95785928692610537575b5051338152602081019490945260408401526001600160a01b0316917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359080606081015b0390a3600160085580f35b809350818093503d83116105a2575b6105508183613b04565b8101031261059e578161052c6001600160a01b039260206105917f55605ebf45b3a37e9bf7d7978207691738ea6e78a6d9ab0f9941abccb6201a359661444f565b93015193509193506104e8565b8480fd5b503d610546565b513d86823e3d90fd5b50503461046457816003193601126104645760609060ff601e541690601f54906020549181519384526020840152820152f35b5050346104645781600319360112610464576020906009549051908152f35b505034610464578060031936011261046457602091610621613a12565b8261062a613a28565b926001600160a01b03809316815260018652209116600052825280600020549051908152f35b509190346104645760209283600319360112610711576001600160a01b03610676613a12565b600f8451937fed6de060000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af492831561070657926106d7575b5051908152f35b9091508281813d83116106ff575b6106ef8183613b04565b8101031261044c575190386106d0565b503d6106e5565b8251903d90823e3d90fd5b8280fd5b509160206003193601126103455761072b6142cd565b506107346142ff565b7f0000000000000000000000000000000000000000000000000000000000000000908251937f55d2ad91000000000000000000000000000000000000000000000000000000008552600c8186015234602486015235604485015260c08460648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af49384156109155781946108cd575b50918160c094936001600160a01b03610841941633146000146108435750506108026107fc6107f16060860151608087015190613cba565b60a086015190613cba565b3361426f565b600160085551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b7f2f6c00068c878507782070bbec6fd22224e9de1892a9232357080aec6e697b1c60808601926108738451614533565b606087019361088385513361426f565b61088e81513061426f565b61089e60a089019283519061426f565b8588015194519051915186519586526020860191909152604085019190915260608401523392608090a3610802565b90935060c03d811161090e575b6108e48183613b04565b81019060c08183031261059e579161090360c09594926108419461421f565b9450919290926107b9565b503d6108da565b508251903d90823e3d90fd5b50829034610464578160031936011261046457601e8351917f8c48d332000000000000000000000000000000000000000000000000000000008352820152818160248173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610b29578291610a22575b50825191602080840190808552835180925285850181878460051b880101950193965b8388106109b95786860387f35b90919293948380827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600195030186528851908580610a01845160608086528501906139ed565b938581015186850152015115159101529701930197019690939291936109ac565b90503d8083833e610a338183613b04565b8101906020908181840312610b2557805167ffffffffffffffff91828211610b2157019083601f8301121561059e57815190610a6e82614018565b94610a7b88519687613b04565b828652848087019360051b85010193818511610b1d57858101935b858510610aaa575050505050505083610989565b8451848111610b19578201606080601f198387030112610b15578b5191610ad083613acc565b89810151878111610b11578a9492828f610af38a89610b0296819a9801016143b3565b8552810151868501520161433a565b8d820152815201940193610a96565b8c80fd5b8a80fd5b8980fd5b8780fd5b8580fd5b8380fd5b83513d84823e3d90fd5b508290610b3f36613b43565b92610b486142cd565b50610b516142ff565b7f0000000000000000000000000000000000000000000000000000000000000000908551947f04cac304000000000000000000000000000000000000000000000000000000008652600c85870152836024870152604486015260c08560648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4948515610f3e578195610f02575b5047918686019283511015610ebf576080860194610bf38651614533565b60608701513015610e905730600052602090600082528960002054818110610e4b579080600092308452838552038b83205580600254036002558a519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef833092a360a0880193610caa8286518c51809381927fa9059cbb00000000000000000000000000000000000000000000000000000000835289898401602090939291936001600160a01b0360408201951681520152565b038185305af18015610e4157610e0d575b5085513315610dcb5781808092335af1610cd3614463565b5015610d895760c0886108418b8a8a8a8a6001600160a01b038b163303610d38575b50505050600160085551809260a0809180518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b905192519051845193845260208401929092526040830152606082015233906001907f2f6c00068c878507782070bbec6fd22224e9de1892a9232357080aec6e697b1c90608090a384808080610cf5565b6064925088519162461bcd60e51b8352820152601360248201527f455448207472616e73666572206661696c6564000000000000000000000000006044820152fd5b606484848d519162461bcd60e51b8352820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b8281813d8311610e3a575b610e228183613b04565b8101031261046457610e339061433a565b508a610cbb565b503d610e18565b8b513d84823e3d90fd5b8a517fe450d38c000000000000000000000000000000000000000000000000000000008152308186019081526020810192909252604082018390529081906060010390fd5b602482858b51917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b606485602089519162461bcd60e51b8352820152601560248201527f546f6b656e20616d6f756e7420746f206c6172676500000000000000000000006044820152fd5b90945060c03d8111610f37575b610f198183613b04565b81019060c081830312610b215790610f309161421f565b9386610bd5565b503d610f0f565b508551903d90823e3d90fd5b508290346104645760e060031936011261046457610f66613a12565b610f6e613a28565b906044359260643560843560ff8116810361044c578142116110ce576001600160a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176110b9578b5251902061106e9161106591611024613efe565b908c51917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015260c43591604260a4359220613da0565b90929192613e30565b168181036110855786611082878787613cdd565b80f35b604493508751927f4b800e460000000000000000000000000000000000000000000000000000000084528301526024820152fd5b604187634e487b7160e01b6000525260246000fd5b602483838a51917f62791302000000000000000000000000000000000000000000000000000000008352820152fd5b9290503461035657826003193601126103565773__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561035157600f60248592845195869384927f2ce9a45f0000000000000000000000000000000000000000000000000000000084528301525af490811561034857506111715750f35b61117a90613a4e565b6103455780f35b505034610464578160031936011261046457602090600a549051908152f35b505034610464578160031936011261046457602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5082903461046457816003193601126104645782519283602354808652602080960190602386527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090865b8181106113705750505081611245910382613b04565b80519473__$481ca34c951945c71f6bbcbbb91702f088$__91855b87811061126b578680f35b815181101561135d57828160051b830101518551907f5dc38368000000000000000000000000000000000000000000000000000000008252601e8883015260248201528581604481885af4908115611353578891611325575b508061130e575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112fb57600101611260565b602487601188634e487b7160e01b835252fd5b61131a61131f91614613565b614533565b886112cb565b6113459150863d881161134c575b61133d8183613b04565b810190614439565b50896112c4565b503d611333565b86513d8a823e3d90fd5b602487603288634e487b7160e01b835252fd5b82548452928801926001928301920161122f565b82818534610464576020600319360112610464576113a0613a12565b906001600160a01b036113d6817f0000000000000000000000000000000000000000000000000000000000000000163314614347565b73__$aee754128d0d1775ed250cc6ad74f33f25$__94853b1561059e576044600f918693855196879485937fa9479ab100000000000000000000000000000000000000000000000000000000855284015216978860248301525af49081156103485750611466575b50807f07681ffd9d424587412481b41d2ee582bb7bca757f626b0477051f302947027291a280f35b61146f90613a4e565b61046457818361143e565b50829034610464578160031936011261046457600f8351917f77e7a4e7000000000000000000000000000000000000000000000000000000008352820152818160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610b29578291611550575b508251916020808401908085528351809252808686019401925b8281106115095785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060808201519087015260809081015115159086015260a090940193928101926001016114fc565b90503d8083833e6115618183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b255780519161159a83614018565b936115a787519586613b04565b838552818501908260a080960285010193818511610b1d578301915b8483106115d657505050505050836114e2565b8583830312610b1d578386918a516115ed81613a78565b6115f68661444f565b815282860151838201528b8601518c82015260608087015190820152608061161f81880161433a565b908201528152019201916115c3565b50503461046457806003193601126104645760209061165861164e613a12565b6024359033613b93565b5160018152f35b82843461034557806003193601126103455750600f54601054601154925191825260208201526040810191909152606090f35b50903461071157602060031936011261071157828235926116b16142ff565b73__$b2fda0c84abdf24a5bde0680bf090c8e0e$__90813b1561071157601660648492865194859384927f94cfd9ca000000000000000000000000000000000000000000000000000000008452830152602560248301528860448301525af48015610b2957611750575b505051908152817f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160085580f35b61175990613a4e565b61071157823861171b565b509190346104645760209283600319360112610711576001600160a01b0361178a613a12565b60168451937fabe9c580000000000000000000000000000000000000000000000000000000008552840152166024820152838160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af492831561070657926106d7575051908152f35b50913461034557806003193601126103455750805190600092805461180e81613b59565b808552916001918083169081156118aa575060011461184c575b50505061183a8261038d940383613b04565b519182916020835260208301906139ed565b600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8286106118925750505061183a82602061038d9582010194611828565b80546020878701810191909152909501948101611875565b61038d97508693506020925061183a94915060ff191682840152151560051b82010194611828565b50346107115782600319360112610711576118eb6142ff565b600f8251917faf5907fa00000000000000000000000000000000000000000000000000000000835282015260208160248173__$aee754128d0d1775ed250cc6ad74f33f25$__5af49081156119ce57839161197d575b50905133815260208101919091527fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b37890604090a1600160085580f35b90506020813d82116119c6575b8161199760209383613b04565b8101031261044c57517fbab8b40526219a016e1d19ba3a15e1fc6899f24d360ca19c1e21966bb275b378611941565b3d915061198a565b505051903d90823e3d90fd5b5090346107115780600319360112610711576119f4613a12565b908360243592611a026142ff565b73__$aee754128d0d1775ed250cc6ad74f33f25$__94853b1561071157600f606484926001600160a01b03875195869485937ff351007e00000000000000000000000000000000000000000000000000000000855284015216988960248301528860448301525af48015610b2957611aa9575b5050519081527f99c01cd4f8275976ef33d24514b1694c8a9d5730d92e26996834343e09778e9960203392a3600160085580f35b611ab290613a4e565b610b25578338611a75565b9290503461035657602060031936011261035657611ad96142ff565b73__$aee754128d0d1775ed250cc6ad74f33f25$__91823b1561035157839060648351809581937f8b26588d000000000000000000000000000000000000000000000000000000008352600f81840152602760248401523560448301525af490811561034857506103315750600160085580f35b50829034610464578160031936011261046457600f8351917fcd985a9000000000000000000000000000000000000000000000000000000000835282015260276024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610b29578291611c13575b508251916020808401908085528351809252808686019401925b828110611be35785850386f35b835180516001600160a01b0316865280830151868401528701518786015260609094019392810192600101611bd6565b90503d8083833e611c248183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b2557805191611c5d83614018565b93611c6a87519586613b04565b8385528185019082606080960285010193818511610b1d578301915b848310611c995750505050505083611bbc565b8583830312610b1d578386918a51611cb081613acc565b611cb98661444f565b815282860151838201528b8601518c820152815201920191611c86565b9290503461035657602060031936011261035657611cf2613a12565b91611cfb6142ff565b73__$aee754128d0d1775ed250cc6ad74f33f25$__90813b1561059e576064600f9186936001600160a01b03865197889586947f03d9eb84000000000000000000000000000000000000000000000000000000008652850152602960248501521660448301525af490811561034857506103315750600160085580f35b509034610711578260031936011261071157611db37f0000000000000000000000000000000000000000000000000000000000000000614030565b92611ddd7f0000000000000000000000000000000000000000000000000000000000000000614144565b908251926020928385019585871067ffffffffffffffff881117611e9e57509280611e54838896611e47998b9996528686528151998a997f0f000000000000000000000000000000000000000000000000000000000000008b5260e0868c015260e08b01906139ed565b91898303908a01526139ed565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110611e8757505050500390f35b835185528695509381019392810192600101611e78565b604190634e487b7160e01b6000525260246000fd5b50903461071157602060031936011261071157813591611efd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b662386f26fc100008310611f3d5750816020917fb019d30b2fca7d8ca474448afd53ea1177a76c833805dc3d78eff68e7edb5a6f9360095551908152a180f35b6020608492519162461bcd60e51b8352820152602260248201527f5374616b696e67206665652070657263656e74206d757374206265203e3d203160448201527f30250000000000000000000000000000000000000000000000000000000000006064820152fd5b503461071157826003193601126107115773__$aee754128d0d1775ed250cc6ad74f33f25$__803b15610b25578383517fa9479ab1000000000000000000000000000000000000000000000000000000008152600f8482015281816044816001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016968760248301525af4801561230b576122f7575b505281602060128152620f42408286205581517f44a3381a000000000000000000000000000000000000000000000000000000008152601e84820152606060248201526120bc60648201604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b90828180660746a52880000094856044830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af49081156122ed578791612291575b5060ff7fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227491855191829187835261215a888401604090600681527f4d656d626572000000000000000000000000000000000000000000000000000060208201520190565b958784015216930390a2815161216f81613acc565b6801a055690d9db80000908181526b037790a0e8714009b49c000080938201527305a37324b8ac5eceebef390a22a97c20000000009384910152600c55600d55600e55600c8251917f55d2ad91000000000000000000000000000000000000000000000000000000008352820152672e4242b07dcf4000602482015282604482015260c08160648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af491821561034857508291612251575b506122438160a061223a6060611082950151608084015190613cba565b91015190613cba565b80601755426016553061426f565b905060c03d811161228a575b6122678183613b04565b810160c08282031261071157612283612243916110829361421f565b915061221d565b503d61225d565b809450838092503d83116122e6575b6122aa8183613b04565b81010312610b21577fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227460ff6122df87956141fe565b91506120f6565b503d6122a0565b84513d89823e3d90fd5b61230090613a4e565b610b25578338612041565b85513d84823e3d90fd5b505034610464578160031936011261046457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461046457602060031936011261046457806020926001600160a01b03612377613a12565b1681526007845220549051908152f35b50503461046457602060031936011261046457806020926001600160a01b036123ae613a12565b16815280845220549051908152f35b509190346104645781600319360112610464576123d86142ff565b60168151937fe21c40c200000000000000000000000000000000000000000000000000000000855284015260208360248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4918215610459579161246d575b8051338152602080820184905293507fed0efac57f2275dc27a26c14eb538dfadcfb7b3a0cc0eae190d2a782e1ae664e90604090a1600160085551908152f35b90506020823d8211612499575b8161248760209383613b04565b8101031261044c57602091519061242d565b3d915061247a565b50829034610464576060600319360112610464576124bd613a3e565b6124f46125026124cb613a28565b86519283916020830195869092916001600160a01b0360209160ff604085019616845216910152565b03601f198101835282613b04565b519020601e8451927f6555463a00000000000000000000000000000000000000000000000000000000845283015260248201526044356044820152828160648173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610b29578291612574575b5082519182526020820152f35b905061258d9150823d841161134c5761133d8183613b04565b83612567565b50829034610464578160031936011261046457600f8351917f3299ded100000000000000000000000000000000000000000000000000000000835282015260296024820152818160448173__$aee754128d0d1775ed250cc6ad74f33f25$__5af4908115610b2957829161267b575b508251916020808401908085528351809252808686019401925b8281106126295785850386f35b835180516001600160a01b0390811687528184015116868401528781015188870152606080820151908701526080808201519087015260a0908101519086015260c0909401939281019260010161261c565b90503d8083833e61268c8183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b25578051916126c583614018565b936126d287519586613b04565b838552818501908260c080960285010193818511610b1d578301915b8483106127015750505050505083612602565b8583830312610b1d578386918a5161271881613ab0565b6127218661444f565b815261272e83870161444f565b838201528b8601518c820152606080870151908201526080808701519082015260a080870151908201528152019201916126ee565b509034610711576020600319360112610711578135916127816142ff565b61278d83600f54613cba565b600f556127f38480845160208101907f23b872dd000000000000000000000000000000000000000000000000000000008252336024820152306044820152876064820152606481526127de81613a78565b519082305af16127ec614463565b9030614493565b8051908115159182612868575b505061283957507f26a49ee784523ce049bcbe276a63c7c9dbd9f428b1aa53633e679c9c046e88589160209151908152a1600160085580f35b60249151907f5274afe70000000000000000000000000000000000000000000000000000000082523090820152fd5b819250906020918101031261059e576020612883910161433a565b153880612800565b50906020600319360112610711576128a1613a3e565b6128a96142ff565b8151917f55d2ad91000000000000000000000000000000000000000000000000000000008352600c8484015234602484015284604484015260c08360648173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4928315612a6a578593612a30575b5061292d60606129238461291e6143f5565b6148c2565b9401938451614419565b9260ff815193601e8451977fbb43db580000000000000000000000000000000000000000000000000000000089528801526023602488015216928360448701526064860152836084860152600060a4860152818560c48173__$481ca34c951945c71f6bbcbbb91702f088$__5af48015612a26577fd3a61eeecfc1bf48d403794aa7cb568ce64d6edd2157419643e95e0b1b99a37e9394958791612a08575b506129d882513061426f565b806129f6575b505193815194855260208501523393a3600160085580f35b61131a612a0291614613565b386129de565b612a1f9150833d851161134c5761133d8183613b04565b50386129cc565b82513d88823e3d90fd5b90925060c03d8111612a63575b612a478183613b04565b810160c082820312610b2157612a5c9161421f565b913861290c565b503d612a3d565b81513d87823e3d90fd5b50903461071157806003193601126107115781359067ffffffffffffffff9081831161059e573660238401121561059e578284013591821161059e576024830192602483369201011161059e5760243593612af96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b601e8251917f44a3381a0000000000000000000000000000000000000000000000000000000083528201526060602482015260208180612b3d606482018789614392565b886044830152038173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115612a26578691612bb1575b5060ff90612ba37fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae2274958451958587968752860191614392565b95602084015216930390a280f35b90506020813d8211612c0c575b81612bcb60209383613b04565b81010312610b21577fae558decf2e9c74b6790144120387f8f42428d14d8bd9b23c4f0dd0014ae227493612ba3612c0360ff936141fe565b92505093612b6a565b3d9150612bbe565b505034610464578160031936011261046457602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50903461071157608060031936011261071157612c73613a12565b90602435916044358560643592612c886142ff565b73__$aee754128d0d1775ed250cc6ad74f33f25$__96873b1561071157600f60c484926001600160a01b03895195869485937f92bb151400000000000000000000000000000000000000000000000000000000855284015260296024840152169a8b60448301528a60648301528760848301528860a48301525af4801561230b57612d50575b505091519283526020830191909152604082015233907f61838b56b2b866547d8f639aa6390ca56e72d74b3acf6d32ced3594ca0cec54190806060810161052c565b612d5990613a4e565b610b21578538612d0e565b50503461046457816003193601126104645760c090601654906017549060185460195490601a5492601b5494815196875260208701528501526060840152608083015260a0820152f35b9290503461035657608060031936011261035657612dca613a3e565b6024359067ffffffffffffffff821161059e573660238301121561059e5781840135612df581613b27565b92612e0285519485613b04565b8184523660248383010111612ef357818792602460209301838701378401015260643591821515809303610b2157612e646001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314614347565b73__$481ca34c951945c71f6bbcbbb91702f088$__90813b15612ef35760ff958794612ed2601e938851998a97889687967f8a6f1c3400000000000000000000000000000000000000000000000000000000885287015216602485015260a0604485015260a48401906139ed565b906044356064840152608483015203915af490811561034857506111715750f35b8680fd5b5082903461046457816003193601126104645760168351917f442679e500000000000000000000000000000000000000000000000000000000835282015260256024820152818160448173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af4908115610b29578291612fc8575b508251916020808401908085528351809252808686019401925b828110612f8d5785850386f35b835180516001600160a01b03168652808301518684015287810151888701526060908101519086015260809094019392810192600101612f80565b90503d8083833e612fd98183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e57019082601f83011215610b2557815161301281614018565b9361301f87519586613b04565b818552828086019260071b85010193818511612ef3578301915b84831061304b57505050505083612f66565b608083830312612ef35783608091895161306481613a94565b61306d8661444f565b815282860151838201528a8601518b82015260608087015190820152815201920191613039565b50346107115781600319360112610711576130ad613a3e565b6124f46130e46130bb613a28565b85519283916020830195869092916001600160a01b0360209160ff604085019616845216910152565b519020601e8351927f5dc383680000000000000000000000000000000000000000000000000000000084528301526024820152818160448173__$481ca34c951945c71f6bbcbbb91702f088$__5af4918215610348578392613158575b50508061314c575080f35b61131a61108291614613565b61316e9250803d1061134c5761133d8183613b04565b503880613141565b50829034610464578160031936011261046457601e8351917ffb1af52e00000000000000000000000000000000000000000000000000000000835282015260236024820152818160448173__$481ca34c951945c71f6bbcbbb91702f088$__5af4908115610b29578291613254575b508251916020808401908085528351809252808686019401925b82811061320c5785850386f35b8351805160ff168652808301516001600160a01b0316868401528781015188870152606080820151908701526080908101519086015260a090940193928101926001016131ff565b90503d8083833e6132658183613b04565b8101906020908181840312610b255780519067ffffffffffffffff821161059e570182601f82011215610b255780519161329e83614018565b936132ab87519586613b04565b838552818501908260a080960285010193818511610b1d578301915b8483106132da57505050505050836131e5565b8583830312610b1d578386918a516132f181613a78565b6132fa866141fe565b815261330783870161444f565b838201528b8601518c82015260608087015190820152608080870151908201528152019201916132c7565b50903461071157806003193601126107115761334c613a3e565b602435916133586142ff565b60ff61336f6133698461291e6143f5565b85614419565b92601e8351967fbb43db58000000000000000000000000000000000000000000000000000000008852870152602360248701521691826044860152836064860152806084860152600160a4860152818560c48173__$481ca34c951945c71f6bbcbbb91702f088$__5af48015612a26577fd3a61eeecfc1bf48d403794aa7cb568ce64d6edd2157419643e95e0b1b99a37e9394958791613439575b5080613427575b50815194855260208501523393a3600160085580f35b61131a61343391614613565b38613411565b6134509150833d851161134c5761133d8183613b04565b503861340a565b50903461071157806003193601126107115760ff613473613a3e565b61347b6142ff565b601e8351947f85e03dcb000000000000000000000000000000000000000000000000000000008652850152602360248501521690816044840152602435606484015260608360848173__$481ca34c951945c71f6bbcbbb91702f088$__5af4801561358857848594869261352a575b5090817f9d451943fd7f3501dbaaffd6b87934f264cd28768306dc38e6941245ec861f9793926134275750815194855260208501523393a3600160085580f35b945050506060833d8211613580575b8161354660609383613b04565b81010312610b25578251602084015193820151907f9d451943fd7f3501dbaaffd6b87934f264cd28768306dc38e6941245ec861f976134ea565b3d9150613539565b81513d86823e3d90fd5b5050346104645781600319360112610464576020906135af613efe565b9051908152f35b5050346104645781600319360112610464576020905160128152f35b509034610711576020600319360112610711578135916135f06142ff565b8373__$b2fda0c84abdf24a5bde0680bf090c8e0e$__91823b15610464576064601691855194859384927ffc74ae08000000000000000000000000000000000000000000000000000000008452830152602560248301528760448301525af480156136a25761368f575b505190815260017f2febbe8755cdd9b89180fdd9ba97abb38ccbe4a658c2431dde5885fbb965cdd460203393a3600160085580f35b61369b90939193613a4e565b913861365a565b82513d86823e3d90fd5b508234610345576060600319360112610345576136c7613a12565b6136cf613a28565b91604435936001600160a01b038316808352600160205286832033845260205286832054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830361372a575b602088611658898989613b93565b8683106137c2578115613793573315613764575082526001602090815286832033845281529186902090859003905582906116588761371c565b602490848951917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602490848951917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b87517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018790528291506060010390fd5b505034610464578160031936011261046457602090600b549051908152f35b5050346104645781600319360112610464576020906002549051908152f35b505034610464578060031936011261046457602090611658613865613a12565b6024359033613cdd565b50903461071157826003193601126107115760168151927f204c022a00000000000000000000000000000000000000000000000000000000845283015260208260248173__$b2fda0c84abdf24a5bde0680bf090c8e0e$__5af49182156139185783926138e1575b6020838351908152f35b9091506020813d8211613910575b816138fc60209383613b04565b8101031261071157602092505190386138d7565b3d91506138ef565b81513d85823e3d90fd5b849084346107115782600319360112610711578260035461394281613b59565b808552916001918083169081156118aa575060011461396d5750505061183a8261038d940383613b04565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8286106139b25750505061183a82602061038d9582010194611828565b80546020878701810191909152909501948101613995565b60005b8381106139dd5750506000910152565b81810151838201526020016139cd565b90601f19601f602093613a0b815180928187528780880191016139ca565b0116010190565b600435906001600160a01b038216820361044c57565b602435906001600160a01b038216820361044c57565b6004359060ff8216820361044c57565b67ffffffffffffffff8111613a6257604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117613a6257604052565b6080810190811067ffffffffffffffff821117613a6257604052565b60c0810190811067ffffffffffffffff821117613a6257604052565b6060810190811067ffffffffffffffff821117613a6257604052565b6040810190811067ffffffffffffffff821117613a6257604052565b90601f601f19910116810190811067ffffffffffffffff821117613a6257604052565b67ffffffffffffffff8111613a6257601f01601f191660200190565b600319604091011261044c576004359060243590565b90600182811c92168015613b89575b6020831014613b7357565b634e487b7160e01b600052602260045260246000fd5b91607f1691613b68565b916001600160a01b03808416928315613c895716928315613c585760009083825281602052604082205490838210613c0d575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b91908201809211613cc757565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03809116918215613d6f5716918215613d3e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613e2457926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613e185780516001600160a01b03811615613e0f57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b6004811015613ee85780613e42575050565b60018103613e745760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613ead57602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613eb75750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480613fef575b15613f59577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152613fe981613ab0565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614613f30565b67ffffffffffffffff8111613a625760051b60200190565b60ff81146140865760ff811690601f821161405c576040519161405283613ae8565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b5060405160055481600061409983613b59565b8083529260019081811690811561412257506001146140c3575b506140c092500382613b04565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061410757506140c09350508101602001386140b3565b819350908160209254838589010152019101909184926140ee565b602093506140c095925060ff1991501682840152151560051b820101386140b3565b60ff81146141665760ff811690601f821161405c576040519161405283613ae8565b5060405160065481600061417983613b59565b80835292600190818116908115614122575060011461419f57506140c092500382613b04565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b8483106141e357506140c09350508101602001386140b3565b819350908160209254838589010152019101909184926141ca565b519060ff8216820361044c57565b81810292918115918404141715613cc757565b91908260c091031261044c5760405161423781613ab0565b60a080829480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b6001600160a01b0316908115613c58577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826142b1600094600254613cba565b60025584845283825260408420818154019055604051908152a3565b604051906142da82613ab0565b8160a06000918281528260208201528260408201528260608201528260808201520152565b600260085414614310576002600855565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b5190811515820361044c57565b1561434e57565b606460405162461bcd60e51b815260206004820152600c60248201527f4f6e6c7920666f756e64657200000000000000000000000000000000000000006044820152fd5b601f8260209493601f19938186528686013760008582860101520116010190565b81601f8201121561044c5780516143c981613b27565b926143d76040519485613b04565b8184526020828401011161044c576140c091602080850191016139ca565b6040519061440282613acc565b600c548252600d546020830152600e546040830152565b8115614423570490565b634e487b7160e01b600052601260045260246000fd5b919082604091031261044c576020825192015190565b51906001600160a01b038216820361044c57565b3d1561448e573d9061447482613b27565b916144826040519384613b04565b82523d6000602084013e565b606090565b906144d257508051156144a857805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b8151158061451d575b6144e3575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156144db565b91908203918211613cc757565b601a54156145885761458390614578614570670de0b6b3a764000061455a6009548561420c565b0461456781601954613cba565b60195583614526565b600f54613cba565b600f55600b54613cba565b600b55565b8061457861458392600f54613cba565b9060208282031261044c57815167ffffffffffffffff9283821161044c570160808183031261044c57604051926145ce84613a94565b6145d78261444f565b8452602082015190811161044c576060926145f39183016143b3565b60208401526146046040820161444f565b60408401520151606082015290565b907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b039182811693604080517f24f3a51b00000000000000000000000000000000000000000000000000000000938482527f0000000000000000000000000000000000000000000000000000000000000000600483015260009485836024818c5afa9283156148b857869361489c575b508251881615158885858361488d575b505050614838575b506146fe95969750614703670de0b6b3a7640000806146e660608601518861420c565b049788916146f6600a548961420c565b048097614526565b614526565b97614762602080966147168c8354613cba565b82558651809381927fa9059cbb000000000000000000000000000000000000000000000000000000009788845260048401602090939291936001600160a01b0360408201951681520152565b03818a305af1801561482e576147fa575b5086614783575b50505050505050565b9183015183519182529091166001600160a01b031660048201526024810194909452818460448186305af190811561034857506147c4575b8080808061477a565b82813d83116147f3575b6147d88183613b04565b8101031261034557506147ea9061433a565b503880806147bb565b503d6147ce565b8581813d8311614827575b61480f8183613b04565b81010312612ef3576148209061433a565b5038614773565b503d614805565b85513d89823e3d90fd5b8591925060248451809a819382528460048301525afa80156136a2576146fe959697859161486b575b50908796956146c3565b61488791503d8087833e61487f8183613b04565b810190614598565b38614861565b015116151590508885386146bb565b6148b19193503d8088833e61487f8183613b04565b91386146ab565b84513d88823e3d90fd5b60ff600092168252602060218152604091828420838051926148e384613acc565b815193878454906148f382613b59565b808852600192898482169182600014614a2d5750506001146149f0575b50600285928861492862278d009a60ff950382613b04565b855287015496878a86015201541615159101528151947f4fabfe920000000000000000000000000000000000000000000000000000000086528151600487015281015160248601520151604484015204606482015260c08160848173__$ff3a2bd404286ed9d5b3b36a2bfde83b52$__5af4918215610348575082916149b3575b5060609150015190565b905060c03d81116149e9575b6149c98183613b04565b81019160c08284031261034557506060916149e39161421f565b386149a9565b503d6149bf565b969050858a5287808b20978b985b818a10614a145750919788010190506002614910565b8054848b0184015291909801978a9650899184016149fe565b60ff1916818b015291151560051b890190910191506002905061491056fea2646970667358221220ee0ad8925df2f48c0d2b16b6ba1433f76fe44c2bfe6e4481356b6b1b582981a064736f6c63430008140033a2646970667358221220aa2af672a0b3690cead00e4a36aa95d3f1c2a72c62daa5a4b9cda7ed02e771b664736f6c63430008140033",
  "libraries": {
    "Token": "0x103a6f18584d89C8111a62e9caDD8aA54368f533",
    "Share": "0x4283c7b911BAd3411750964fa701587c55FD3120",
    "Staking": "0x9c41ba33300461Dcdc6D351f625D806f8df56733",
    "Member": "0x341eee63496DB870756e016a82E39e239eC85190"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}